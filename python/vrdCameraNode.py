'''
Autogenerated Method-Stub for:
module vrdCameraNode
------------------------------------------

API version: v2
Generation Date: 2020-04-24

VRED-Py: Visual Studio Code Tools for Autodesk VRED
'''

from typing import List



def activate():
    '''
    Sets the camera to active.
    '''
    pass



def getAimConstraintSources():
    '''
    Returns the list of nodes set as aim constraint sources for the camera.
    '''
    pass



def getAimVisualizationScale():
    '''
    Returns the scaling value used for the aim and up vector visualization.
    '''
    pass



def getAimVisualizationVisible():
    '''
    Queries if the aim and up vector visualization is visible in the renderer.
    '''
    pass



def getCameraCollider():
    '''
    This object gives access to the camera collision functionality.
    '''
    pass



def getCameraTrack(cameraTrackIndex):
    '''
    Gets the camera track.
    '''
    pass



def getCameraTrackCount():
    '''
    Returns the number of camera tracks in the camera.
    '''
    pass



def getCameraTracks():
    '''
    Returns the list of all camera track nodes of the camera.
    '''
    pass



def getDefaultCameraTrack():
    '''
    Returns the default camera track node.
    '''
    pass



def getDollyZoom():
    '''
    Returns the state of dolly zoom mode.
    '''
    pass



def getEvaluateNavigationMode():
    '''
    Queries if evaluation of the navigation mode is enabled.
    '''
    pass



def getTurntable():
    '''
    This object gives access to the turntable.
    '''
    pass



def getUpVectorConstraintSources():
    '''
    Returns the list of nodes set as up vector sources for the camera.
    '''
    pass



def getVisualizationScale():
    '''
    Returns the scaling value used for the camera visualization.
    '''
    pass



def getVisualizationVisible():
    '''
    Queries if the visualization for the camera has been enabled.
    '''
    pass



def hasAimConstraint():
    '''
    Queries if the camera has an aim constraint.
    '''
    pass



def hasAimConstraintSource(sourceNode):
    '''
    Queries if a given node is an aim constraint source for the camera.
    '''
    pass



def isActive():
    '''
    Determines if the camera is active.
    '''
    pass



def isDefault():
    '''
    Determines if the camera is the default camera.
    '''
    pass



def isInitialCamera():
    '''
    Queries if this camera is the initial camera.
    '''
    pass



def removeAimConstraintSources():
    '''
    Removes all aim constraint sources from the camera.
    '''
    pass



def removeUpVectorConstraintSources():
    '''
    Removes all up vector constraint sources.
    '''
    pass



def setAimConstraintSources(nodes):
    '''
    Sets a list of nodes as aim constraint sources for the camera.
    '''
    pass



def setAimVisualizationScale(value):
    '''
    Sets the scaling value for the aim and up vector visualization.
    '''
    pass



def setAimVisualizationVisible(enable):
    '''
    Enables / disables the aim and up vector visualizations.
    '''
    pass



def setDollyZoom(enabled):
    '''
    Enables / disables dolly zoom mode.
    '''
    pass



def setEvaluateNavigationMode(enabled):
    '''
    Enable / disable the evaluation of the navigation mode when playing camera animations.
    '''
    pass



def setInitialCamera():
    '''
    Sets this camera to be the initial camera.
    '''
    pass



def setUpVectorConstraintSources(nodes):
    '''
    Sets a list of nodes as up vector constraint sources.
    '''
    pass



def setVisualizationScale(value):
    '''
    Sets a scaling value for the camera visualization.
    '''
    pass



def setVisualizationVisible(enable):
    '''
    Enables / disables the visualization of the camera.
    '''
    pass



def updateFromPerspectiveMatch():
    '''
    Updates this camera’s focal length and rotation according to perspective match settings.
    '''
    pass


