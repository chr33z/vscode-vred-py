
# Autogenerated method stubs for 'vrNodeUtils.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def addFaceNormals(root_node):
    '''
    See calcFaceNormals with the exception that the calculation is only performed for geometries without normals. There are two functions to generate them:

addFaceNormals() Adds face normals for the complete scene.

addFaceNormals(root_node) Adds face normals for a given subgraph.

@param root_node: The root node of the subgraph (Optional).

@type root_node: NodePtr
    '''
    pass



def cacheVBO(node):
    '''
    Deprecated and not functional anymore! Rebuilds all vertex buffer objects for the whole scene or the given subtree node. There are two valid sets of parameters:

cacheVBO(node) or

cacheVBO()

@param node: The root node of the subgraph (Optional).

@type node: NodePtr
    '''
    pass



def calcFaceNormalRepresentation(length):
    '''
    Creates visualization geometry for face normals. Useful for debugging purposes. The created geometry will be added to the root node of the scene.

@param length: The length of the created lines.

@type length: float
    '''
    pass



def calcFaceNormals(root_node):
    '''
    Calculates new vertex normals based on face normals. There are two functions to generate them:

calcVertexNormals() Calculates new face normals for the complete scene.

calcVertexNormals(root_node) Calculates new face normals for a given subgraph.

@param root_node: The root node of the subgraph (Optional).

@type root_node: NodePtr
    '''
    pass



def calcNormalAndBitangent(root_node, textureUnit, tangentTarget, binormalTarget):
    '''
    Calculates tangents and binormals depending on vertex normals and texture coordinates. Tangents and Binormals are needed for advanced shading materials.

@param root_node: The root node of the subgraph.

@type root_node: vrNodePtr

@param textureUnit: Texture unit.

@type textureUnit: integer

@param tangentTarget: Tangent target.

@type tangentTarget: integer

@param binormalTarget: Binormal target.

@type binormalTarget: integer
    '''
    pass



def calcSecondaryColorRepresentation(length):
    '''
    Creates visualization geometry for secondary vertex colors. Useful for debugging purposes. The created geometry will be added to the root node of the scene.

@param length: The length of the created lines.

@type length: float
    '''
    pass



def calcVertexColorRepresentation(length):
    '''
    Creates visualization geometry for vertex colors. Useful for debugging purposes. The created geometry will be added to the root node of the scene.

@param length: The length of the created lines.

@type length: float
    '''
    pass



def calcVertexNormalRepresentation(length):
    '''
    Creates visualization geometry for vertex normals. Useful for debugging purposes. The created geometry will be added to the root node of the scene.

@param length: The length of the created lines.

@type length: float
    '''
    pass



def calcVertexNormals(root_node, angle):
    '''
    Calculates new and smooth vertex normals. There are three functions to generate vertex normals:

calcVertexNormals() Calculates new vertex normals for the complete scene.

calcVertexNormals(angle) Calculates new vertex normals for the complete scene with respect to dihedral angle.

calcVertexNormals(root_node,angle) Calculates new vertex normals for a given subgraph with respect to dihedral angle.

@param root_node: The root node of the subgraph (Optional).

@type root_node: NodePtr

@param angle: The angle in degrees (Optional).

@type angle: float (32bit)
    '''
    pass



def convertAllToComponentTransform(root_node):
    '''
    Converts all Transform nodes of a given subgraph to VRML-ComponentTransform nodes.

@param root_node: The root node of the subgraph.

@type root_node: NodePtr
    '''
    pass



def convertAllToTransform(root_node):
    '''
    Converts all Component transform nodes of a given subgraph to normal transform nodes.

@param root_node: The root node of the subgraph.

@type root_node: NodePtr
    '''
    pass



def createAttachment(type):
    '''
    Creates a new attachment of a given type

Types can be:
   -   Name
   -   ValuePair
   -   TagAttachment
   -   any attachment type that is supported by VRED

@param type: The type of the attachment.

@type type: string  
@return: The created attachment.

@rtype: FieldContainerPtr
    '''
    pass



def createBox(size_x, size_y, size_z, res_x, res_y, res_z, red, green, blue, alpha):
    '''
    Creates a box object of size x/y/z in a given rgb color.

@param size_x: The size in dimension x.

@type size_x: float (32bit)

@param size_y: The size in dimension y.

@type size_y: float (32bit)

@param size_z: The size in dimension z.

@type size_z: float (32bit)

@param res_x: The resolution in dimension x for the subdivision.

@type res_x: short unsigned (16bit)

@param res_y: The resolution in dimension y for the subdivision.

@type res_y: short unsigned (16bit)

@param res_z: The resolution in dimension z for the subdivision.

@type res_z: short unsigned (16bit)

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@param alpha: The alpha value in [0.0, 1.0] (Optional).

@type alpha: float (32bit)

@return: A pointer to the box.

@rtype: vrNodePtr
    '''
    pass



def createCone(height, radius, sides, create_side, create_bottom, red, green, blue):
    '''
    Creates a cone, or parts of it, in a given size and color.

@param height: The height of the cone.

@type height: float (32bit)

@param radius: The bottom radius of the cone.

@type radius: float (32bit)

@param sides: The number of elements the side consists of.

@type sides: short unsigned (16bit)

@param create_side: Creation of side geometry: On/Off.

@type create_side: bool

@param create_bottom: Creation of bottom geometry: On/Off.

@type create_bottom: bool

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@return: A pointer to the cone.

@rtype: vrNodePtr
    '''
    pass



def createCylinder(height, radius, sides, create_side, create_top, create_bottom, red, green, blue):
    '''
    Creates a cylinder, or parts of it, in a given size and color.

@param height: The height of the cylinder.

@type height: float (32bit)

@param radius: The radius of the cylinder.

@type radius: float (32bit)

@param sides: The number of elements the side consists of.

@type sides: short unsigned (16bit)

@param create_side: Creation of side geometry: On/Off.

@type create_side: bool

@param create_top: Creation of top geometry: On/Off.

@type create_top: bool

@param create_bottom: Creation of bottom geometry: On/Off.

@type create_bottom: bool

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@return: A pointer to the cylinder.

@rtype: vrNodePtr
    '''
    pass



def createEnvBox(size, res_x, res_y, res_z, red, green, blue, transparency, texture):
    '''
    Creates a box with an environment texture.

@param size: The size of the box.

@type size: float (32bit)

@param res_x: The resolution in dimension x for the subdivision.

@type res_x: short unsigned (16bit)

@param res_y: The resolution in dimension y for the subdivision.

@type res_y: short unsigned (16bit)

@param res_z: The resolution in dimension z for the subdivision.

@type res_z: short unsigned (16bit)

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@param transparency: The transparency of the material in [0.0, 1.0].

@type transparency: float (32bit)

@param texture: The name of the texture file.

@type texture: string

@return: A pointer to the box.

@rtype: vrNodePtr
    '''
    pass



def createLatLongSphere(latres, longres, radius, red, green, blue):
    '''
    Creates a sphere in a given size and color, with two different resolutions.

@param latres: The latitudinal resolution.

@type latres: short unsigned (16bit)

@param longres: The longitudinal resolution.

@type longres: short unsigned (16bit)

@param radius: The radius.

@type radius: float (32bit)

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@return: A pointer to the sphere.

@rtype: vrNodePtr
    '''
    pass



def createLine(ax, ay, az, bx, by, bz, red, green, blue):
    '''
    Creates a line from point a to point b in a given rgb color.

@param ax: The x component of point a.

@type ax: float (32bit)

@param ay: The y component of point a.

@type ay: float (32bit)

@param az: The z component of point a.

@type az: float (32bit)

@param bx: The x component of point b.

@type bx: float (32bit)

@param by: The y component of point b.

@type by: float (32bit)

@param bz: The z component of point b.

@type bz: float (32bit)

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@return: A pointer to the line.

@rtype: vrNodePtr
    '''
    pass



def createMipmaps():
    '''
    Creates mipmaps for all textures.
    '''
    pass



def createPlane(size_x, size_y, res_x, res_y, red, green, blue):
    '''
    Creates a plane object of size x/y in a given rgb color.

@param size_x: The size in dimension x.

@type size_x: float (32bit)

@param size_y: The size in dimension y.

@type size_y: float (32bit)

@param res_x: The resolution in dimension x for the subdivision.

@type res_x: short unsigned (16bit)

@param res_y: The resolution in dimension y for the subdivision.

@type res_y: short unsigned (16bit)

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@return: A pointer to the plane.

@rtype: vrNodePtr
    '''
    pass



def createShellNodes(node):
    '''
    Converts groups to shell nodes if all children are surfaces.

@param node: The node to start conversion

@type node: NodePtr

@return: true: A shell node was created.

@rtype: bool
    '''
    pass



def createSphere(resolution, radius, red, green, blue):
    '''
    Creates a sphere in a give size and color.

@param resolution: The resolution (subdivision) of the sphere.

@type resolution: short unsigned (16bit)

@param radius: The radius of the sphere.

@type radius: float (32bit)

@param red: The red component of color in [0.0, 1.0].

@type red: float (32bit)

@param green: The green component of color in [0.0, 1.0].

@type green: float (32bit)

@param blue: The blue component of color in [0.0, 1.0].

@type blue: float (32bit)

@return: A pointer to the sphere.

@rtype: vrNodePtr
    '''
    pass



def degToRad(degrees):
    '''
    Converts degrees to radians.

@param degrees: The value in degrees.

@type degree: float (32bit)

@return: The value in radians.

@rtype: float (32bit)
    '''
    pass



def downscaleTextures(factor):
    '''
    Downscale all textures within the scene. The memory usage for each texture will reduce of quadratic amount of the factor due to their two-dimensional nature.

@param factor: The factor to downscale textures with.

@type factor: integer (32bit)
    '''
    pass



def findLargestGeometry(max_tris_limit):
    '''
    Returns the largest geometry with the number of triangles smaller than max_tris_limit.

@param max_tris_limit: The maximum number of triangles.

@type max_tris_limit: unsigned integer

@return: The node pointer to the largest geometry.

@rtype: NodePtr
    '''
    pass



def getBoundingBoxCenter(node, worldSpace):
    '''
    Gets the center of the object bounding volume.

@param node: The node from which to get the center.

@type node: NodePtr

@param worldSpace: Gets the center in world space (true) or local space (false).

@type worldSpace: bool

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getMirroredNodes(root_node, invert):
    '''
    Returns all mirrored geometry nodes.

@param root_node: The root node.

@type root_node: NodePtr

@param invert: Inversion: Enable/Disable (Optional). Default is false.

@type invert: bool

@return: The nodes.

@rtype: list of vrNodePtrs
    '''
    pass



def getTransformNodeEulerRotationOrder(node):
    '''
    Gets the rotation order of a transform node.

@param node: The node from which to retrieve the rotation order.

@type node: NodePtr

@return: Euler rotation order

@rtype: string
    '''
    pass



def getTransformNodeRotatePivot(node, worldSpace):
    '''
    Gets the rotate pivot of a transform node.

@param node: The node from which to retrieve the rotate pivot.

@type node: NodePtr

@param worldSpace: Get the rotate pivot in world space (true) or local space (false).

@type worldSpace: bool

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeRotatePivotTranslation(node):
    '''
    Gets the rotate pivot translation value of a transform node (This translation has been introduced to prevent an object from moving when the pivot is moved).

@param node: The node from which to retrieve the translation.

@type node: NodePtr

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeRotation(node):
    '''
    Gets the rotation value of a transform node.

@param node: The node from which to retrieve the rotation.

@type node: NodePtr

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeRotationOrientation(node):
    '''
    Gets the rotation orientation value of a transform node.

@param node: The node from which to retrieve the rotation orientation.

@type node: NodePtr

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeScale(node):
    '''
    Gets the scale value of a transform node.

@param node: The node  which to retrieve the scaling.

@type node: NodePtr

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeScalePivot(node, worldSpace):
    '''
    Gets the scale pivot of a transform node.

@param node: The node from which to get the scale pivot.

@type node: NodePtr

@param worldSpace: Get scale pivot in world space (true) or local space (false).

@type worldSpace: bool

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeScalePivotTranslation(node):
    '''
    Gets the scale pivot translation value of a transform node (This translation has been introduced to prevent an object from moving when the pivot is moved)

@param node: The node from which to retrieve the translation.

@type node: NodePtr

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeShear(node):
    '''
    Gets the shear value of a transform node.

@param node: The node from which to get the shear value.

@type node: NodePtr

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def getTransformNodeTranslation(node, worldSpace):
    '''
    Gets the translation value of a transform node.

@param node: The node from which to retrieve the translation.

@type node: NodePtr

@param worldSpace: gets the translation in world space (true) or local space (false).

@type worldSpace: bool

@return: A vector with x, y and z coordinates.

@rtype: Vec3f
    '''
    pass



def isBSide(node):
    '''
    Queries the B-Side flag of a node.

@param node: The node to check the B-Side flag.

@type node: NodePtr

@return: true: Node is B-Side, false: Node is A-Side.

@rtype: bool
    '''
    pass



def normalizeNormals(root_node):
    '''
    Recalculates the vertex normals to have unit length. There are two functions to calculate them:

normalizeNormals(root_node) normalize the normals for the complete scene.

normalizeNormals(root_nodes) normalize the normals for a given subgraph.

@param root_node: The root node of the subgraph or a list of nodes.

@type root_node: vrNodePtr or list of vrNodePtrs
    '''
    pass



def normalizeSurfaces(root_node):
    '''
    Normalizes the knot vector of a surfaces. This is required for NURBS raytracing and should be usually done on import.

@param root_node: The root node of the subgraph.

@type root_node: vrNodePtr
    '''
    pass



def offsetAlongNormal(root_node, offset):
    '''
    Offsets the geometries vertices along the vertex normal.

@param root_node: The root_node to offset.

@type root_node: vrNodePtr

@param offset: The offset amount.

@type float: float
    '''
    pass



def optimizeShellSurfaces(node):
    '''
    Reduces memory consumption of Shell Surfaces by removing their names and optimizing some additional data.

@param node: The root node.

@type node: NodePtr
    '''
    pass



def optimizeTextures():
    '''
    Optimizes memory usage of textures. Will often lead to significant savings. Does maintain the quality.
    '''
    pass



def removeUnreferencedNodes(node):
    '''
    Removes unreferenced nodes.

@param node: The root node.

@type node: NodePtr
    '''
    pass



def setDisplayList(node, enable):
    '''
    Enables(true)/disables(false) usage of display lists for rendering for the whole scene or a given subgraph. Rendering static geometry with display list is typically much faster. There are two valid sets of parameters:

setDisplayList(node,enable) or

setDisplayList(enable)

@param node: The root node of the subgraph (Optional).

@type node: NodePtr

@param enable: Enable or disable display lists.

@type enable: bool
    '''
    pass



def setGeometryType(nodes, geoTypes):
    '''
    Sets the geometry types for a list of nodes.

@param nodes: The nodes.

@type nodes: list of vrNodePtrs

@param geoTypes: The list of geometry types.

@type geoTypes: list of integers (unsigned 32bit)
    '''
    pass



def setTexturesPriority(priority):
    '''
    Deprecated: Changes the priority of all textures.

@param priority: The priority value in [0.0, 1.0].

@type priority: float (32bit)
    '''
    pass



def setToBSide(node, isBSide, node, isBSide):
    '''
    Sets the B-Side flag of a node.

@param node: The node to set the B-Side flag.

@type node: NodePtr

@param isBSide: The B-Side on/off flag.

@type isBSide: bool



Sets the B-side flags for a list of nodes.

@param node: The nodes.

@type node: NodePtr

@param isBSide: The B-Side on/off flag.

@type isBSide: bool
    '''
    pass



def setTransformNodeEulerRotationOrder(node, rotationOrder):
    '''
    Sets the rotation order of a transform node.

@param node: The node to set the rotation order.

@type node: NodePtr

@param rotationOrder: The rotation order, e.g. "xyz" or "zyx" 

@type rotationOrder: string
    '''
    pass



def setTransformNodeRotatePivot(node, x, y, z, worldSpace):
    '''
    Sets the rotate pivot of a transform node.

@param node: The node for which to set the rotate pivot.

@type node: NodePtr

@param x: The x axis rotate pivot.

@type x: float

@param y: The y axis rotate pivot.

@type y: float

@param z: The z axis rotate pivot.

@type z: float

@param worldSpace: Set the rotate pivot in world space (true) or local space (false).

@type worldSpace: bool
    '''
    pass



def setTransformNodeRotatePivotTranslation(node, x, y, z):
    '''
    Sets the rotate pivot translation value of a transform node (This translation has been introduced to prevent an object from moving when the pivot is moved).

@param node: The node to translate.

@type node: NodePtr

@param x: The x axis translation.

@type x: float

@param y: The y axis translation.

@type y: float

@param z: The z axis translation.

@type z: float
    '''
    pass



def setTransformNodeRotation(node, x, y, z):
    '''
    Sets the rotation value of a transform node.

@param node: The node to rotate.

@type node: NodePtr

@param x: The x axis rotation.

@type x: float

@param y: The y axis rotation.

@type y: float

@param z: The z axis rotation.

@type z: float
    '''
    pass



def setTransformNodeRotationOrientation(node, x, y, z):
    '''
    Sets the rotation orientation value of a transform node.

@param node: The node to orientate.

@type node: NodePtr

@param x: The x axis rotation orientation.

@type x: float

@param y: The y axis rotation orientation.

@type y: float

@param z: The z axis rotation orientation.

@type z: float
    '''
    pass



def setTransformNodeScale(node, x, y, z):
    '''
    Sets the scale value of a transform node.

@param node: The node to scale.

@type node: NodePtr

@param x: The x axis scale.

@type x: float

@param y: The y axis scale.

@type y: float

@param z: The z axis scale.

@type z: float
    '''
    pass



def setTransformNodeScalePivot(node, x, y, z, worldSpace):
    '''
    Sets the scale pn of a transform node.

@param node: The node for which to set the scale pivot.

@type node: NodePtr

@param x: The x axis scale pivot.

@type x: float

@param y: The y axis scale pivot.

@type y: float

@param z: The z axis scale pivot.

@type z: float

@param worldSpace: Set the scale pivot in world space (true) or local space (false).

@type worldSpace: bool
    '''
    pass



def setTransformNodeScalePivotTranslation(node, x, y, z):
    '''
    Sets the scale pivot translation value of a transform node (This translation has been introduced to prevent an object from moving when the pivot is moved).

@param node: The node to translate.

@type node: NodePtr

@param x: The x axis translation.

@type x: float

@param y: The y axis translation.

@type y: float

@param z: The z axis translation.

@type z: float
    '''
    pass



def setTransformNodeShear(node, xy, xz, yz):
    '''
    Sets the shear value of a transform node.

@param node: The node to shear.

@type node: NodePtr

@param xy: The xy shear.

@type xy: float

@param xz: The xz shear.

@type xz: float

@param yz: The yz shear.

@type yz: float
    '''
    pass



def setTransformNodeTranslation(node, x, y, z, worldSpace):
    '''
    Sets the translation value of a transform node.

@param node: The node to translate.

@type node: NodePtr

@param x: The x axis translation.

@type x: float

@param y: The y axis translation.

@type y: float

@param z: The z axis translation.

@type z: float

@param worldSpace: Sets the translation in world space (true) or local space (false).

@type worldSpace: bool
    '''
    pass



def setVBO(node, enable):
    '''
    Deprecated: Enables(true)/disables(false) usage of vertex buffer objects for rendering for the whole scene or a given subgraph. There are two valid sets of parameters:

setVBO(node,enable) or

setVBO(enable)

@param node: The root node of the subgraph (Optional).

@type node: NodePtr

@param enable: Enable or disable vbos.

@type enable: bool
    '''
    pass



def swapFaceNormals(root_node):
    '''
    Swaps the orientation of face normals. There are two functions to swap them:

swapFaceNormals(root_node) swaps the normals for the complete scene.

swapFaceNormals(root_nodes) swaps the normals for a given subgraph.

@param root_node: The root node of the subgraph or a list of nodes.

@type root_node: vrNodePtr or list of vrNodePtrs
    '''
    pass



def swapNormals(root_node):
    '''
    Swaps the orientation of face and vertex normals. There are two functions to swap them:

swapNormals(root_node) swaps the normals for the complete scene.

swapNormals(root_nodes) swaps the normals for a given subgraph.

@param root_node: The root node of the subgraph or a list of nodes.

@type root_node: vrNodePtr or list of vrNodePtrs
    '''
    pass



def swapVertexNormals(root_node):
    '''
    Swaps the orientation of vertex normals. There are two functions to swap them:

swapVertexNormals(root_node) swaps the normals for the complete scene.

swapVertexNormals(root_nodes) swaps the normals for a given subgraph.

@param root_node: The root node of the subgraph or a list of nodes.

@type root_node: vrNodePtr or list of vrNodePtrs
    '''
    pass



def unshareCores(node):
    '''
    Removes core sharing.

@param node: The root node.

@type node: NodePtr
    '''
    pass



def updateAmbientOcclusionData(root_node):
    '''
    Fixes ambient occlusion calculations from old vred versions:

@param root_node: The root node of the subgraph.
    '''
    pass


