'''
vrKernelServices

Import vrKernelServices like:

import vrKernelServices
from vrKernelServices import vrdCameraService

API Version: v2 | Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
'''

from __future__ import annotations
from typing import List


class TeleportGroundMode():
    pass


class BlendMode():
    pass


class CameraEye():
    pass


class MenuConstraint():
    pass


class FogFalloffMode():
    pass


class JobState():
    pass


class CollisionStructureBuildMethod():
    pass


class QVector3D():
    pass


class QIcon():
    pass


class VisualizationMode():
    pass


class QDateTime():
    pass


class NodeType():
    pass


class FileState():
    pass


class LoadMode():
    pass


class State():
    pass


class ElementType():
    pass


class SizeType():
    pass


class CameraProjectionMode():
    pass


class CameraTrackType():
    pass


class CameraAxis():
    pass


class CameraCandelaMapping():
    pass


class Attenuation():
    pass


class FovMode():
    pass


class SmartReferenceBehavior():
    pass


class QSize():
    pass


class CameraConstraint():
    pass


class QColor():
    pass


class UnshareOption():
    pass


class CameraStereoLayout():
    pass


class RepeatMode():
    pass


class MenuOrigin():
    pass


class Position():
    pass


class CameraSensorResponse():
    pass


class NotificationMode():
    pass


class ScalingMode():
    pass


class QVector4D():
    pass


class ExportLocation():
    pass


class SourceReferenceBehavior():
    pass


class ElementShape():
    pass


class StarShape():
    pass


class ControlMode():
    pass


class FoveatedQualityPreset():
    pass


class ContentType():
    pass


class ViewpointCreationMode():
    pass


class VanishingLinesType():
    pass


class CameraTonemapper():
    pass


class QMatrix4x4():
    pass


class ShadingQuality():
    pass


class QObject():
    pass


class DictstringQColor():
    pass


class TurntableDirection():
    pass


class FileType():
    pass


class QQuaternion():
    pass


class CameraResponseCurveMode():
    pass


class LightType():
    pass


class CameraColorspace():
    pass


class Unit():
    pass


class QImage():
    pass


class FileExtensionFilterMode():
    pass


class QWidget():
    pass


class QVector2D():
    pass


class PresetType():
    pass


class vrdObject():
    '''
    Returns the internal object id.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getObjectId() -> 'int':
        '''
        Returns the internal object id.
        '''
        return int()

    @staticmethod
    def isNull() -> bool:
        '''
        Determines if the object is null.
        '''
        return bool()


class vrdSceneObject(vrdObject):
    '''
    This interface represents an object that is part of the scene.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def isValid() -> bool:
        '''
        Determines if the object is valid.
        '''
        return bool()


class vrdNode(vrdSceneObject):
    '''
    Base class for all nodes.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getChild(index: 'int' = None) -> 'vrdNode':
        '''
        Gets a child node by index.
        '''
        return vrdNode()

    @staticmethod
    def getChildCount() -> 'int':
        '''
        Get the number of child nodes.
        '''
        return int()

    @staticmethod
    def getChildIndex(child: 'vrdNode' = None) -> 'int':
        '''
        Get the index of the child node in the list of children.
        '''
        return int()

    @staticmethod
    def getChildren() -> List['vrdNode']:
        '''
        Returns a list of all child nodes.
        '''
        return [vrdNode()]

    @staticmethod
    def getChildrenRecursive() -> List['vrdNode']:
        '''
        Returns a list of all child nodes recursively (including children of children).
        '''
        return [vrdNode()]

    @staticmethod
    def getName() -> 'str':
        '''
        Returns the name of the node.
        '''
        return str()

    @staticmethod
    def getParent() -> 'vrdNode':
        '''
        Returns the parent node.
        '''
        return vrdNode()

    @staticmethod
    def getSharedNodes() -> List['vrdNode']:
        '''
        Returns scene nodes that share this node.
        '''
        return [vrdNode()]

    @staticmethod
    def getVisibilityFlag() -> bool:
        '''
        Returns the local visibility flag.
        '''
        return bool()

    @staticmethod
    def getWorldTransform() -> 'QMatrix4x4':
        '''
        Gets the world transformation matrix of this node.
        '''
        return QMatrix4x4()

    @staticmethod
    def isShared() -> bool:
        '''
        Returns true, if this node has shared instances in the scene.
        '''
        return bool()

    @staticmethod
    def isVisible() -> bool:
        '''
        Returns if the node is visible.
        '''
        return bool()

    @staticmethod
    def setName(name: 'str' = None):
        '''
        Sets the name of the node.
        '''
        pass

    @staticmethod
    def setVisibilityFlag(visible: bool = False):
        '''
        Sets the local visibility flag.
        '''
        pass


class vrdTransformNode(vrdNode):
    '''
    This is currently a placeholder interface with no functionality.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdBaseLightNode(vrdTransformNode):
    '''
    This class is the base from which all other light nodes are derived from. It contains the functionality that is shared among all lights.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getCastShadowOnShadowMaterial() -> bool:
        '''
        Returns if the light casts a shadow on the shadow material.
        '''
        return bool()

    @staticmethod
    def getDiffuseColor() -> 'QVector3D':
        '''
        Returns the diffuse color of the light.
        '''
        return QVector3D()

    @staticmethod
    def getGlossyColor() -> 'QVector3D':
        '''
        Returns the light’s glossy color.
        '''
        return QVector3D()

    @staticmethod
    def getGroundShadowIntensity() -> float:
        '''
        Returns the intensity of shadows on the shadow material.
        '''
        return float()

    @staticmethod
    def getIlluminateShadowMaterial() -> bool:
        '''
        Returns whether the light illuminates the shadow material.
        '''
        return bool()

    @staticmethod
    def getImportanceMultiplier() -> float:
        '''
        Returns the importance multiplier of the light.
        '''
        return float()

    @staticmethod
    def getIntensity() -> float:
        '''
        Returns the intensity of the light.
        '''
        return float()

    @staticmethod
    def getIsPhysicallyBased() -> bool:
        '''
        Returns whether the light source is physically based.
        '''
        return bool()

    @staticmethod
    def getLightTransform() -> 'vrdLightTransform':
        '''
        Returns the light transform.
        '''
        return vrdLightTransform()

    @staticmethod
    def getLightUnit() -> 'Unit':
        '''
        Returns the unit used for this light source.
        '''
        return Unit()

    @staticmethod
    def getMaterialShadowIntensity() -> float:
        '''
        Returns the intensity of shadows of brdf based materials.
        '''
        return float()

    @staticmethod
    def getOn() -> bool:
        '''
        Returns the state of the light.
        '''
        return bool()

    @staticmethod
    def getTemperature() -> 'int':
        '''
        Returns the light temperature.
        '''
        return int()

    @staticmethod
    def getUseLightTemperature() -> bool:
        '''
        Returns whether the light uses the temperature value to determine its color.
        '''
        return bool()

    @staticmethod
    def getVisualizationVisible() -> bool:
        '''
        Returns whether the light source visualization is visible.
        '''
        return bool()

    @staticmethod
    def setCastShadowOnShadowMaterial(castShadow: bool = False):
        '''
        Set whether the light casts a shadow on the shadow material or not.
        '''
        pass

    @staticmethod
    def setDiffuseColor(diffuseColor: 'QVector3D' = None):
        '''
        Sets the diffuse color of the light.
        '''
        pass

    @staticmethod
    def setGlossyColor(glossyColor: 'QVector3D' = None):
        '''
        Sets the glossy color of the light.
        '''
        pass

    @staticmethod
    def setGroundShadowIntensity(intensity: float = 0.0):
        '''
        Sets the intensity of shadows on the shadow material.
        '''
        pass

    @staticmethod
    def setIlluminateShadowMaterial(illuminateShadosMeterial: bool = False):
        '''
        Sets whether the light illuminates the shadow material.
        '''
        pass

    @staticmethod
    def setImportanceMultiplier(importanceMultiplier: float = 0.0):
        '''
        Sets the importance multiplier of the light.
        '''
        pass

    @staticmethod
    def setIntensity(intensity: float = 0.0):
        '''
        Sets the intensity of the light.
        '''
        pass

    @staticmethod
    def setIsPhysicallyBased(on: bool = False):
        '''
        Sets whether the light source is physically based.
        '''
        pass

    @staticmethod
    def setLightUnit(unit: 'Unit' = None):
        '''
        Sets the unit used for this light source.
        '''
        pass

    @staticmethod
    def setMaterialShadowIntensity(intensity: float = 0.0):
        '''
        Sets the intensity of shadows of brdf based materials.
        '''
        pass

    @staticmethod
    def setOn(on: bool = False):
        '''
        Switch the light on / off.
        '''
        pass

    @staticmethod
    def setTemperature(kelvin: 'int' = None):
        '''
        Sets the light temperature.
        '''
        pass

    @staticmethod
    def setUseLightTemperature(use: bool = False):
        '''
        Sets whether the light uses the temperature value to determine its color.
        '''
        pass

    @staticmethod
    def setVisualizationVisible(showVisualization: bool = False):
        '''
        Sets whether the light source visualization is visible.
        '''
        pass


class vrdDeltaLightNode(vrdBaseLightNode):
    '''
    This is the base class for all delta light types.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getIlluminateScene() -> bool:
        '''
        Returns whether the light illuminates the scene.
        '''
        return bool()

    @staticmethod
    def getLocalLight() -> bool:
        '''
        Returns if this light is a local light.
        '''
        return bool()

    @staticmethod
    def getShadowMap() -> 'vrdShadowMap':
        '''
        Returns the shadow map of the light source.
        '''
        return vrdShadowMap()

    @staticmethod
    def getVisualizationScale() -> float:
        '''
        Returns the scale of the light visualization.
        '''
        return float()

    @staticmethod
    def setIlluminateScene(illuminateScene: bool = False):
        '''
        Sets whether the light source illuminates the scene.
        '''
        pass

    @staticmethod
    def setLocalLight(isLocalLight: bool = False):
        '''
        Sets the local light flag.
        '''
        pass

    @staticmethod
    def setVisualizationScale(scale: float = 0.0):
        '''
        Sets the scale of the light visualization.
        '''
        pass


class vrdPointLightNode(vrdDeltaLightNode):
    '''
    Returns the falloff of the light intensity.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAttenuation() -> 'Attenuation':
        '''
        Returns the falloff of the light intensity.
        '''
        return Attenuation()

    @staticmethod
    def getLensFlareEffect() -> 'vrdLensFlareEffect':
        '''
        Returns the lens flare effect.
        '''
        return vrdLensFlareEffect()

    @staticmethod
    def getLightProfile() -> 'vrdLightProfile':
        '''
        Returns the light profile.
        '''
        return vrdLightProfile()

    @staticmethod
    def getTexture() -> 'vrdLightTexture':
        '''
        Returns the light texture.
        '''
        return vrdLightTexture()

    @staticmethod
    def setAttenuation(attenuation: 'Attenuation' = None):
        '''
        Sets the falloff of the light intensity.
        '''
        pass


class vrdObjectSignal():
    '''
    Base class for all signal objects.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdLensFlareElement(vrdSceneObject):
    '''
    This is the base class of all lens flare effect classes. The Light Service works with objects of this class, but behind which objects derived from this class are hidden.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getIsActive() -> bool:
        '''
        Returns activation state of the lens flare element.
        '''
        return bool()

    @staticmethod
    def getName() -> 'str':
        '''
        Returns name of this lens flare element.
        '''
        return str()

    @staticmethod
    def setIsActive(active: bool = False):
        '''
        Each lens flare element can be inactive for a while. The element will be hidden if is inactive. This method set the activation state of a lens flare element.
        '''
        pass

    @staticmethod
    def setName(name: 'str' = None):
        '''
        Each lens flare has a name. The name must not be unique. This method set the name.
        '''
        pass


class vrdLensFlareFxElement(vrdLensFlareElement):
    '''
    This class is used for all common properties of     vrdLensFlareStar, vrdLensFlareGhost, vrdLensFlareStreak and vrdLensFlareGlow lens flare effect classes.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getColor() -> 'QVector3D':
        '''
        Get the color of this effect.
        '''
        return QVector3D()

    @staticmethod
    def getFeather() -> float:
        '''
        Get the fade out value.
        '''
        return float()

    @staticmethod
    def getIntensity() -> float:
        '''
        Get current intensity.
        '''
        return float()

    @staticmethod
    def getRotation() -> float:
        '''
        Get current used rotation value.
        '''
        return float()

    @staticmethod
    def getSize() -> float:
        '''
        Get the current used effect size.
        '''
        return float()

    @staticmethod
    def setColor(tint: 'QVector3D' = None):
        '''
        Use to change the color of the lens flare. If the light already has an assigned color, this color will be mixed with it.
        '''
        pass

    @staticmethod
    def setFeather(blurring: float = 0.0):
        '''
        Lets the effect fade towards the edge. Value of 0.0 deactivates the effect.
        '''
        pass

    @staticmethod
    def setIntensity(intensity: float = 0.0):
        '''
        Makes the effect more or less intense.
        '''
        pass

    @staticmethod
    def setRotation(rotation: float = 0.0):
        '''
        Rotate the effect on light ray axis.
        '''
        pass

    @staticmethod
    def setSize(size: float = 0.0):
        '''
        Set the effect size, must be positive.
        '''
        pass


class vrdConstraintNode(vrdNode):
    '''
    This class serves as a base class for vrdPositionConstraint, vrdOrientationConstraint and vrdAimConstraint. It gives base access to a constraint object in VRED.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def clearConstrainedNode():
        '''
        Clears the constrained object node.
        '''
        pass

    @staticmethod
    def clearTargetNodes():
        '''
        Clears the set target nodes of the constraint.
        '''
        pass

    @staticmethod
    def getConstrainedNode() -> 'vrdNode':
        '''
        Returns the node set as the constrained object.
        '''
        return vrdNode()

    @staticmethod
    def getTargetNodes() -> List['vrdNode']:
        '''
        Returns the list of nodes set as targets for the constraint.
        '''
        return [vrdNode()]

    @staticmethod
    def getTargetNodeWeight(node: 'vrdNode' = None) -> float:
        '''
        Gets the weight for a target node of the constraint. The node must be referenced in the target nodes list of the constraint.
        '''
        return float()

    @staticmethod
    def isActive() -> bool:
        '''
        Returns if the constraint is active.
        '''
        return bool()

    @staticmethod
    def setActive(value: bool = False):
        '''
        Sets the constraint active/deactive.
        '''
        pass

    @staticmethod
    def setConstrainedNode(node: 'vrdNode' = None):
        '''
        Sets a node as the constrained object.
        '''
        pass

    @staticmethod
    def setTargetNodes(nodes: List['vrdNode'] = None):
        '''
        Sets a list of nodes as targets for the constraint.
        '''
        pass

    @staticmethod
    def setTargetNodeWeight(node: 'vrdNode' = None, weight: float = 0.0):
        '''
        Sets the weight for a target node of the constraint. The node must be referenced in the target nodes list of the constraint.
        '''
        pass


class vrdTurntable(vrdSceneObject):
    '''
    This class provides control over the turntable of a camera.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAngle() -> float:
        '''
        Returns the angle of the turntable/.
        '''
        return float()

    @staticmethod
    def getAnimationDuration() -> float:
        '''
        Returns the duration of the turntable animation.
        '''
        return float()

    @staticmethod
    def getDirection() -> 'TurntableDirection':
        '''
        Returns the turntable animation playback direction.
        '''
        return TurntableDirection()

    @staticmethod
    def getDistance() -> float:
        '''
        Returns the distance of the turntable.
        '''
        return float()

    @staticmethod
    def getHeight() -> float:
        '''
        Returns the height of the turntable.
        '''
        return float()

    @staticmethod
    def getLoop() -> bool:
        '''
        Returns the state of the turntable animation loop mode.
        '''
        return bool()

    @staticmethod
    def getPlaying() -> bool:
        '''
        Returns the playback state of the turntable animation.
        '''
        return bool()

    @staticmethod
    def setAngle(angle: float = 0.0):
        '''
        Sets the angle of the turntable.
        '''
        pass

    @staticmethod
    def setAnimationDuration(seconds: float = 0.0):
        '''
        Sets the duration of the turntable animation.
        '''
        pass

    @staticmethod
    def setDirection(direction: 'TurntableDirection' = None):
        '''
        Sets the playback direction of the turntable animation.
        '''
        pass

    @staticmethod
    def setDistance(distance: float = 0.0):
        '''
        Sets the distance of the turntable.
        '''
        pass

    @staticmethod
    def setHeight(height: float = 0.0):
        '''
        Sets the height of the turntable.
        '''
        pass

    @staticmethod
    def setLoop(enable: bool = False):
        '''
        Sets the turntable animation to loop mode.
        '''
        pass

    @staticmethod
    def setPlaying(value: bool = False):
        '''
        Starts / stops the turntable animation.
        '''
        pass

    @staticmethod
    def updateFromView():
        '''
        Update the turntable parameters from the current view.
        '''
        pass


class vrRenderTypes():
    '''
    vrSceneplateService

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdRayLightNode(vrdBaseLightNode):
    '''
    Interface for a ray light node.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getRayFile() -> 'vrdRayFile':
        '''
        Provides access to the ray file. Ray light files contain the simulated spatial and angular distribution, as well as photometric or spectral information of emitted light from a complex light source.
        '''
        return vrdRayFile()


class vrdLensFlareGhost(vrdLensFlareFxElement):
    '''
    This class is used for a ghost effect in a ghost line. Ghost are elements that move with the light source. A short introduction can be found under     https://help.autodesk.com/view/VREDPRODUCTS/2020/ENU/?guid=VRED_Lights_About_Lens_Flares_and_Elements_html.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getChromaticAberration() -> 'QVector3D':
        '''
        Get used chromatic aberration values as RGB.
        '''
        return QVector3D()

    @staticmethod
    def getDistance() -> float:
        '''
        Get the lens flare effect distance from light source.
        '''
        return float()

    @staticmethod
    def getEdgeIntensity() -> float:
        '''
        Get the edge color intensity of the Ghost Line element.
        '''
        return float()

    @staticmethod
    def getEdgeThickness() -> float:
        '''
        Get thickness of the edges of the Ghost Line element.
        '''
        return float()

    @staticmethod
    def getImage() -> 'vrdImage':
        '''
        Return the current used texture.
        '''
        return vrdImage()

    @staticmethod
    def getIsChromaticAberrationActive() -> bool:
        '''
        Get activation state the usage of chromatic aberration.
        '''
        return bool()

    @staticmethod
    def getShape() -> 'ElementShape':
        '''
        Give the current used shape for the ghost element.
        '''
        return ElementShape()

    @staticmethod
    def setChromaticAberration(chromaticAberration: 'QVector3D' = None):
        '''
        Use chromatic aberration with the lens flare element to distort the colors.
        '''
        pass

    @staticmethod
    def setDistance(distance: float = 0.0):
        '''
        Lens flare effect distance from light source. Must be between -5 and 5. Use a negative value for a position in front of the light source.
        '''
        pass

    @staticmethod
    def setEdgeIntensity(edgeIntensity: float = 0.0):
        '''
        Makes the edge color of the Ghost Line element more or less intense. Changing it to 0 will make the edge disappear.
        '''
        pass

    @staticmethod
    def setEdgeThickness(thickness: float = 0.0):
        '''
        The thickness of the edges of the Ghost Line element. When Edge Intensity is high, it is much easier to see the difference.
        '''
        pass

    @staticmethod
    def setImage(image: 'vrdImage' = None):
        '''
        Set an image for this ghost element. You have to change the type to Texture to use the image for the ghost.
        '''
        pass

    @staticmethod
    def setIsChromaticAberrationActive(isActive: bool = False):
        '''
        Activate the usage of chromatic aberration.
        '''
        pass

    @staticmethod
    def setShape(shape: 'ElementShape' = None):
        '''
        Set a shape for the ghost element.
        '''
        pass


class vrUndoService():
    '''
    Service that provides access to undo / redo functionality.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def beginBlockUndo():
        '''
        Prefix call. Temporarily blocks undo for all the commands that are created between beginBlockUndo and endBlockUndo.
        '''
        pass

    @staticmethod
    def beginMultiCommand(name: 'str' = None, description: 'str' = None, mergeEnabled: bool = False):
        '''
        Prefix call. Used to wrap subsequent undo-able service calls to one grouped command.
        '''
        pass

    @staticmethod
    def beginUndo():
        '''
        Prefix call. Enables undo for all commands that are added to the undo stack.
        '''
        pass

    @staticmethod
    def endBlockUndo():
        '''
        Suffix call to         vrUndoService.beginBlockUndo().
        '''
        pass

    @staticmethod
    def endMultiCommand():
        '''
        Suffix call to beginMultiCommand.
        '''
        pass

    @staticmethod
    def endUndo():
        '''
        Suffix call to         vrUndoService.beginUndo(). Note: To temporarily block undo, you can also use beginBlockUndo, endBlockUndo.
        '''
        pass

    @staticmethod
    def undoBlocked() -> bool:
        '''
        Indicates if undo is currently blocked.
        '''
        return bool()

    @staticmethod
    def undoEnabled() -> bool:
        '''
        Indicates if undo is currently active. This means,         vrUndoService.beginUndo() has been called.
        '''
        return bool()


class vrReferenceExportOptions():
    '''
    vrReferenceImportOptions

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def vrReferenceExportOptions():
        '''

        '''
        pass


class vrImmersiveUiService():
    '''
    Interface to work with interactive VR windows and tools.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createMenu(name: 'str' = None) -> 'vrdImmersiveMenu':
        '''
        Creates a new VR menu.
        '''
        return vrdImmersiveMenu()

    @staticmethod
    def createTool(name: 'str' = None) -> 'vrdImmersiveTool':
        '''
        Creates a new VR tool visible on the VR tools menu.
        '''
        return vrdImmersiveTool()

    @staticmethod
    def deleteMenu(menu: 'vrdImmersiveMenu' = None):
        '''
        Removes a VR menu.
        '''
        pass

    @staticmethod
    def deleteTool(tool: 'vrdImmersiveTool' = None):
        '''
        Removes a VR tool.
        '''
        pass

    @staticmethod
    def findMenu(name: 'str' = None) -> 'vrdImmersiveMenu':
        '''
        Find a VR menu by name.
        '''
        return vrdImmersiveMenu()

    @staticmethod
    def findTool(name: 'str' = None) -> 'vrdImmersiveTool':
        '''
        Find a VR tool by name.
        '''
        return vrdImmersiveTool()

    @staticmethod
    def getHideParticipantsVRPanel() -> bool:
        '''
        Get participants hide option.
        '''
        return bool()

    @staticmethod
    def getHideStatusVRPanel() -> bool:
        '''
        Get status panel hide option.
        '''
        return bool()

    @staticmethod
    def getTools() -> List['vrdImmersiveTool']:
        '''

        '''
        return [vrdImmersiveTool()]

    @staticmethod
    def openToolsSubMenu(content: 'str' = None):
        '''
        Opens a new tools sub menu with the given html content.
        '''
        pass

    @staticmethod
    def setHideParticipantsVRPanel(value: bool = False):
        '''
        Hides the participants panel in the vr menu.
        '''
        pass

    @staticmethod
    def setHideStatusVRPanel(value: bool = False):
        '''
        Hides the status panel with the current time in the vr menu.
        '''
        pass

    @staticmethod
    def showToolsMenu(show: bool = False, rightHand: bool = False):
        '''
        Opens or closes the VR tools menu.
        '''
        pass

    @staticmethod
    def toggleToolsMenu(rightHand: bool = False) -> bool:
        '''
        Toggles show/hide VR tools menu.
        '''
        return bool()

    @staticmethod
    def toolChecked(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted, if a tool button is switched on.
        '''
        pass

    @staticmethod
    def toolClicked(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted, if a tool button is clicked.
        '''
        pass

    @staticmethod
    def toolSubMenuClosed(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted, if a tool sub menu is closed.
        '''
        pass

    @staticmethod
    def toolSubMenuOpened(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted, if a tool sub menu is opened.
        '''
        pass

    @staticmethod
    def toolUnchecked(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted, if a tool button is switched off.
        '''
        pass


class vrdReferenceNode(vrdNode):
    '''
    Reference node.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createSmartPath(location: 'ExportLocation' = None, customPath: 'str' = None) -> 'str':
        '''
        Constructs the path to the smart file.
        '''
        return str()

    @staticmethod
    def createSmartReference(useSourcePath: bool = False):
        '''
        Creates a smart file reference for this reference.
        '''
        pass

    @staticmethod
    def createSourceReference():
        '''
        Creates a source file reference for this reference.
        '''
        pass

    @staticmethod
    def getSmartCreationDate() -> 'QDateTime':
        '''

        '''
        return QDateTime()

    @staticmethod
    def getSmartFileState() -> 'FileState':
        '''

        '''
        return FileState()

    @staticmethod
    def getSmartLastModified() -> 'QDateTime':
        '''

        '''
        return QDateTime()

    @staticmethod
    def getSmartOwner() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSmartPath() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSmartRevision() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSmartRevisionPath(revision: 'str' = None) -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSmartRevisions() -> List['str']:
        '''

        '''
        return [str()]

    @staticmethod
    def getSourceFileState() -> 'FileState':
        '''

        '''
        return FileState()

    @staticmethod
    def getSourceImportDate() -> 'QDateTime':
        '''

        '''
        return QDateTime()

    @staticmethod
    def getSourceLastModified() -> 'QDateTime':
        '''

        '''
        return QDateTime()

    @staticmethod
    def getSourceOwner() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSourcePath() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSourceRevision() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSourceRevisionPath(revision: 'str' = None) -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSourceRevisions() -> List['str']:
        '''

        '''
        return [str()]

    @staticmethod
    def getState() -> 'State':
        '''
        Get the current status of the reference node.
        '''
        return State()

    @staticmethod
    def hasSmartReference() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def hasSourceReference() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def isChanged() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def isLoaded() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def isRootNode() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def isSelfOrSubReferenceChanged() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def isSubReferenceChanged() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def load():
        '''
        Loads the reference content.
        '''
        pass

    @staticmethod
    def loadSmartReference():
        '''
        Loads the reference content, if this reference contains a source reference.
        '''
        pass

    @staticmethod
    def loadSourceReference():
        '''
        Loads the reference content, if this reference contains a smart reference.
        '''
        pass

    @staticmethod
    def removeSmartReference():
        '''
        Removes the smart reference information from this reference.
        '''
        pass

    @staticmethod
    def removeSourceReference():
        '''
        Removes the source reference information from this reference.
        '''
        pass

    @staticmethod
    def saveSmartReference():
        '''
        Save changes to the referenced project file.
        '''
        pass

    @staticmethod
    def saveSmartReferenceAs(path: 'str' = None, unshare: bool = False):
        '''
        Save content of the reference to a new project file.
        '''
        pass

    @staticmethod
    def setSmartPath(path: 'str' = None):
        '''
        Change the path to the smart reference file.
        '''
        pass

    @staticmethod
    def setSourcePath(path: 'str' = None):
        '''
        Change the path to the source file.
        '''
        pass

    @staticmethod
    def unload():
        '''
        Remove all children of this node and mark as not loaded.
        '''
        pass


class vrdShadowMap(vrdSceneObject):
    '''
    This class represents a shadow map used in OpenGL rendering.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getFilterRadius() -> float:
        '''
        Returns the radius used for shadow map filtering.
        '''
        return float()

    @staticmethod
    def getResolution() -> 'int':
        '''
        Returns the resolution of the shadow map.
        '''
        return int()

    @staticmethod
    def setFilterRadius(radius: float = 0.0):
        '''
        Sets the radius for shadow map filtering.
        '''
        pass

    @staticmethod
    def setResolution(resolution: 'int' = None):
        '''
        Sets the resolution of the shadow map.
        '''
        pass


class vrdSpotLightNode(vrdPointLightNode):
    '''
    Returns the light beam’s angle from center to the edge, measured in degrees.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getConeAngle() -> float:
        '''
        Returns the light beam’s angle from center to the edge, measured in degrees.
        '''
        return float()

    @staticmethod
    def getPenumbraAngle() -> float:
        '''
        Returns the light edge’s falloff in degrees.
        '''
        return float()

    @staticmethod
    def setConeAngle(angle: float = 0.0):
        '''
        Sets the light beam’s angle from center to the edge, measured in degrees.
        '''
        pass

    @staticmethod
    def setPenumbraAngle(angle: float = 0.0):
        '''
        Sets the light edge’s falloff in degrees.
        '''
        pass


class vrdPositionConstraintNode(vrdConstraintNode):
    '''
    This class gives access to a position constraint object in VRED. A position constraint will synchronize the position of a source and a target. If there are multiple sources, the position is calculated as the weighted average value of it.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getMaintainOffset() -> bool:
        '''
        Returns if the constraint maintains the offset to its sources.
        '''
        return bool()

    @staticmethod
    def setMaintainOffset(value: bool = False):
        '''
        Sets if the constraint should maintain the offset to the sources when creating it.
        '''
        pass


class vrCADFileTypes():
    '''
    Maxon Cinema 4D file format.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrLightTypes():
    '''
    Keeps the intensity of the light constant, in relation to the distance of the light source.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdAreaLightNode(vrdBaseLightNode):
    '''
    This is the base class for all area lights. These lights emit light from an entire area in contrast to point lights, which emit light from a single point.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAttenuation() -> 'Attenuation':
        '''
        Returns the attenuation mode.
        '''
        return Attenuation()

    @staticmethod
    def getIlluminateScene() -> bool:
        '''
        Returns the state of the illuminate scene flag..
        '''
        return bool()

    @staticmethod
    def getInteractiveQuality() -> 'int':
        '''
        Returns the raytracing quality level for the interactive mode.
        '''
        return int()

    @staticmethod
    def getLightProfile() -> 'vrdLightProfile':
        '''
        Returns the light profile.
        '''
        return vrdLightProfile()

    @staticmethod
    def getLocalLight() -> bool:
        '''
        Returns the state of local lighting.
        '''
        return bool()

    @staticmethod
    def getPrimaryVisibility() -> bool:
        '''
        Returns the state of the primary visibility.
        '''
        return bool()

    @staticmethod
    def getShadowMap() -> 'vrdShadowMap':
        '''
        Returns the shadow map of the light.
        '''
        return vrdShadowMap()

    @staticmethod
    def getStillFrameQuality() -> 'int':
        '''
        Returns the ratracing still frame quality level.
        '''
        return int()

    @staticmethod
    def getTexture() -> 'vrdLightTexture':
        '''
        Returns the currently used light texture.
        '''
        return vrdLightTexture()

    @staticmethod
    def getVisibleInReflections() -> bool:
        '''
        Returns if the light is visible in reflections (Raytracing only).
        '''
        return bool()

    @staticmethod
    def setAttenuation(attenuation: 'Attenuation' = None):
        '''
        Sets the attenuation mode. Attenuation is the falloff of the light intensity.
        '''
        pass

    @staticmethod
    def setIlluminateScene(illuminateScene: bool = False):
        '''
        Toggles the illumination of objects on or off.
        '''
        pass

    @staticmethod
    def setInteractiveQuality(quality: 'int' = None):
        '''
        Sets the raytracing quality level for the interactive mode.
        '''
        pass

    @staticmethod
    def setLocalLight(isLocalLight: bool = False):
        '''
        Enables / disables local lighting.
        '''
        pass

    @staticmethod
    def setPrimaryVisibility(visible: bool = False):
        '''
        Sets the primary visibility of the light.
        '''
        pass

    @staticmethod
    def setStillFrameQuality(quality: 'int' = None):
        '''
        Sets the raytracing quality level for still frame rendering.
        '''
        pass

    @staticmethod
    def setVisibleInReflections(visible: bool = False):
        '''
        Sets the visibility in reflections.
        '''
        pass


class vrdAreaLightCone(vrdSceneObject):
    '''
    This class provides control of the light cone of an area light.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getConeAngle() -> float:
        '''
        Returns the light cone angle.
        '''
        return float()

    @staticmethod
    def getPenumbraAngle() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getUseConeAngle() -> bool:
        '''
        Returns if custom light cone and penumbra angles are enabled.
        '''
        return bool()

    @staticmethod
    def setConeAngle(angle: float = 0.0):
        '''
        Sets the light cone angle.
        '''
        pass

    @staticmethod
    def setPenumbraAngle(angle: float = 0.0):
        '''
        Sets the penumbra angle.
        '''
        pass

    @staticmethod
    def setUseConeAngle(use: bool = False):
        '''
        Enable usage of custom light cone and penumbra angles.
        '''
        pass


class vrdOrientationConstraintNode(vrdConstraintNode):
    '''
    This class gives access to an orientation constraint object in VRED. An orientation constraint will synchronize the orientation of a source and a target. If there are multiple sources, the orientation is calculated as the weighted average value of it.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdLightLinkSetNode(vrdNode):
    '''
    Class for light links defining local lighting.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def addNode(node: 'vrdNode' = None):
        '''
        Add a node to the light link set.
        '''
        pass

    @staticmethod
    def addNodes(nodes: List['vrdNode'] = None):
        '''
        Adds a list of nodes to the light link set.
        '''
        pass

    @staticmethod
    def clearLightNodes():
        '''
        Removes all lights from the light link set.
        '''
        pass

    @staticmethod
    def clearSceneNodes():
        '''
        Removes all scene nodes from the light link set.
        '''
        pass

    @staticmethod
    def getLightNodes() -> List['vrdNode']:
        '''
        Returns a list with the lights contained in the light link set.
        '''
        return [vrdNode()]

    @staticmethod
    def getSceneNodes() -> List['vrdNode']:
        '''
        Returns a list with the scene nodes from the light link set.
        '''
        return [vrdNode()]

    @staticmethod
    def removeNode(node: 'vrdNode' = None):
        '''
        Removes a node from the light link set.
        '''
        pass

    @staticmethod
    def removeNodes(nodes: List['vrdNode'] = None):
        '''
        Removes a list of nodes from the light link set.
        '''
        pass


class vrdAnnotationNode(vrdNode):
    '''
    Returns the label background color.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getBackgroundColor() -> 'QColor':
        '''
        Returns the label background color.
        '''
        return QColor()

    @staticmethod
    def getFarScaleLimit() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getFontColor() -> 'QColor':
        '''
        Returns the font color for the displayed text.
        '''
        return QColor()

    @staticmethod
    def getLineColor() -> 'QColor':
        '''
        Returns the line color for border and leader.
        '''
        return QColor()

    @staticmethod
    def getNearScaleLimit() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getPosition() -> 'QVector3D':
        '''
        Returns the position as a 3D world coordinate.
        '''
        return QVector3D()

    @staticmethod
    def getSceneNode() -> 'vrdNode':
        '''

        '''
        return vrdNode()

    @staticmethod
    def getSize() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getText() -> 'str':
        '''
        Returns the displayed description text.
        '''
        return str()

    @staticmethod
    def getUseSceneNodeVisibility() -> bool:
        '''
        Returns if a scene graph node is used for determining the visibility.
        '''
        return bool()

    @staticmethod
    def setBackgroundColor(color: 'QColor' = None):
        '''
        Sets the label background color (linear RGB) and opacity (alpha).
        '''
        pass

    @staticmethod
    def setFarScaleLimit(value: float = 0.0):
        '''
        Sets the far scaling limit. The value is used for scaling the size dynamically depending on the camera position.
        '''
        pass

    @staticmethod
    def setFontColor(color: 'QColor' = None):
        '''
        Sets the font color for the displayed text (linear RGB).
        '''
        pass

    @staticmethod
    def setLineColor(color: 'QColor' = None):
        '''
        Sets the line color for border and leader (linear RGB).
        '''
        pass

    @staticmethod
    def setNearScaleLimit(value: float = 0.0):
        '''
        Sets the near scaling limit. The value is used for scaling the size dynamically depending on the camera position.
        '''
        pass

    @staticmethod
    def setPosition(worldPosition: 'QVector3D' = None):
        '''
        The point (3D world coordinates) to which the leader arrow head is pointing.
        '''
        pass

    @staticmethod
    def setSceneNode(node: 'vrdNode' = None):
        '''
        Sets the linked scene graph node (see         vrdAnnotationNode.setUseSceneNodeVisibility(enabled)).
        '''
        pass

    @staticmethod
    def setSize(size: float = 0.0):
        '''
        Sets the size.
        '''
        pass

    @staticmethod
    def setText(text: 'str' = None):
        '''
        The displayed description text.
        '''
        pass

    @staticmethod
    def setUseSceneNodeVisibility(enabled: bool = False):
        '''
        Toggles the use of the linked scene graph node to determine the visiblity. A set linked scene node is necessary (see         vrdAnnotationNode.setSceneNode(node)).
        '''
        pass

    @staticmethod
    def zoomTo():
        '''
        Lets the camera of the current render window zoom to this annotation.
        '''
        pass


class vrdImmersiveMenu(vrdObject):
    '''
    VR menu object.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def attachTo(origin: 'int' = None, constraint: 'int' = None):
        '''
        Reattaches the menu.
        '''
        pass

    @staticmethod
    def getConstraint() -> 'MenuConstraint':
        '''

        '''
        return MenuConstraint()

    @staticmethod
    def getDepth() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getHeight() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getName() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getOrigin() -> 'MenuOrigin':
        '''

        '''
        return MenuOrigin()

    @staticmethod
    def getRotation() -> 'QVector3D':
        '''

        '''
        return QVector3D()

    @staticmethod
    def getTranslation() -> 'QVector3D':
        '''

        '''
        return QVector3D()

    @staticmethod
    def getWidth() -> float:
        '''

        '''
        return float()

    @staticmethod
    def isVisible() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def setConstraint(value: 'MenuConstraint' = None):
        '''
        Changes the transformation constraint.
        '''
        pass

    @staticmethod
    def setContent(content: 'str' = None):
        '''
        Use the given string to show the content.
        '''
        pass

    @staticmethod
    def setDepth(value: float = 0.0):
        '''
        Sets the depth of the menu.
        '''
        pass

    @staticmethod
    def setHeight(value: float = 0.0):
        '''
        Sets the height of the menu.
        '''
        pass

    @staticmethod
    def setModule(moduleTitle: 'str' = None):
        '''
        Use the given name to find a module to be displayed on the menu.
        '''
        pass

    @staticmethod
    def setName(value: 'str' = None):
        '''
        Changes the name of the menu.
        '''
        pass

    @staticmethod
    def setOrigin(value: 'MenuOrigin' = None):
        '''
        Changes the origin for the menu.
        '''
        pass

    @staticmethod
    def setRotation(rotation: 'QVector3D' = None):
        '''
        Changes rotation of the menu relative to the selected origin.
        '''
        pass

    @staticmethod
    def setTranslation(position: 'QVector3D' = None):
        '''
        Changes position of the menu relative to the selected origin.
        '''
        pass

    @staticmethod
    def setUrl(url: 'str' = None, pixelWidth: 'int' = None, pixelHeight: 'int' = None):
        '''
        Use the given url to show web content on the mneu.
        '''
        pass

    @staticmethod
    def setVisible(value: bool = False):
        '''
        Shows or hides the menu.
        '''
        pass

    @staticmethod
    def setWidget(widget: 'QObject' = None):
        '''

        '''
        pass

    @staticmethod
    def setWidth(value: float = 0.0):
        '''
        Sets the width of the menu.
        '''
        pass


class vrCameraTypes():
    '''
    vrConstraintService

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdAtfSettings():
    '''
    Encapsulates the configuration properties for a particular     vrCADFileTypes.FileType. Some of the properties only have an effect on certain file formats. Please have a look at the import dialog that changes its content with respect to the vrCADFileTypes.FileType of the imported files.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getChordDeviation() -> float:
        '''
        Get maximum deviation of tessellated mesh to the NURBS surface in mm.
        '''
        return float()

    @staticmethod
    def getCreateLayerGroups() -> bool:
        '''
        Query if creating group nodes from layer information is enabled..
        '''
        return bool()

    @staticmethod
    def getFixSurfaceOrientation() -> bool:
        '''
        Query if orienting surface normals is enabled.
        '''
        return bool()

    @staticmethod
    def getFlushTransformations() -> bool:
        '''
        Query if transformations should be flushed into the vertex coordinates.
        '''
        return bool()

    @staticmethod
    def getImportAsSmartReference() -> bool:
        '''
        Query if smart references should be created for imported vpb files.
        '''
        return bool()

    @staticmethod
    def getImportAssociativeMeshes() -> bool:
        '''
        Query if import of associative meshes is enabled.
        '''
        return bool()

    @staticmethod
    def getImportCameras() -> bool:
        '''
        Query if import of cameras is enabled.
        '''
        return bool()

    @staticmethod
    def getImportCoordSystems() -> bool:
        '''
        Query if import of coordinate system nodes is enabled.
        '''
        return bool()

    @staticmethod
    def getImportCurves() -> bool:
        '''
        Query if import of curves and poly lines is enabled.
        '''
        return bool()

    @staticmethod
    def getImportEmptyLayers() -> bool:
        '''
        Query if import of empty layers is enabled.
        '''
        return bool()

    @staticmethod
    def getImportInvisibleCurves() -> bool:
        '''
        Query if import of curves and poly lines, that are invisible in CAD data, is enabled.
        '''
        return bool()

    @staticmethod
    def getImportInvisibleInstances() -> bool:
        '''
        Query if import of invisible instance nodes is enabled.
        '''
        return bool()

    @staticmethod
    def getImportInvisibleMeshes() -> bool:
        '''
        Query if import of polygon meshes, that are invisible in the CAD file, is enabled.
        '''
        return bool()

    @staticmethod
    def getImportInvisibleSurfaces() -> bool:
        '''
        Query if import of surfaces, that are invisible in the CAD file, is enabled.
        '''
        return bool()

    @staticmethod
    def getImportLights() -> bool:
        '''
        Query if import of light sources is enabled.
        '''
        return bool()

    @staticmethod
    def getImportMeshes() -> bool:
        '''
        Query if import of polygon meshes is enabled.
        '''
        return bool()

    @staticmethod
    def getImportMeshLODs() -> 'int':
        '''
        Query which mesh LODs should be imported.
        '''
        return int()

    @staticmethod
    def getImportReferencedFiles() -> bool:
        '''
        Query if import of part files referenced by an assembly is enabled.
        '''
        return bool()

    @staticmethod
    def getImportSurfaces() -> bool:
        '''
        Query if import of surfaces is enabled.
        '''
        return bool()

    @staticmethod
    def getImportTemplateGeometries() -> bool:
        '''
        Query if import of template geometries is enabled.
        '''
        return bool()

    @staticmethod
    def getImportVariants() -> bool:
        '''
        Query if import of variants is enabled.
        '''
        return bool()

    @staticmethod
    def getJtToolkit() -> 'int':
        '''
        Query which Jt toolkit is used for import.
        '''
        return int()

    @staticmethod
    def getKeepNurbs() -> bool:
        '''
        Query if NURBS data should be kept alongside with tessellation result.
        '''
        return bool()

    @staticmethod
    def getMaxChordLength() -> float:
        '''
        Get maximum length of a triangle edge in mm.
        '''
        return float()

    @staticmethod
    def getMergeGeometries() -> bool:
        '''
        Query if tessellated meshes of adjacent NURBS surfaces with same material should be merged.
        '''
        return bool()

    @staticmethod
    def getMergeSubReferenceMaterials() -> bool:
        '''
        Query if duplicate materials, referenced in different files, should be merged into one single material. Materials with same name and identical properties are regarded as duplicates.
        '''
        return bool()

    @staticmethod
    def getNormalTolerance() -> float:
        '''
        Get the normal tolerance of adjacent triangles in degrees.
        '''
        return float()

    @staticmethod
    def getReduceKeyframes() -> bool:
        '''
        Query if reducing the number of keyframes is enabled.
        '''
        return bool()

    @staticmethod
    def getRemoveEmptyGroups() -> bool:
        '''
        Query if groups without children should be removed.
        '''
        return bool()

    @staticmethod
    def getSmartReferenceBehavior() -> 'SmartReferenceBehavior':
        '''
        Query how references to VRED native files are treated in import.
        '''
        return SmartReferenceBehavior()

    @staticmethod
    def getSourceReferenceBehavior() -> 'SourceReferenceBehavior':
        '''
        Query how references to files of import file types are treated in import.
        '''
        return SourceReferenceBehavior()

    @staticmethod
    def getStitchingTolerance() -> float:
        '''
        Get the stitching tolerance of adjacent edges in mm.
        '''
        return float()

    @staticmethod
    def getUnshareNodes() -> bool:
        '''
        Query if shared node instances should be converted to independent nodes.
        '''
        return bool()

    @staticmethod
    def getUseLegacyLoader() -> bool:
        '''
        Query if using legacy importer is enabled.
        '''
        return bool()

    @staticmethod
    def getUseStitching() -> bool:
        '''
        Query if stitching is enabled.
        '''
        return bool()

    @staticmethod
    def setChordDeviation(chordDeviation: float = 0.0):
        '''
        Set maximum allowed distance from the NURBS surface to the tessellated surface in mm. Lower values result in more accurate polygon models but also increase the number of triangles.
        '''
        pass

    @staticmethod
    def setCreateLayerGroups(create: bool = False):
        '''
        Enable / Disable creation of group nodes for objects organized in layers. In case the parents of the objects in one layer have different transformations this might cause an unexpected scenegraph structure since it is required to preserve the transformations.
        '''
        pass

    @staticmethod
    def setFixSurfaceOrientation(fix: bool = False):
        '''
        Enable orienting the normals of all surfaces, so they point in the same general direction.
        '''
        pass

    @staticmethod
    def setFlushTransformations(flush: bool = False):
        '''
        Enable / Disable moving transformation data of the scene graph hierarchy to the vertices. This means, that every transformation node will contain only a unit matrix.
        '''
        pass

    @staticmethod
    def setImportAsSmartReference(create: bool = False):
        '''
        Determine if smart references should be created for imported vpb files.
        '''
        pass

    @staticmethod
    def setImportAssociativeMeshes(import_: bool = False):
        '''
        Enable import of meshes associated with the surfaces.
        '''
        pass

    @staticmethod
    def setImportCameras(import_: bool = False):
        '''
        Enable import of cameras from CAD data. (Only Alias wire files)
        '''
        pass

    @staticmethod
    def setImportCoordSystems(import_: bool = False):
        '''
        Enable import of coordinate system nodes from CAD data.
        '''
        pass

    @staticmethod
    def setImportCurves(import_: bool = False):
        '''
        Enable import of curves and poly lines from CAD files.
        '''
        pass

    @staticmethod
    def setImportEmptyLayers(import_: bool = False):
        '''
        Enable import of empty leyers. (Only Alias wire files)
        '''
        pass

    @staticmethod
    def setImportInvisibleCurves(import_: bool = False):
        '''
        Enable import of curves and poly lines, that are invisible in the CAD data.
        '''
        pass

    @staticmethod
    def setImportInvisibleInstances(import_: bool = False):
        '''
        Enable import of invisible instance nodes instead of excluding them.
        '''
        pass

    @staticmethod
    def setImportInvisibleMeshes(import_: bool = False):
        '''
        Enable import of polygon meshes, that are invisible in the CAD file.
        '''
        pass

    @staticmethod
    def setImportInvisibleSurfaces(import_: bool = False):
        '''
        Enable import of NURBS surfaces, that are invisible in the CAD file.
        '''
        pass

    @staticmethod
    def setImportLights(import_: bool = False):
        '''
        Enable import of light sources from CAD data. (Only Alias wire files)
        '''
        pass

    @staticmethod
    def setImportMeshes(import_: bool = False):
        '''
        Enable import of polygon meshes.
        '''
        pass

    @staticmethod
    def setImportMeshLODs(lodOption: 'int' = None):
        '''
        Select which mesh LODs should be imported.
        '''
        pass

    @staticmethod
    def setImportReferencedFiles(import_: bool = False):
        '''
        Enable import of part files referenced by an assembly. If option is disabled a file reference node is created that can be used to import the referenced part later.
        '''
        pass

    @staticmethod
    def setImportSurfaces(import_: bool = False):
        '''
        Enable import of NURBS surfaces.
        '''
        pass

    @staticmethod
    def setImportTemplateGeometries(import_: bool = False):
        '''
        Enable import of template geometries instead of excluding them. (Only Alias wire files)
        '''
        pass

    @staticmethod
    def setImportVariants(import_: bool = False):
        '''
        Enable import of variants from CAD data. (Only Alias wire files)
        '''
        pass

    @staticmethod
    def setJtToolkit(toolkit: 'int' = None):
        '''
        Select which Jt toolkit should be used for import.
        '''
        pass

    @staticmethod
    def setKeepNurbs(keep: bool = False):
        '''
        Enable / disable keeping NURBS data instead of deleting it. This option will increase memory usage.
        '''
        pass

    @staticmethod
    def setMaxChordLength(chordLength: float = 0.0):
        '''
        Set maximum length of a triangle edge in mm. Lower values result in more accurate polygon models but also increase the number of triangles.
        '''
        pass

    @staticmethod
    def setMergeGeometries(merge: bool = False):
        '''
        Enable / disable merging adjacent surfaces with same material into shells.
        '''
        pass

    @staticmethod
    def setMergeSubReferenceMaterials(optimize: bool = False):
        '''
        Determine if duplicate materials, referenced in different files, should be merged into one single material. Materials with same name and identical properties are regarded as duplicates.
        '''
        pass

    @staticmethod
    def setNormalTolerance(tolerance: float = 0.0):
        '''
        Set the normal tolerance of adjacent triangles in degrees. Lower values result in more accurate polygon models but also increase the number of triangles.
        '''
        pass

    @staticmethod
    def setReduceKeyframes(reduce: bool = False):
        '''
        Enable reducing the number of keyframes by removing adjacent keyframes with identical value.
        '''
        pass

    @staticmethod
    def setRemoveEmptyGroups(remove: bool = False):
        '''
        Enable / disable removing of groups without children.
        '''
        pass

    @staticmethod
    def setSmartReferenceBehavior(behavior: 'SmartReferenceBehavior' = None):
        '''
        Determine how references to VRED native files are treated in import.
        '''
        pass

    @staticmethod
    def setSourceReferenceBehavior(behavior: 'SourceReferenceBehavior' = None):
        '''
        Determine how references to files of import file types are treated in import.
        '''
        pass

    @staticmethod
    def setStitchingTolerance(tolerance: float = 0.0):
        '''
        Set tolerance in mm where two adjacent edges are considered to be touching and where they should be stitched together.
        '''
        pass

    @staticmethod
    def setUnshareNodes(unshare: bool = False):
        '''
        Enable / Disable conversion of shared node instances to independent nodes.
        '''
        pass

    @staticmethod
    def setUseLegacyLoader(useLegacy: bool = False):
        '''
        Use legacy importer. Enabling this option is not recommended since the legacy importers only support quite old file versions and a reduced feature set. Legacy importer are only available for JT and Rhino files.
        '''
        pass

    @staticmethod
    def setUseStitching(stitch: bool = False):
        '''
        Enable / disable stitching of adjacent edges.
        '''
        pass

    @staticmethod
    def vrdAtfSettings():
        '''
        Default constructor.
        '''
        pass


class vrdLensFlareEffect(vrdSceneObject):
    '''


    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createLensFlareElement(name: 'str' = None, type: 'ElementType' = None) -> 'vrdLensFlareElement':
        '''

        '''
        return vrdLensFlareElement()

    @staticmethod
    def getAngularIntensity() -> float:
        '''
        Returns the angular intensity.
        '''
        return float()

    @staticmethod
    def getColor() -> 'QVector3D':
        '''
        Returns the lens flare color.
        '''
        return QVector3D()

    @staticmethod
    def getIntensity() -> float:
        '''
        Returns the brightness of all lens flares.
        '''
        return float()

    @staticmethod
    def getIsActive() -> bool:
        '''
        Returns if the lens flare effect is enabled.
        '''
        return bool()

    @staticmethod
    def getLensFlareElements() -> List['vrdLensFlareElement']:
        '''

        '''
        return [vrdLensFlareElement()]

    @staticmethod
    def getPresetType() -> 'PresetType':
        '''

        '''
        return PresetType()

    @staticmethod
    def getRadius() -> float:
        '''
        Returns the radius.
        '''
        return float()

    @staticmethod
    def getSize() -> float:
        '''
        Returns the size of all lens flares.
        '''
        return float()

    @staticmethod
    def getUseLightProperties() -> bool:
        '''
        Returns if the intensity of the light is used.
        '''
        return bool()

    @staticmethod
    def removeElements(elements: List['vrdLensFlareElement'] = None):
        '''

        '''
        pass

    @staticmethod
    def setAngularIntensity(angularIntensity: float = 0.0):
        '''
        Changes the brightness of the flare, as the angle changes. As the light source is rotated toward the viewer, becoming perpendicular to the view, its intensity increases. It is like how intense a sunset gets as it reaches the horizon, just before setting. Another example would be turning a flashlight’s beam toward you. From your point of view, as the light aligns with your view, it becomes more intense, to the point of blinding.
        '''
        pass

    @staticmethod
    def setColor(color: 'QVector3D' = None):
        '''
        Sets the color of all lens flares. The color is multiplied with any element color already assigned. Note: If Use Light Properties is enabled, the color set here is ignored and the light color is used. Note: Since this color is multiplied with element color assignments, there may be instances where a lens flare disappears, due to the multiply operation. If this occurs, try changing the color of the individual lens flares (instead of using this option) or change the color of this option. If there are no element assigned colors, this color is assigned to all lens flares.
        '''
        pass

    @staticmethod
    def setIntensity(intensity: float = 0.0):
        '''
        Changes the brightness of all lens flares.
        '''
        pass

    @staticmethod
    def setIsActive(active: bool = False):
        '''
        Enables or disables the lens flare effect.
        '''
        pass

    @staticmethod
    def setPresetType(type: 'PresetType' = None):
        '''

        '''
        pass

    @staticmethod
    def setRadius(radius: float = 0.0):
        '''
        Changes how dispersed the flare is for all lens flares. The radius represents the virtual size of the light sources, since the lights do not have geometry. A larger radius requires a larger object to completely occlude the effect. Shrinking of the lens flare will start when the radius around the light source starts to get occluded by an object. That occlusion also decreases the intensity of the ghosts. As the radius increases, the intensity of the light decreases. As the radius decreases, the flare becomes more intense and defined.
        '''
        pass

    @staticmethod
    def setSize(size: float = 0.0):
        '''
        Changes the size of all lens flares.
        '''
        pass

    @staticmethod
    def setUseLightProperties(use: bool = False):
        '''
        Use the intensity of the light settings instead of the local setting. This only affects the color. When disabled, the local color is used.
        '''
        pass


class vrdDeviceActionSignal(vrdObjectSignal):
    '''
    Signal object containing an actual signal that is sent, when the action this object belongs to is triggered.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def triggered(action: 'vrdDeviceAction' = None, device: 'vrdVRDevice' = None):
        '''
        Signal is emitted when the corresponding device action is triggered.
        '''
        pass


class vrdDirectionalLightNode(vrdDeltaLightNode):
    '''
    This class represents a directional light source.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getIsHeadLight() -> bool:
        '''
        Returns whether this light source is the head light node.
        '''
        return bool()


class vrLightService():
    '''
    Interface to access lights, light sets and lens flares in VRED.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def convertLight(lightNode: 'vrdNode' = None, lightType: 'LightType' = None):
        '''
        Converts a light node to a light of another type. Note: This will invalidate this node object.
        '''
        pass

    @staticmethod
    def convertLights(nodes: List['vrdNode'] = None, lightType: 'LightType' = None):
        '''
        Converts light nodes to lights of another type. Note: This will invalidate these node objects.
        '''
        pass

    @staticmethod
    def copyLensFlare(effect: 'vrdLensFlareEffect' = None):
        '''
        Adds a lens flare effect to the copy buffer.
        '''
        pass

    @staticmethod
    def copyLensFlareElements(elements: List['vrdLensFlareElement'] = None):
        '''
        Add lens flares to the copy buffer.
        '''
        pass

    @staticmethod
    def copyLensFlareGhosts(ghosts: List['vrdLensFlareGhost'] = None):
        '''
        Copy all ghosts to copy buffer.
        '''
        pass

    @staticmethod
    def createLight(name: 'str' = None, type: 'LightType' = None, parent: 'vrdNode' = None) -> 'vrdNode':
        '''
        Create a new light node in light graph.
        '''
        return vrdNode()

    @staticmethod
    def createLightGroup(name: 'str' = None, parent: 'vrdNode' = None) -> 'vrdNode':
        '''
        Create a new light group.
        '''
        return vrdNode()

    @staticmethod
    def createLightLinkSet(name: 'str' = None) -> 'vrdLightLinkSetNode':
        '''
        Create a new light link set.
        '''
        return vrdLightLinkSetNode()

    @staticmethod
    def duplicateLensFlareElements(light: 'vrdPointLightNode' = None, elements: List['vrdLensFlareElement'] = None):
        '''
        Duplicates lens flare elements of a light and adds them to the same light.
        '''
        pass

    @staticmethod
    def duplicateLensFlareGhosts(ghostLine: 'vrdLensFlareGhostLine' = None, ghosts: List['vrdLensFlareGhost'] = None):
        '''
        Duplicates lens flare ghosts of a ghost line and adds them to the same ghost line.
        '''
        pass

    @staticmethod
    def duplicateLights(nodes: List['vrdNode'] = None):
        '''
        Duplicate all given light nodes from light graph. The duplicated nodes will be added under the same parent as the original node.
        '''
        pass

    @staticmethod
    def findLight(name: 'str' = None) -> 'vrdNode':
        '''
        Find a light node with a given name in the light graph.
        '''
        return vrdNode()

    @staticmethod
    def findLights(name: 'str' = None) -> List['vrdNode']:
        '''
        Find all light nodes with a given name.
        '''
        return [vrdNode()]

    @staticmethod
    def getAllLights(sceneGraph: bool = False) -> List['vrdNode']:
        '''
        Return all light nodes.
        '''
        return [vrdNode()]

    @staticmethod
    def getHeadlight() -> 'vrdBaseLightNode':
        '''
        Returns the head light node.
        '''
        return vrdBaseLightNode()

    @staticmethod
    def getLightLinksRoot() -> 'vrdNode':
        '''
        Returns the root node of light sets, that contains all light sets.
        '''
        return vrdNode()

    @staticmethod
    def getLightRoot() -> 'vrdNode':
        '''
        Returns the root node of lights, that contains all lights and lens flares.
        '''
        return vrdNode()

    @staticmethod
    def getSelectedLensFlareElements() -> List['vrdLensFlareElement']:
        '''
        Get the selected lens flare elements.
        '''
        return [vrdLensFlareElement()]

    @staticmethod
    def getSelectedLensFlareGhosts() -> List['vrdLensFlareGhost']:
        '''
        Gets currently selected ghosts.
        '''
        return [vrdLensFlareGhost()]

    @staticmethod
    def getSelectedNodes() -> List['vrdNode']:
        '''
        Returns all current selected light nodes from internal buffer.
        '''
        return [vrdNode()]

    @staticmethod
    def hasCopiedGhosts() -> bool:
        '''
        Check if ghost elements are available in clipboard.
        '''
        return bool()

    @staticmethod
    def hasCopiedLensFlareEffect() -> bool:
        '''
        Checks is a lens flare effect is available in the clipboard.
        '''
        return bool()

    @staticmethod
    def hasCopiedLensFlareElements() -> bool:
        '''
        Check if lens flare elements are available in clipboard.
        '''
        return bool()

    @staticmethod
    def isHeadLight(light: 'vrdBaseLightNode' = None) -> bool:
        '''
        Check if the given node is the head light node.
        '''
        return bool()

    @staticmethod
    def loadLights(paths: List['str'] = None) -> List['vrdNode']:
        '''
        load lights from OpenSG Binary Geometry or VRED Project Binary file
        '''
        return [vrdNode()]

    @staticmethod
    def pasteLensFlare(lights: List['vrdPointLightNode'] = None):
        '''
        Pastes a lens flare effect from the copy buffer to one or more lights.
        '''
        pass

    @staticmethod
    def pasteLensFlareElements(light: 'vrdPointLightNode' = None):
        '''
        Pastes lens flare elements from the clipboard to a light.
        '''
        pass

    @staticmethod
    def pasteLensFlareGhosts(ghostLine: 'vrdLensFlareGhostLine' = None):
        '''
        Paste all ghosts from copy buffer to a ghost line.
        '''
        pass

    @staticmethod
    def removeLightLinkSets(nodes: List['vrdLightLinkSetNode'] = None):
        '''
        Remove light link sets.
        '''
        pass

    @staticmethod
    def removeLights(nodes: List['vrdNode'] = None):
        '''
        Remove all given light nodes from light graph.
        '''
        pass

    @staticmethod
    def saveLights(nodes: List['vrdNode'] = None, path: 'str' = None) -> 'bool':
        '''
        Collects all lights recursively in the given nodes and saves them as a OpenSG Binary Geometry file.
        '''
        return bool()

    @staticmethod
    def setSelectedLensFlareElements(elements: List['vrdLensFlareElement'] = None):
        '''
        Set all selected lens flare elements.
        '''
        pass

    @staticmethod
    def setSelectedLensFlareGhosts(ghosts: List['vrdLensFlareGhost'] = None):
        '''
        Set selected ghosts. All currently selected ghosts will be reset to not select. A         vrLightService.lensFlareGhostSelectionChanged(ghosts) signal will be emitted.
        '''
        pass

    @staticmethod
    def setSelectedNodes(nodes: List['vrdNode'] = None):
        '''
        Set all selected light nodes. All current selected nodes will be reset to not select. Almost all commands of light service works on selected nodes. A         vrLightService.nodeSelectionChanged(nodes) signal will be emitted.
        '''
        pass

    @staticmethod
    def validateLights():
        '''
        Validates if all lights in the scene graph have a corresponding light in the light graph and vice versa. Lights without a valid parent will be removed. A         vrLightService.lightsValidated() signal will be emitted.
        '''
        pass

    @staticmethod
    def lensFlareElementSelectionChanged(elements: List['vrdLensFlareElement'] = None):
        '''
        Signal will be emitted if selection buffer of lens flare elements was changed.
        '''
        pass

    @staticmethod
    def lensFlareGhostSelectionChanged(ghosts: List['vrdLensFlareGhost'] = None):
        '''
        Signal will be emitted if the list of selected ghost was changed.
        '''
        pass

    @staticmethod
    def lightLinkSetsChanged():
        '''
        Signal will be emitted if light link set are added or removed.
        '''
        pass

    @staticmethod
    def lightsConverted(lightIds: List['int'] = None):
        '''
        Signal that will be emitted when lights are converted to different light types.
        '''
        pass

    @staticmethod
    def lightsStateChanged():
        '''
        Signal is emitted when then on/off state of any light changes in either the light graph or the scene graph.
        '''
        pass

    @staticmethod
    def lightsValidated():
        '''
        Signal that is send after lights have been validated.
        '''
        pass

    @staticmethod
    def nodesAdded(nodes: List['vrdNode'] = None):
        '''
        Signal will be emitted if light nodes was added.
        '''
        pass

    @staticmethod
    def nodesChanged(nodes: List['vrdNode'] = None):
        '''
        Signal will be emitted if light nodes was changed.
        '''
        pass

    @staticmethod
    def nodeSelectionChanged(nodes: List['vrdNode'] = None):
        '''
        Signal will be emitted if selection buffer of light nodes was changed.
        '''
        pass

    @staticmethod
    def nodesRemoved(nodes: List['vrdNode'] = None):
        '''
        Signal will be emitted if light nodes was removed.
        '''
        pass


class vrdVRDeviceSignal(vrdObjectSignal):
    '''
    Signal object containing actual signals that are sent by the     vrdVRDevice.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def collisionStarted(otherNode: 'vrdNode' = None, device: 'vrdVRDevice' = None):
        '''
        Signal is emitted when the collision sensor of the device touches a collision sensitive node.
        '''
        pass

    @staticmethod
    def collisionStopped(otherNode: 'vrdNode' = None, device: 'vrdVRDevice' = None):
        '''
        Signal is emitted when the collision sensor of the device stops touching a collision sensitive node.
        '''
        pass

    @staticmethod
    def moved(device: 'vrdVRDevice' = None):
        '''
        Signal is emitted when the         vrdVRDevice moves.
        '''
        pass


class vrdLightProfile(vrdSceneObject):
    '''
    Returns where the light profile is located.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAbsolutePath() -> 'str':
        '''
        Returns where the light profile is located.
        '''
        return str()

    @staticmethod
    def getBallastFactor() -> float:
        '''
        Returns the ballast factor.
        '''
        return float()

    @staticmethod
    def getBallastLampPhotometricFactor() -> float:
        '''
        Returns the ballast lamp photometric factor.
        '''
        return float()

    @staticmethod
    def getCandelaMultiplier() -> float:
        '''
        Returns the candela multiplier.
        '''
        return float()

    @staticmethod
    def getInputWatts() -> float:
        '''
        Returns the input watts.
        '''
        return float()

    @staticmethod
    def getLumensPerLamp() -> float:
        '''
        Returns the lumens per lamp.
        '''
        return float()

    @staticmethod
    def getNumHorizontalAngles() -> 'int':
        '''
        Returns the number of horizontal angles.
        '''
        return int()

    @staticmethod
    def getNumLuminaires() -> 'int':
        '''
        Returns the number of luminaires.
        '''
        return int()

    @staticmethod
    def getNumVerticalAngles() -> 'int':
        '''
        Returns the number of vertical angles.
        '''
        return int()

    @staticmethod
    def getPhotometricType() -> 'int':
        '''
        Returns the photometric type.
        '''
        return int()

    @staticmethod
    def getSize() -> 'QVector3D':
        '''
        Returns the size.
        '''
        return QVector3D()

    @staticmethod
    def getUnitsType() -> 'int':
        '''
        Returns the units type.
        '''
        return int()

    @staticmethod
    def getUseLightProfile() -> bool:
        '''
        Returns true if the light profile is used.
        '''
        return bool()

    @staticmethod
    def load(filename: 'str' = None):
        '''

        '''
        pass

    @staticmethod
    def setLightProfileShape():
        '''
        Uses the shape information from the .ies file for the selected light.
        '''
        pass

    @staticmethod
    def setUseLightProfile(use: bool = False):
        '''
        Enables a light profile from an imported file to be used.
        '''
        pass


class vrLensFlareTypes():
    '''
    vrLightService

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrImageService():
    '''
    Service for     vrdImage related functions.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createImage() -> 'vrdImage':
        '''
        Creates an empty image.
        '''
        return vrdImage()

    @staticmethod
    def loadImage(filename: 'str' = None) -> 'vrdImage':
        '''
        Loads an image.
        '''
        return vrdImage()

    @staticmethod
    def readImageInformation(filename: 'str' = None) -> 'str':
        '''
        Reads an image information.
        '''
        return str()

    @staticmethod
    def saveImage(image: 'vrdImage' = None, filename: 'str' = None) -> 'bool':
        '''
        Saves an image.
        '''
        return bool()

    @staticmethod
    def saveImageSequence(image: 'vrdImage' = None, directory: 'str' = None) -> 'bool':
        '''
        Saves an image sequence.
        '''
        return bool()


class vrObjectService():
    '''
    This signal is sent everytime a property of a         vrdObject is changed.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def propertyChanged(obj: 'vrdObject' = None, name: 'str' = None):
        '''
        This signal is sent everytime a property of a         vrdObject is changed.
        '''
        pass


class vrCameraFromAtUp():
    '''
    Gets the at vector.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAt() -> 'QVector3D':
        '''
        Gets the at vector.
        '''
        return QVector3D()

    @staticmethod
    def getFrom() -> 'QVector3D':
        '''
        Gets the from vector.
        '''
        return QVector3D()

    @staticmethod
    def getUp() -> 'QVector3D':
        '''
        Gets the up vector.
        '''
        return QVector3D()

    @staticmethod
    def setAt(atVec: 'QVector3D' = None):
        '''
        Sets the at vector.
        '''
        pass

    @staticmethod
    def setFrom(fromVec: 'QVector3D' = None):
        '''
        Sets the from vector.
        '''
        pass

    @staticmethod
    def setUp(upVec: 'QVector3D' = None):
        '''
        Sets the up vector.
        '''
        pass

    @staticmethod
    def vrCameraFromAtUp():
        '''
        Default constructor. Initializes from, at, up with zeros.
        '''
        pass


class vrdLightTexture(vrdSceneObject):
    '''
    This class represents a texture that can be projected by a light source into the scene.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAnisotropy() -> float:
        '''
        Returns the anisotropy value of the texture.
        '''
        return float()

    @staticmethod
    def getConnectRepeatModes() -> bool:
        '''
        Returns whether the repeat modes for U and V are connected.
        '''
        return bool()

    @staticmethod
    def getFrameOffset() -> 'int':
        '''
        Returns the offset to the image number when using an image sequence.
        '''
        return int()

    @staticmethod
    def getImage(void_parameter: 'None' = None) -> 'vrdImage':
        '''
        Returns the image that is used as a texture.
        '''
        return vrdImage()

    @staticmethod
    def getInlineImageSequence() -> bool:
        '''
        Returns if the image sequence is inlined into the vpb file.
        '''
        return bool()

    @staticmethod
    def getOffset(void_parameter: 'None' = None) -> 'QVector2D':
        '''
        Returns the offset for the UVs.
        '''
        return QVector2D()

    @staticmethod
    def getRepeat(void_parameter: 'None' = None) -> 'QVector2D':
        '''
        Returns the number of repetitions for the UVs.
        '''
        return QVector2D()

    @staticmethod
    def getRepeatModeU(void_parameter: 'None' = None) -> 'RepeatMode':
        '''
        Returns the repeat mode of the texture.
        '''
        return RepeatMode()

    @staticmethod
    def getRepeatModeV(void_parameter: 'None' = None) -> 'RepeatMode':
        '''
        Returns the repeat mode of the texture.
        '''
        return RepeatMode()

    @staticmethod
    def getRotate(void_parameter: 'None' = None) -> float:
        '''
        Returns the texture rotation.
        '''
        return float()

    @staticmethod
    def getUseImageSequence() -> bool:
        '''
        Returns if image sequences is used.
        '''
        return bool()

    @staticmethod
    def getUseTexture(void_parameter: 'None' = None) -> bool:
        '''
        Returns whether the light texture is enabled.
        '''
        return bool()

    @staticmethod
    def setAnisotropy(anisotropy: float = 0.0):
        '''
        Sets the anisotropy value of the texture.
        '''
        pass

    @staticmethod
    def setConnectRepeatModes(connected: bool = False):
        '''
        Connects the repeat modes for U and V.
        '''
        pass

    @staticmethod
    def setFrameOffset(offset: 'int' = None):
        '''
        Sets an offset to the image number when using an image sequence.
        '''
        pass

    @staticmethod
    def setImage(img: 'vrdImage' = None):
        '''
        Sets the image that should be used as a texture.
        '''
        pass

    @staticmethod
    def setInlineImageSequence(use: bool = False):
        '''
        Inlines the image sequence into the vpb file.
        '''
        pass

    @staticmethod
    def setOffset(offset: 'QVector2D' = None):
        '''
        Sets the offset for the UVs.
        '''
        pass

    @staticmethod
    def setRepeat(repeat: 'QVector2D' = None):
        '''
        Sets the number of repetitions for the UVs.
        '''
        pass

    @staticmethod
    def setRepeatModeU(mode: 'RepeatMode' = None):
        '''
        Sets the repeat mode of the texture.
        '''
        pass

    @staticmethod
    def setRepeatModeV(mode: 'RepeatMode' = None):
        '''
        Sets the repeat mode of the texture.
        '''
        pass

    @staticmethod
    def setRotate(rotate: float = 0.0):
        '''
        Rotate the texture.
        '''
        pass

    @staticmethod
    def setUseImageSequence(use: bool = False):
        '''
        Use an image sequence.
        '''
        pass

    @staticmethod
    def setUseTexture(s: bool = False):
        '''
        Enables / disables the usage of the texture.
        '''
        pass


class vrMathService():
    '''
    Math utilities.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getRotation(matrix: 'QMatrix4x4' = None) -> 'QQuaternion':
        '''

        '''
        return QQuaternion()

    @staticmethod
    def getScaleFactor(matrix: 'QMatrix4x4' = None) -> 'QVector3D':
        '''

        '''
        return QVector3D()

    @staticmethod
    def getScaleOrientation(matrix: 'QMatrix4x4' = None) -> 'QQuaternion':
        '''

        '''
        return QQuaternion()

    @staticmethod
    def getTranslation(matrix: 'QMatrix4x4' = None) -> 'QVector3D':
        '''

        '''
        return QVector3D()


class vrdButtonState():
    '''
    Represents the state of a button on a VR controller.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getName() -> 'str':
        '''
        Default destructor.
        '''
        return str()

    @staticmethod
    def getPosition() -> 'QVector2D':
        '''
        Gets the position of the button in two dimensions. Only the x value will be set if the button has only one dimension in which it can move.
        '''
        return QVector2D()

    @staticmethod
    def isPressed() -> bool:
        '''
        Returns if the button is pressed or not.
        '''
        return bool()

    @staticmethod
    def isTouched() -> bool:
        '''
        Returns if the button is touched or not.
        '''
        return bool()

    @staticmethod
    def setName(name: 'str' = None):
        '''
        Sets the name of the button to which the state belongs.
        '''
        pass

    @staticmethod
    def setPosition(position: 'QVector2D' = None):
        '''
        Sets the position of the button in two dimensions.
        '''
        pass

    @staticmethod
    def setPressed(pressed: bool = False):
        '''
        Sets if the button is pressed.
        '''
        pass

    @staticmethod
    def setTouched(touched: bool = False):
        '''
        Sets if the button is touched or not.
        '''
        pass

    @staticmethod
    def vrdButtonState():
        '''
        Default constructor.
        '''
        pass


class vrdImmersiveToolSignal(vrdObjectSignal):
    '''
    Signal object containing actual signals that are sent by the     vrdImmersiveTool.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def checked(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted when the tool button is switched on.
        '''
        pass

    @staticmethod
    def clicked(tool: 'vrdImmersiveTool' = None):
        '''
        Signal is emitted when the tool button is clicked.
        '''
        pass

    @staticmethod
    def unchecked(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted when the tool button is switched off.
        '''
        pass

    @staticmethod
    def viewClosed(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted when the tool view is closed.
        '''
        pass

    @staticmethod
    def viewOpened(tool: 'vrdImmersiveTool' = None):
        '''
        Signal emitted when the tool view is opened.
        '''
        pass


class vrdCameraTrackNode(vrdNode):
    '''
    This class represents a camera track node.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getFadeInDuration() -> float:
        '''
        Returns the fade in duration of the camera track.
        '''
        return float()

    @staticmethod
    def getPauseDuration() -> float:
        '''
        Returns the pause duration of the camera track.
        '''
        return float()

    @staticmethod
    def getPlaying() -> bool:
        '''
        Returns the playback state of the camera track.
        '''
        return bool()

    @staticmethod
    def getTransitionDuration() -> float:
        '''
        Returns the transition duration of the camera track.
        '''
        return float()

    @staticmethod
    def getType() -> 'CameraTrackType':
        '''
        Returns the type of the camera track.
        '''
        return CameraTrackType()

    @staticmethod
    def getViewpoint(index: 'int' = None) -> 'vrdViewpointNode':
        '''
        Returns a viewpoint node by index.
        '''
        return vrdViewpointNode()

    @staticmethod
    def getViewpointCount() -> 'int':
        '''
        Returns the number of viewpoints belonging to this camera track node.
        '''
        return int()

    @staticmethod
    def getViewpoints() -> List['vrdViewpointNode']:
        '''
        Returns all viewpoints belonging to this camera track node.
        '''
        return [vrdViewpointNode()]

    @staticmethod
    def isRenderQueueCameraTrack() -> bool:
        '''
        Check if the camera track is of type RenderQueue.
        '''
        return bool()

    @staticmethod
    def isVariantSetCameraTrack() -> bool:
        '''
        Check if the camera track is of type VariantSet.
        '''
        return bool()

    @staticmethod
    def setFadeInDuration(duration: float = 0.0):
        '''
        Sets the fade in duration of the camera track.
        '''
        pass

    @staticmethod
    def setPauseDuration(duration: float = 0.0):
        '''
        Sets the pause duration of the camera track.
        '''
        pass

    @staticmethod
    def setPlaying(playing: bool = False):
        '''
        Start / stop playback of the camera track.
        '''
        pass

    @staticmethod
    def setTransitionDuration(duration: float = 0.0):
        '''
        Sets the transition duration of the camera track.
        '''
        pass


class vrImmersiveInteractionService():
    '''
    This service allows the management of all immersive device interactions that are built into VRED. It contains methods to activate or deactivate these interactions and to adjust their settings.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def activateGroundCalibrationMode(rightHand: bool = False):
        '''
        Start ground calibration.
        '''
        pass

    @staticmethod
    def getAutoCreateCollisionObjects() -> bool:
        '''
        Returns whether collision objects are automatically created.
        '''
        return bool()

    @staticmethod
    def getControllerVisualizationMode() -> 'VisualizationMode':
        '''
        Returns the current controller visualization mode.
        '''
        return VisualizationMode()

    @staticmethod
    def getControlMode() -> 'ControlMode':
        '''
        Returns the current control mode.
        '''
        return ControlMode()

    @staticmethod
    def getPreferredTooltipsMode() -> bool:
        '''
        Returns whether to show tooltips on start.
        '''
        return bool()

    @staticmethod
    def getRelativeTeleportOrientation() -> bool:
        '''
        Returns if the angle of the orientation is taken from the wrists absolute or relative rotation.
        '''
        return bool()

    @staticmethod
    def getTeleportGroundHeight() -> float:
        '''
        Returns the height of the ground plane used in “On Ground Plane” teleport mode.
        '''
        return float()

    @staticmethod
    def getTeleportGroundMode() -> 'TeleportGroundMode':
        '''
        Returns the current teleport ground mode.
        '''
        return TeleportGroundMode()

    @staticmethod
    def getTeleportRange() -> float:
        '''
        Returns the maximum teleport distance.
        '''
        return float()

    @staticmethod
    def hideControllerMessage(message: 'vrdNode' = None):
        '''
        Hide a controller message.
        '''
        pass

    @staticmethod
    def isHmdActive() -> bool:
        '''
        Check if an HMD (VR) display mode is active.
        '''
        return bool()

    @staticmethod
    def pickingMoved(hit: 'vrdRayIntersection' = None):
        '''
        Triggers a pointer move event.
        '''
        pass

    @staticmethod
    def pickingPressed(hit: 'vrdRayIntersection' = None):
        '''
        Triggers a pointer button pressed event.
        '''
        pass

    @staticmethod
    def pickingReleased(hit: 'vrdRayIntersection' = None):
        '''
        Triggers a pointer button released event.
        '''
        pass

    @staticmethod
    def setAutoCreateCollisionObjects(automatic: bool = False):
        '''
        Toggles collision object creation for touch-sensors and web-engines.
        '''
        pass

    @staticmethod
    def setControllerVisualizationMode(mode: 'VisualizationMode' = None):
        '''
        Sets the visualization mode for the HMD controllers.
        '''
        pass

    @staticmethod
    def setControlMode(mode: 'ControlMode' = None):
        '''
        Sets the controle mode and corresponding button mappings for the immersive interactions.
        '''
        pass

    @staticmethod
    def setDefaultInteractionsActive(active: bool = False):
        '''
        Activates or deactivates all built-in interaction tools (teleport, pointer).
        '''
        pass

    @staticmethod
    def setInteractionActive(name: 'str' = None, active: bool = False):
        '''
        Activates or deactivates the specified interaction tool. Built-in interactions are named “Teleport”, “Pointer”.
        '''
        pass

    @staticmethod
    def setPreferredControllerVisualizeMode(mode: 'VisualizationMode' = None):
        '''
        Toggles the default visualisation style for the hands.
        '''
        pass

    @staticmethod
    def setPreferredTooltipsMode(show: bool = False):
        '''
        Toggles whether to show tooltips when the session starts.
        '''
        pass

    @staticmethod
    def setRelativeTeleportOrientation(isRelative: bool = False):
        '''
        Sets if the angle of the orientation is taken from the wrists absolute or relative rotation.
        '''
        pass

    @staticmethod
    def setTeleportGroundHeight(height: float = 0.0):
        '''
        Sets the height of the ground plane for the “On Ground Plane” teleport mode.
        '''
        pass

    @staticmethod
    def setTeleportGroundMode(mode: 'TeleportGroundMode' = None):
        '''
        Sets whether to teleport on scene geometries, or to teleport only on a virtual ground plane.
        '''
        pass

    @staticmethod
    def setTeleportRange(range: float = 0.0):
        '''
        Sets the maximum teleport distance.
        '''
        pass

    @staticmethod
    def setViewpointMode(adjustHeight: bool = False, adjustOrientation: bool = False, adjustPosition: bool = False):
        '''
        Changes the default behavior for viewpoint selection. The actual camera position is the transformation of a viewpoint plus the transformation of the hmd. If adjustment is enabled, the camera position is modified in a way, that the resulting camera plus hmd position matches exaclty a viewpoint positon, height or orientation.
        '''
        pass

    @staticmethod
    def showControllerMessage(data: 'vrdDeviceMessageData' = None, rightHand: bool = False) -> 'vrdNode':
        '''
        Show a controller message depending on the provided data.
        '''
        return vrdNode()

    @staticmethod
    def automaticCollisionObjectCreationChanged(automatic: bool = False):
        '''
        Notifies about changed automatic collision-object creation preference.
        '''
        pass

    @staticmethod
    def controllerVisualizationModeChanged(mode: 'VisualizationMode' = None):
        '''
        Notifies about changed hand visualisation style.
        '''
        pass

    @staticmethod
    def hmdStatusChanged(active: bool = False):
        '''
        This signal is triggered when HMD (VR) display mode is switched on or off.
        '''
        pass

    @staticmethod
    def showTooltipsOnStartChanged(show: bool = False):
        '''
        Notifies about changed show tooltips on start.
        '''
        pass

    @staticmethod
    def teleportGroundModeChanged(mode: 'TeleportGroundMode' = None):
        '''
        Notifies about changed teleport ground mode.
        '''
        pass


class vrdRayFile(vrdSceneObject):
    '''
    Interface to ray files.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def clear():
        '''
        Clears the loaded file.
        '''
        pass

    @staticmethod
    def getDirectEvaluationConeAngle() -> float:
        '''
        Returns the cone of valid directions used when directly looking into a ray file.
        '''
        return float()

    @staticmethod
    def getDirectEvaluationOffset() -> float:
        '''
        Returns the offset along the surface normal to be used when directly looking into a ray file. Use this to fix lookup surfaces that are not exactly where the ray origins are.
        '''
        return float()

    @staticmethod
    def getDirectEvaluationRadius() -> float:
        '''
        Returns the radius to be used for lookup when directly looking into a ray file.
        '''
        return float()

    @staticmethod
    def getFileName() -> 'str':
        '''
        Returns the file name of the ray file.
        '''
        return str()

    @staticmethod
    def getRayFileInfo() -> 'vrdRayFileInfo':
        '''
        Returns ray file information.
        '''
        return vrdRayFileInfo()

    @staticmethod
    def getUsePhotonsForDirectLighting() -> bool:
        '''
        Returns whether photon mapping for direct lighting is used or not. If disabled, ray lights can be used without photon mapping but it is necessary to define surface with ray light evaluation turned on. These surfaces will then act as light sources using all the ray files that are within the given radius.
        '''
        return bool()

    @staticmethod
    def getUseRandomSampling() -> bool:
        '''
        Returns if random sampling of the rays is used.
        '''
        return bool()

    @staticmethod
    def getVisualizationRayCount() -> 'int':
        '''
        Returns the number of rays used for the viewport visualization.
        '''
        return int()

    @staticmethod
    def getVisualizationRayLength() -> float:
        '''
        Returns the length used for the viewport visualization of rays.
        '''
        return float()

    @staticmethod
    def load(filename: 'str' = None):
        '''
        Loads the given file.
        '''
        pass

    @staticmethod
    def reload():
        '''
        Reloads the current file.
        '''
        pass

    @staticmethod
    def setDirectEvaluationConeAngle(angle: float = 0.0):
        '''
        Sets the cone of valid directions to be used when directly looking into a ray file.
        '''
        pass

    @staticmethod
    def setDirectEvaluationOffset(offset: float = 0.0):
        '''
        Sets the offset along the surface normal to be used when directly looking into a ray file. Use this to fix lookup surfaces that are not exactly where the ray origins are.
        '''
        pass

    @staticmethod
    def setDirectEvaluationRadius(radius: float = 0.0):
        '''
        Sets the radius to be used for lookup when directly looking into a ray file.
        '''
        pass

    @staticmethod
    def setFileName(fileName: 'str' = None):
        '''
        Loads the given ray file and sets the file name.
        '''
        pass

    @staticmethod
    def setTo(other: 'vrdRayFile' = None):
        '''
        Shares data of ray file in order to reduce memory consumption. Note that when a ray file is no longer used by any light it will be removed and needs to be reloaded from disk again.
        '''
        pass

    @staticmethod
    def setUsePhotonsForDirectLighting(use: bool = False):
        '''
        Toggles whether to use photon mapping for direct lighting or not. If disabled, ray lights can be used without photon mapping but it is necessary to define surface with ray light evaluation turned on. These surfaces will then act as light sources using all the ray files that are within the given radius.
        '''
        pass

    @staticmethod
    def setUseRandomSampling(use: bool = False):
        '''
        Uses random sampling of the rays. Use this if you have more than one luminaire in your ray file.
        '''
        pass

    @staticmethod
    def setVisualizationRayCount(count: 'int' = None):
        '''
        Sets the number of rays used for the viewport visualization.
        '''
        pass

    @staticmethod
    def setVisualizationRayLength(length: float = 0.0):
        '''
        Sets the length of used for the viewport visualization of rays.
        '''
        pass


class vrSceneplateTypes():
    '''
    vrSessionService

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdVirtualTouchpadButton():
    '''
    Represents a virtual button loacted on a touchpad of an VR controller. This virtual button can be used to split up the touchpad on a VR controller that can be used as regular buttons by the input mapping system.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getEndAngle() -> float:
        '''
        Gets the end angle of the virtual button.
        '''
        return float()

    @staticmethod
    def getMaxRadius() -> float:
        '''
        Gets the maximum radius of the virtual button.
        '''
        return float()

    @staticmethod
    def getMinRadius() -> float:
        '''
        Gets the minimum radius of the virtual button.
        '''
        return float()

    @staticmethod
    def getName() -> 'str':
        '''
        Gets the name of the virtual button.
        '''
        return str()

    @staticmethod
    def getStartAngle() -> float:
        '''
        Gets the start angle of the virtual button.
        '''
        return float()

    @staticmethod
    def getVirtualButtonId() -> 'int':
        '''
        Gets the virtual button id, which is set internally.
        '''
        return int()

    @staticmethod
    def setEndAngle(end: float = 0.0):
        '''
        Sets the end angle of the virtual button.
        '''
        pass

    @staticmethod
    def setMaxRadius(max: float = 0.0):
        '''
        Sets the maximum radius if the virtual button.
        '''
        pass

    @staticmethod
    def setMinRadius(min: float = 0.0):
        '''
        Sets the minimum radius of the virtual button.
        '''
        pass

    @staticmethod
    def setName(name: 'str' = None):
        '''
        Sets the name of the virtual button.
        '''
        pass

    @staticmethod
    def setStartAngle(start: float = 0.0):
        '''
        Sets the start angle of the virtual button.
        '''
        pass

    @staticmethod
    def vrdVirtualTouchpadButton():
        '''
        Default constructor.
        '''
        pass


class vrReferenceService():
    '''
    The reference service provides functions for querying and managing reference nodes. Additionally, settings from the preferences can be queried.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def convertToSmart(node: 'vrdNode' = None, useSourcePath: bool = False) -> 'vrdNode':
        '''
        Converts the passed node into a smart reference.
        '''
        return vrdNode()

    @staticmethod
    def createSmart(parent: 'vrdNode' = None) -> 'vrdReferenceNode':
        '''
        Creates a new smart reference below the given parent.
        '''
        return vrdReferenceNode()

    @staticmethod
    def createSource(path: 'str' = None, parent: 'vrdNode' = None) -> 'vrdReferenceNode':
        '''
        Creates a new source reference with the given path.
        '''
        return vrdReferenceNode()

    @staticmethod
    def getAllAvailableFileFormats() -> List['str']:
        '''
        Returns a list with all file endings used in the loaded references (source and smart).
        '''
        return [str()]

    @staticmethod
    def getChildReferences(node: 'vrdNode' = None) -> List['vrdReferenceNode']:
        '''

        '''
        return [vrdReferenceNode()]

    @staticmethod
    def getCustomExportPath() -> 'str':
        '''
        Queries the custom export path.
        '''
        return str()

    @staticmethod
    def getExportLocation() -> 'ExportLocation':
        '''
        Queries the default smart export location mode.
        '''
        return ExportLocation()

    @staticmethod
    def getLoadMode() -> 'LoadMode':
        '''
        Queries the load mode for smart references.
        '''
        return LoadMode()

    @staticmethod
    def getNotificationMode() -> 'NotificationMode':
        '''
        Queries the current file change notification mode.
        '''
        return NotificationMode()

    @staticmethod
    def getParentReferences(node: 'vrdNode' = None) -> List['vrdReferenceNode']:
        '''

        '''
        return [vrdReferenceNode()]

    @staticmethod
    def getReferences(node: 'vrdNode' = None) -> List['vrdReferenceNode']:
        '''

        '''
        return [vrdReferenceNode()]

    @staticmethod
    def getRevisionMonitoringEnabled() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def getRevisionMonitoringExpressions() -> List['str']:
        '''

        '''
        return [str()]

    @staticmethod
    def getSceneReferences() -> List['vrdReferenceNode']:
        '''
        Get all references in the scene
        '''
        return [vrdReferenceNode()]

    @staticmethod
    def getShowConvertToSmartWarning() -> bool:
        '''
        Queries the convert to smart warning flag.
        '''
        return bool()

    @staticmethod
    def getUpdateMonitoringEnabled() -> bool:
        '''
        Checks if update monitoring is currently enabled.
        '''
        return bool()

    @staticmethod
    def getUpdateMonitoringInterval() -> 'int':
        '''
        Returns the current time between background update checks in miliseconds.
        '''
        return int()

    @staticmethod
    def getUpdateMonitoringPaused() -> bool:
        '''
        Queries if the background update monitoring is currently in pause mode.
        '''
        return bool()

    @staticmethod
    def pauseUpdateMonitoring(state: bool = False):
        '''
        Temporarily pauses / unpauses the background update monitoring. This will suspend the asynchrounous update check but will not cancel it.
        '''
        pass

    @staticmethod
    def reimportSmartReferences(references: List['vrdReferenceNode'] = None):
        '''
        Reimports the list of given smart references.
        '''
        pass

    @staticmethod
    def reimportSourceReferences(references: List['vrdReferenceNode'] = None) -> List['vrdReferenceNode']:
        '''

        '''
        return [vrdReferenceNode()]

    @staticmethod
    def removeReference(node: 'vrdReferenceNode' = None) -> 'vrdNode':
        '''
        Converts the passed node into a none reference node.
        '''
        return vrdNode()

    @staticmethod
    def setCustomExportPath(path: 'str' = None):
        '''
        Sets the custom path for exported smart references. This path will be used, when the location is set to Custom.
        '''
        pass

    @staticmethod
    def setExportLocation(value: 'ExportLocation' = None):
        '''
        Changes the default location mode for unsaved smart references.
        '''
        pass

    @staticmethod
    def setLoadMode(value: 'LoadMode' = None):
        '''
        Sets the load mode for smart references. LoadedReferences -> preserve the load state saved in the project AllReferences -> load all smart references NoReferences -> Do not load any smart reference LoadedSkipLeafReferences -> Load all but the leafes of the reference tree.
        '''
        pass

    @staticmethod
    def setNotificationMode(value: 'NotificationMode' = None):
        '''
        Sets the file change notification monitoring mode.
        '''
        pass

    @staticmethod
    def setRevisionMonitoringEnabled(value: bool = False):
        '''
        Enables revision number check for update monitoring.
        '''
        pass

    @staticmethod
    def setRevisionMonitoringExpressions(expressions: List['str'] = None):
        '''
        Sets the list of regular expressions used to detect revision numbers.
        '''
        pass

    @staticmethod
    def setShowConvertToSmartWarning(value: bool = False):
        '''
        Enables or disables warnings on convert to smart.
        '''
        pass

    @staticmethod
    def setUpdateMonitoringEnabled(value: bool = False):
        '''
        Starts / stops the background update monitoring.
        '''
        pass

    @staticmethod
    def setUpdateMonitoringInterval(msecs: 'int' = None):
        '''
        Sets the update monitoring interval in miliseconds.
        '''
        pass

    @staticmethod
    def sortRevisions(revisions: List['str'] = None) -> List['str']:
        '''
        Sorts a list of revisions from oldest to newest.
        '''
        return [str()]

    @staticmethod
    def referenceCreated(node: 'vrdReferenceNode' = None):
        '''
        Signal is emitted when a reference has been created.
        '''
        pass

    @staticmethod
    def referenceEditStateChagned():
        '''
        Signal is emitted when a reference has been edited or edit has been undone.
        '''
        pass

    @staticmethod
    def referencesChanged(nodes: List['vrdReferenceNode'] = None):
        '''
        Signal is emitted when references have internal changes. If the list of nodes is empty, then all nodes should be considered as changed.
        '''
        pass

    @staticmethod
    def sceneHasReferences(state: bool = False):
        '''
        Signal is sent when the scene has references or the last one is deleted
        '''
        pass

    @staticmethod
    def sceneSelectionChanged(nodes: List['vrdReferenceNode'] = None):
        '''
        This signal is sent when the selection of reference nodes in the scene graph changes.
        '''
        pass

    @staticmethod
    def updateMonitoringChanged(state: bool = False):
        '''
        Signal is emitted when update monitoring is turned on or off.
        '''
        pass


class vrSessionService():
    '''
    Interface to work with collaboration sessions.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def abortProgress():
        '''
        Aborts a running project file upload or download.
        '''
        pass

    @staticmethod
    def addNodeSync(node: 'vrdNode' = None):
        '''
        Transformation and visibility changes will by synchronized for all registered nodes This node sync is only used in python and does not affect transformations that are triggered by the transformation module or variant sets. By default functions like setTransformNodeXXXX are not synced automatically. Adding a node sync will send all changes, independent from the source of the change, to all connected users.
        '''
        pass

    @staticmethod
    def blockSync(commandTypeName: 'str' = None):
        '''
        Calling blockSync, blocks all synchronizations to other users.
        '''
        pass

    @staticmethod
    def checkSessionLink(passwd: 'str' = None, sessionLink: 'str' = None) -> 'bool':
        '''
        Checks if the password is valid.
        '''
        return bool()

    @staticmethod
    def createSessionLink(server: 'str' = None, passwd: 'str' = None) -> 'str':
        '''
        Creates a connection string from the hostname and a password.
        '''
        return str()

    @staticmethod
    def getDefaultColors() -> 'DictstringQColor':
        '''

        '''
        return DictstringQColor()

    @staticmethod
    def getRemoteUsers() -> List['vrdSessionUser']:
        '''

        '''
        return [vrdSessionUser()]

    @staticmethod
    def getSessionLink() -> 'str':
        '''
        Returns the connection string of the collaboration session.
        '''
        return str()

    @staticmethod
    def getSyncCommandNames() -> List['str']:
        '''
        Get all known command type names. These names can be used in blockSync and unblockSync.
        '''
        return [str()]

    @staticmethod
    def getUser() -> 'vrdSessionUser':
        '''

        '''
        return vrdSessionUser()

    @staticmethod
    def getUsers() -> List['vrdSessionUser']:
        '''

        '''
        return [vrdSessionUser()]

    @staticmethod
    def isConnected() -> bool:
        '''
        Checks whether vred is connected to a collaboration session.
        '''
        return bool()

    @staticmethod
    def isJoinCompleted() -> bool:
        '''
        Checks whether the connection has been established.
        '''
        return bool()

    @staticmethod
    def isMicrophoneMute() -> bool:
        '''
        Get microphone muted state.
        '''
        return bool()

    @staticmethod
    def isSpatialAudio() -> bool:
        '''
        Get spatioal audio setting.
        '''
        return bool()

    @staticmethod
    def isSpeakerMute() -> bool:
        '''
        Get speaker muted state.
        '''
        return bool()

    @staticmethod
    def join(sessionLink: 'str' = None, userName: 'str' = None, color: 'QColor' = None, roomName: 'str' = None, passwd: 'str' = None, forceVersion: bool = False):
        '''
        Joins an existing or creates a new vr collaboration sesson.
        '''
        pass

    @staticmethod
    def leave():
        '''
        Leaves the collaboration session.
        '''
        pass

    @staticmethod
    def removeNodeSync(node: 'vrdNode' = None):
        '''
        Remove node from synchronization. Like addNodeSync, this does not have an effect on changes triggered by variant sets and other interactively triggered transformations.
        '''
        pass

    @staticmethod
    def sendPython(command: 'str' = None, commandId: 'str' = None):
        '''
        Sends a python command to all other users.
        '''
        pass

    @staticmethod
    def setAudioEnabled(value: bool = False):
        '''
        Enables audio communication.
        '''
        pass

    @staticmethod
    def setAvatarProximityOpaqueDistance(value: float = 0.0):
        '''
        Changes the distance from which avatars are opaque.
        '''
        pass

    @staticmethod
    def setAvatarProximityTransparentDistance(value: float = 0.0):
        '''
        Changes the distance from which avatars become fully transparent.
        '''
        pass

    @staticmethod
    def setAvatarSafetyOpaqueDistance(value: float = 0.0):
        '''
        Changes the distance to fade safety avatars.
        '''
        pass

    @staticmethod
    def setAvatarSafetyTransparentDistance(value: float = 0.0):
        '''
        Changes distance to hide safety avatars.
        '''
        pass

    @staticmethod
    def setMicrophoneLevel(value: float = 0.0):
        '''
        Adjusts microphone level.
        '''
        pass

    @staticmethod
    def setMicrophoneMute(value: bool = False):
        '''
        Mutes the microphone.
        '''
        pass

    @staticmethod
    def setPointerToolActive(on: bool = False):
        '''
        Activates the pointing tool.
        '''
        pass

    @staticmethod
    def setPointerVisible(value: bool = False):
        '''
        Makes the pointing tool visible for all other users.
        '''
        pass

    @staticmethod
    def setRoom(room: 'str' = None):
        '''
        Changes the room name, used for safety avatar visualization.
        '''
        pass

    @staticmethod
    def setSpatialAudio(value: bool = False):
        '''
        Enables 3D sound for collaboration audio communications.
        '''
        pass

    @staticmethod
    def setSpeakerLevel(value: float = 0.0):
        '''
        Adjusts speaker volume.
        '''
        pass

    @staticmethod
    def setSpeakerMute(value: bool = False):
        '''
        Mutes the speaker.
        '''
        pass

    @staticmethod
    def setUserColor(userColor: 'QColor' = None):
        '''
        Change the user color.
        '''
        pass

    @staticmethod
    def setUserName(userName: 'str' = None):
        '''
        Changes the user name.
        '''
        pass

    @staticmethod
    def showDesktopAvatar(on: bool = False):
        '''
        Toggles how the local user is shown in desktop mode to the other users, either as tablet (default) or as avatar.
        '''
        pass

    @staticmethod
    def spectate(on: bool = False, userId: 'int' = None):
        '''
        Turns spectator mode on or off.
        '''
        pass

    @staticmethod
    def stopForAll():
        '''
        Stops the collaboration session for all connected users.
        '''
        pass

    @staticmethod
    def syncNode(node: 'vrdNode' = None):
        '''
        Synchronize position and visibility with all other users.
        '''
        pass

    @staticmethod
    def toPythonString(matrix: 'QMatrix4x4' = None) -> 'str':
        '''
        Convert matrix to a python string that can used in sendPython.
        '''
        return str()

    @staticmethod
    def unblockSync(commandTypeName: 'str' = None):
        '''
        Calling unblockSync resumes synchronizations to other users.
        '''
        pass

    @staticmethod
    def uploadScene():
        '''
        Sends the current project in the memory to all connected users.
        '''
        pass

    @staticmethod
    def uploadScenePath(path: 'str' = None):
        '''
        Sends the path of the project to be loaded to all users.
        '''
        pass

    @staticmethod
    def joinFailed(message: 'str' = None, wrongVersion: bool = False):
        '''
        The join operation has failed.
        '''
        pass

    @staticmethod
    def microphoneMuted(value: bool = False):
        '''
        Microphone has been muted or unmuted.
        '''
        pass

    @staticmethod
    def pointerToolActiveChanged(on: bool = False):
        '''
        The pointing tool has been activated.
        '''
        pass

    @staticmethod
    def progressChanged(action: 'str' = None, progress: 'int' = None):
        '''
        Project upload or download progress has changed.
        '''
        pass

    @staticmethod
    def progressFinished():
        '''
        Project upload or download operatrion has been completed.
        '''
        pass

    @staticmethod
    def receivedSessionConfig(config: 'str' = None):
        '''
        A session configuration has been double clicked or dropped to the VRED window.
        '''
        pass

    @staticmethod
    def sessionJoined():
        '''
        A collaboration session has been joined.
        '''
        pass

    @staticmethod
    def sessionLeft():
        '''
        A collaboration session has been left.
        '''
        pass

    @staticmethod
    def speakerMuted(value: bool = False):
        '''
        Speaker has been muted or unmuted.
        '''
        pass

    @staticmethod
    def spectateChanged(on: bool = False, userId: 'int' = None):
        '''
        Spectator mode has been changed.
        '''
        pass

    @staticmethod
    def statusChanged():
        '''
        Connection status has changed.
        '''
        pass

    @staticmethod
    def userArrives(user: 'vrdSessionUser' = None):
        '''
        A new user has joined the session.
        '''
        pass

    @staticmethod
    def userLeaves(user: 'vrdSessionUser' = None):
        '''
        A user has left the session.
        '''
        pass


class vrdSphericalLightNode(vrdAreaLightNode):
    '''
    This class represents a Spherical light.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdRayFileInfo():
    '''
    Interface to ray files.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getLuminousPower() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getNumberOfRays() -> 'int':
        '''

        '''
        return int()

    @staticmethod
    def getScalingFactor() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getSpectralInformationString() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def vrdRayFileInfo(luminousPower: float = 0.0, numberOfRays: 'int' = None, scalingFactor: float = 0.0, spectralInformationString: 'str' = None):
        '''
        Create a ray file information object. In general this is not created by the user but returned by a         vrdRayFile to provide information about the used ray file.
        '''
        pass


class vrdSwitchNode(vrdNode):
    '''
    Returns the current choice

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getChoice() -> 'int':
        '''
        Returns the current choice
        '''
        return int()

    @staticmethod
    def setChoice(choice: 'int' = None):
        '''
        Set the choice.
        '''
        pass


class vrdSceneplateNode(vrdNode):
    '''
    Base class for all scene plate types.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getBackgroundColor() -> 'QVector3D':
        '''
        Returns the text background color.
        '''
        return QVector3D()

    @staticmethod
    def getBackgroundTransparency() -> float:
        '''
        Returns the transparency of the text background.
        '''
        return float()

    @staticmethod
    def getBrightness() -> float:
        '''
        Returns brightness from color correction.
        '''
        return float()

    @staticmethod
    def getClickThrough() -> float:
        '''
        Returns the transparency limit for content to be unnoticeable to mouse clicks.
        '''
        return float()

    @staticmethod
    def getContentType() -> 'ContentType':
        '''
        Returns the type of content to be displayed on the plate.
        '''
        return ContentType()

    @staticmethod
    def getContrast() -> float:
        '''
        Returns contrast from color correction.
        '''
        return float()

    @staticmethod
    def getFont() -> 'str':
        '''
        Returns font name.
        '''
        return str()

    @staticmethod
    def getFontColor() -> 'QVector3D':
        '''
        Returns the font color.
        '''
        return QVector3D()

    @staticmethod
    def getFontHeight() -> 'int':
        '''
        Returns the vertical resolution in pixels per text line.
        '''
        return int()

    @staticmethod
    def getFontStyle() -> 'str':
        '''
        Returns text font style.
        '''
        return str()

    @staticmethod
    def getFrameOffset() -> 'int':
        '''
        Returns offset to the image number when using an image sequence.
        '''
        return int()

    @staticmethod
    def getHeight() -> 'int':
        '''
        Returns the height of the canvas in pixels for HTML content.
        '''
        return int()

    @staticmethod
    def getHueShift() -> float:
        '''
        Returns hue shift from color correction.
        '''
        return float()

    @staticmethod
    def getImage() -> 'vrdImage':
        '''
        Returns the image object.
        '''
        return vrdImage()

    @staticmethod
    def getImageNumber() -> 'int':
        '''
        Returns image number in current image sequence.
        '''
        return int()

    @staticmethod
    def getInlineImageSequence() -> bool:
        '''
        Returns if image sequence is inlined into the vpb file.
        '''
        return bool()

    @staticmethod
    def getNodeType() -> 'NodeType':
        '''
        Returns the node type.
        '''
        return NodeType()

    @staticmethod
    def getOffset() -> 'QVector2D':
        '''
        Returns the offset of the plate to its anchor point.
        '''
        return QVector2D()

    @staticmethod
    def getOffsetMode() -> 'SizeType':
        '''
        Returns how offset should be interpreted. Absolute means the offset is in pixels. Relative means the offset is given as a fraction of the viewport extents.
        '''
        return SizeType()

    @staticmethod
    def getPosition() -> 'Position':
        '''
        Returns the anchor point of the plate within the viewport.
        '''
        return Position()

    @staticmethod
    def getRepeatMode() -> 'RepeatMode':
        '''
        Returns the repeat mode of the plate image within the viewport.
        '''
        return RepeatMode()

    @staticmethod
    def getRotation() -> float:
        '''
        Returns the amount the plate is rotated clockwise in degrees around its center.
        '''
        return float()

    @staticmethod
    def getSaturation() -> float:
        '''
        Returns saturation from color correction.
        '''
        return float()

    @staticmethod
    def getSize() -> float:
        '''
        Returns the height of the plate.
        '''
        return float()

    @staticmethod
    def getSizeMode() -> 'SizeType':
        '''
        Returns how size is interpreted. Absolute means the size is in pixels. Relative means the size is a fraction of the viewport height.
        '''
        return SizeType()

    @staticmethod
    def getText() -> 'str':
        '''
        Returns the text.
        '''
        return str()

    @staticmethod
    def getTransparency() -> float:
        '''
        Returns the overall transparency of the plate.
        '''
        return float()

    @staticmethod
    def getUrl() -> 'str':
        '''
        Returns the url or the content of a web site.
        '''
        return str()

    @staticmethod
    def getUseImageSequence() -> bool:
        '''
        Returns if image sequences is used.
        '''
        return bool()

    @staticmethod
    def getWhiteBalance() -> 'int':
        '''
        Returns white balance from color correction.
        '''
        return int()

    @staticmethod
    def getWidth() -> 'int':
        '''
        Returns the width of the canvas in pixels for HTML content.
        '''
        return int()

    @staticmethod
    def setBackgroundColor(color: 'QVector3D' = None):
        '''
        Sets the text background color.
        '''
        pass

    @staticmethod
    def setBackgroundTransparency(transparency: float = 0.0):
        '''
        Sets the transparency of the text background.
        '''
        pass

    @staticmethod
    def setBrightness(brightness: float = 0.0):
        '''
        Shifts the content’s blacks, grays, and whites. Higher values increase the perceived luminance of the content.
        '''
        pass

    @staticmethod
    def setClickThrough(clickThrough: float = 0.0):
        '''
        Sets the transparency limit for content to be unnoticeable to mouse clicks.
        '''
        pass

    @staticmethod
    def setContentType(contentType: 'ContentType' = None):
        '''
        Sets the type of content to be displayed on the plate.
        '''
        pass

    @staticmethod
    def setContrast(contrast: float = 0.0):
        '''
        Shifts the content’s light and dark color values. Higher values create brighter highlights and darker shadows.
        '''
        pass

    @staticmethod
    def setFont(fontName: 'str' = None):
        '''
        Sets the text font.
        '''
        pass

    @staticmethod
    def setFontColor(color: 'QVector3D' = None):
        '''
        Sets the text color.
        '''
        pass

    @staticmethod
    def setFontHeight(fontHeight: 'int' = None):
        '''
        Sets the vertical resolution in pixels per text line.
        '''
        pass

    @staticmethod
    def setFontStyle(style: 'str' = None):
        '''
        Sets text font style.
        '''
        pass

    @staticmethod
    def setFrameOffset(frameOffset: 'int' = None):
        '''
        Sets an offset to the image number when using an image sequence.
        '''
        pass

    @staticmethod
    def setHeight(height: 'int' = None):
        '''
        Sets the height of the canvas in pixels for HTML content.
        '''
        pass

    @staticmethod
    def setHueShift(value: float = 0.0):
        '''
        Shifts all content colors uniformly through the hue color range.
        '''
        pass

    @staticmethod
    def setImage(img: 'vrdImage' = None):
        '''
        Sets image object.
        '''
        pass

    @staticmethod
    def setImageNumber(imageNumber: 'int' = None):
        '''
        Sets the image number in current image sequence.
        '''
        pass

    @staticmethod
    def setInlineImageSequence(inlineImageSequence: bool = False):
        '''
        Inlines the image sequence into the vpb file.
        '''
        pass

    @staticmethod
    def setNodeType(nodeType: 'NodeType' = None):
        '''
        Sets the sceneplate type. Frontplates appear on top of the scene and backplates behind.
        '''
        pass

    @staticmethod
    def setOffset(offset: 'QVector2D' = None):
        '''
        Sets the offset of the plate to its anchor point.
        '''
        pass

    @staticmethod
    def setOffsetMode(offsetMode: 'SizeType' = None):
        '''
        Sets how offset should be interpreted. Absolute means the offset is in pixels. Relative means the offset is given as a fraction of the viewport extents.
        '''
        pass

    @staticmethod
    def setPosition(position: 'Position' = None):
        '''
        Sets the anchor point of the plate within the viewport.
        '''
        pass

    @staticmethod
    def setRepeatMode(repeatMode: 'RepeatMode' = None):
        '''
        Sets the repeat mode of the plate image within the viewport.
        '''
        pass

    @staticmethod
    def setRotation(rotation: float = 0.0):
        '''
        Sets the amount the plate is rotated clockwise in degrees around its center.
        '''
        pass

    @staticmethod
    def setSaturation(saturation: float = 0.0):
        '''
        Shifts the content’s color intensity. Higher values produce vivid colors. Lower values produce dull grayer colors.
        '''
        pass

    @staticmethod
    def setSize(size: float = 0.0):
        '''
        Sets the height of the plate. Width is set accordingly to maintain the aspect ratio of its content.
        '''
        pass

    @staticmethod
    def setSizeMode(sizeMode: 'SizeType' = None):
        '''
        Sets how size is interpreted. Absolute means the size is in pixels. Relative means the size is a fraction of the viewport height.
        '''
        pass

    @staticmethod
    def setText(text: 'str' = None):
        '''
        Sets the text.
        '''
        pass

    @staticmethod
    def setTransparency(transparency: float = 0.0):
        '''
        Sets the overall transparency of the plate.
        '''
        pass

    @staticmethod
    def setUrl(url: 'str' = None):
        '''
        The url can contain a valid URL to a website (‘        http://www.autodesk.com’) or the html content of a website as a string.
        '''
        pass

    @staticmethod
    def setUseImageSequence(useImageSequence: bool = False):
        '''
        Use an image sequence.
        '''
        pass

    @staticmethod
    def setWhiteBalance(whiteBalance: 'int' = None):
        '''
        Shifts the content’s white balance to match the color temperature of the scene in Kelvin. Lower values produce cooler (bluish) colors. Higher values produce warmer (yellowish) colors.
        '''
        pass

    @staticmethod
    def setWidth(width: 'int' = None):
        '''
        Sets the width of the canvas in pixels for HTML content.
        '''
        pass


class vrdDeviceInteraction(vrdObject):
    '''
    Represents an interaction that can contain several     vrdDeviceAction which are triggered by controller events.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def addSupportedInteractionGroup(name: 'str' = None):
        '''
        Adds an interaction group to the supported interaction groups.
        '''
        pass

    @staticmethod
    def createControllerAction(mapping: 'str' = None) -> 'vrdDeviceAction':
        '''
        Creates an action for this interaction.
        '''
        return vrdDeviceAction()

    @staticmethod
    def getControllerAction(name: 'str' = None) -> 'vrdDeviceAction':
        '''
        Gets an already existing action related to the interaction.
        '''
        return vrdDeviceAction()

    @staticmethod
    def getControllerActions() -> List['vrdDeviceAction']:
        '''
        Gets a list of all action objects related to the interaction.
        '''
        return [vrdDeviceAction()]

    @staticmethod
    def getName() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSupportedInteractionGroups() -> List['str']:
        '''

        '''
        return [str()]

    @staticmethod
    def removeControllerAction(action: 'vrdDeviceAction' = None):
        '''
        Removes an action from the interaction.
        '''
        pass

    @staticmethod
    def removeSupportedInteractionGroup(name: 'str' = None):
        '''
        Removes an interaction group from being supported by the interaction.
        '''
        pass

    @staticmethod
    def setControllerActionMapping(actionName: 'str' = None, mapping: 'str' = None):
        '''
        Sets the mapping of an already existing action related to this interaction.
        '''
        pass

    @staticmethod
    def setSupportedInteractionGroups(names: List['str'] = None):
        '''
        Sets the interaction groups the interaction will be part of. Setting no groups will activate this interaction for all interaction groups.
        '''
        pass


class vrNodeService():
    '''
    A service that provides helper functions for working with vrdNodes.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def clearFindCache():
        '''
        Clears the find cache.
        '''
        pass

    @staticmethod
    def cloneNodes(nodes: List['vrdNode'] = None) -> List['vrdNode']:
        '''
        Clone a list of nodes from the scene graph.
        '''
        return [vrdNode()]

    @staticmethod
    def findNode(name: 'str' = None, wildcard: bool = False, includeComponents: bool = False, root: 'vrdNode' = None) -> 'vrdNode':
        '''
        Finds the node via name.
        '''
        return vrdNode()

    @staticmethod
    def findNodes(name: 'str' = None, wildcard: bool = False, includeComponents: bool = False, root: 'vrdNode' = None) -> List['vrdNode']:
        '''
        Finds a list of nodes depending on their name.
        '''
        return [vrdNode()]

    @staticmethod
    def findNodesWithPath(path: 'str' = None, wildcard: bool = False, root: 'vrdNode' = None) -> List['vrdNode']:
        '''
        Finds a list of nodes depending on the node path.
        '''
        return [vrdNode()]

    @staticmethod
    def findNodeWithPath(path: 'str' = None, wildcard: bool = False, root: 'vrdNode' = None) -> 'vrdNode':
        '''
        Finds a node depending on its node path.
        '''
        return vrdNode()

    @staticmethod
    def getNodeFromId(nodeId: 'int' = None) -> 'vrdNode':
        '''
        Gets a node by its identifier.
        '''
        return vrdNode()

    @staticmethod
    def initFindCache():
        '''
        Build up an internal cache structure to speed up execution of find commands.
        '''
        pass

    @staticmethod
    def removeNodes(nodes: List['vrdNode'] = None):
        '''
        Removes a list of nodes from the scene graph.
        '''
        pass

    @staticmethod
    def unshareNodes(nodes: List['vrdNode'] = None, option: 'UnshareOption' = None):
        '''
        Unshare a list of nodes from the scene graph. Unshare will break the connection between two nodes which share the same settings.
        '''
        pass

    @staticmethod
    def nodesAdded(nodes: List['vrdNode'] = None):
        '''
        This signal will be send when new nodes was added.
        '''
        pass

    @staticmethod
    def nodesRemoved(nodes: List['vrdNode'] = None):
        '''
        This signal will be send when nodes was deleted.
        '''
        pass


class vrdSceneImportSettings():
    '''
    Returns if materials from the asset manager are applied.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getApplyMaterialsFromAssetManager() -> bool:
        '''
        Returns if materials from the asset manager are applied.
        '''
        return bool()

    @staticmethod
    def getCenterInOrigin() -> bool:
        '''
        Queries if the imported geometry will be centered into origin.
        '''
        return bool()

    @staticmethod
    def getCreateReferences() -> bool:
        '''
        Returns if reference nodes are created during import.
        '''
        return bool()

    @staticmethod
    def getImportAnimations() -> bool:
        '''
        Queries if animations should be imported.
        '''
        return bool()

    @staticmethod
    def getMergeMaterials() -> bool:
        '''
        Returns if materials are merged during source import.
        '''
        return bool()

    @staticmethod
    def getPreserveAnimations() -> bool:
        '''
        Returns if animations are tried to preserve during source re-import.
        '''
        return bool()

    @staticmethod
    def getPreserveRenderLayerSettings() -> bool:
        '''
        Returns if render layer settings are tried to preserve during source re-import.
        '''
        return bool()

    @staticmethod
    def getPreserveTouchSensors() -> bool:
        '''
        Returns if touch sensors are tried to preserve during source re-import.
        '''
        return bool()

    @staticmethod
    def getPreserveTransformations() -> bool:
        '''
        Returns if transformations are tried to preserve during source re-import.
        '''
        return bool()

    @staticmethod
    def getPutOnGround() -> bool:
        '''
        Queries if the imported geometry will be placed onto the ground (zero-plane).
        '''
        return bool()

    @staticmethod
    def setApplyMaterialsFromAssetManager(value: bool = False):
        '''
        Sets if materials from asset manager should be applied.
        '''
        pass

    @staticmethod
    def setCenterInOrigin(value: bool = False):
        '''
        The center of the imported geometry will be placed into the scene origin.
        '''
        pass

    @staticmethod
    def setCreateReferences(value: bool = False):
        '''
        Sets if reference nodes are created during import.
        '''
        pass

    @staticmethod
    def setImportAnimations(value: bool = False):
        '''
        Determines if animations will be imported.
        '''
        pass

    @staticmethod
    def setMergeMaterials(value: bool = False):
        '''
        Sets if materials are merged during source import.
        '''
        pass

    @staticmethod
    def setPreserveAnimations(value: bool = False):
        '''
        Sets if animations are tried to preserve during source re-import.
        '''
        pass

    @staticmethod
    def setPreserveRenderLayerSettings(value: bool = False):
        '''
        Sets if render layer settings are tried to preserve during source re-import.
        '''
        pass

    @staticmethod
    def setPreserveTouchSensors(value: bool = False):
        '''
        Sets if touch sensors are tried to preserve during source re-import.
        '''
        pass

    @staticmethod
    def setPreserveTransformations(value: bool = False):
        '''
        Sets if transformations are tried to preserve during source re-import.
        '''
        pass

    @staticmethod
    def setPutOnGround(value: bool = False):
        '''
        Determines that the imported geometry will be put on the ground (zero-plane).
        '''
        pass

    @staticmethod
    def vrdSceneImportSettings():
        '''

        '''
        pass


class vrAnnotationService():
    '''
    Creates a new annotation. Each annotation is created with a unique name. If the passed name is not unique (e.g. an annotation with that name already exists), it is modified so that it is unique.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createAnnotation(name: 'str' = None) -> 'vrdAnnotationNode':
        '''
        Creates a new annotation. Each annotation is created with a unique name. If the passed name is not unique (e.g. an annotation with that name already exists), it is modified so that it is unique.
        '''
        return vrdAnnotationNode()

    @staticmethod
    def deleteAnnotation(annotation: 'vrdAnnotationNode' = None):
        '''
        Deletes an existing annotation.
        '''
        pass

    @staticmethod
    def duplicateAnnotation(annotation: 'vrdAnnotationNode' = None) -> 'vrdAnnotationNode':
        '''
        Duplicates an existing annotation.
        '''
        return vrdAnnotationNode()

    @staticmethod
    def findAnnotation(name: 'str' = None) -> 'vrdAnnotationNode':
        '''
        Searches for an existing annotation via name.
        '''
        return vrdAnnotationNode()

    @staticmethod
    def getAnnotationRoot() -> 'vrdNode':
        '''
        Returns the root node of the annotation hierarchy. Currently, all annotations are children of that root.
        '''
        return vrdNode()

    @staticmethod
    def getAnnotations() -> List['vrdAnnotationNode']:
        '''
        Returns a list of all annotations.
        '''
        return [vrdAnnotationNode()]

    @staticmethod
    def getDefaultBackgroundColor() -> 'QColor':
        '''
        Returns the default label background color of annotations.
        '''
        return QColor()

    @staticmethod
    def getDefaultFontColor() -> 'QColor':
        '''
        Returns the default font color for the displayed text of annotations.
        '''
        return QColor()

    @staticmethod
    def getDefaultLineColor() -> 'QColor':
        '''
        Returns the default line color for borders and leaders of annotations.
        '''
        return QColor()

    @staticmethod
    def getDefaultScalingMode() -> 'ScalingMode':
        '''
        Returns the default scaling mode of annotations.
        '''
        return ScalingMode()

    @staticmethod
    def getDefaultSize() -> float:
        '''
        Returns the default size of annotations.
        '''
        return float()

    @staticmethod
    def getDefaultUseSceneNodeVisibility() -> bool:
        '''
        Returns the default value for using the linked scene graph node to determine the visibility of annotations.
        '''
        return bool()

    @staticmethod
    def getShowAnnotations() -> bool:
        '''
        Returns the global visibility of annotations.
        '''
        return bool()

    @staticmethod
    def loadAnnotations(path: 'str' = None) -> List['vrdAnnotationNode']:
        '''
        Loads annotation data from an xml file. The annotations are directly added to the scene.
        '''
        return [vrdAnnotationNode()]

    @staticmethod
    def pickAnnotation(annotation: 'vrdAnnotationNode' = None):
        '''
        Activates the scene node picking functionality of the UI for the passed annotation.
        '''
        pass

    @staticmethod
    def saveAnnotations(annotations: List['vrdAnnotationNode'] = None, path: 'str' = None):
        '''
        Saves a list of annotations. The annotation data is stored in an xml file.
        '''
        pass

    @staticmethod
    def setDefaultBackgroundColor(color: 'QColor' = None):
        '''
        Sets the default label background color of annotations. It is used when creating a new annotation.
        '''
        pass

    @staticmethod
    def setDefaultFontColor(color: 'QColor' = None):
        '''
        Sets the default font color for the displayed text of annotations. It is used when creating a new annotation.
        '''
        pass

    @staticmethod
    def setDefaultLineColor(color: 'QColor' = None):
        '''
        Sets the default line color for borders and leaders of annotations. It is used when creating a new annotation.
        '''
        pass

    @staticmethod
    def setDefaultScalingMode(mode: 'ScalingMode' = None):
        '''
        Sets the default scaling mode of annotations. It is used when creating a new annotation.
        '''
        pass

    @staticmethod
    def setDefaultSize(size: float = 0.0):
        '''
        Sets the default size of annotations. It is used when creating a new annotation.
        '''
        pass

    @staticmethod
    def setDefaultUseSceneNodeVisibility(use: bool = False):
        '''
        Sets the default value for using the linked scene graph node to determine the visibility of annotations. It is used when creating a new annotation.
        '''
        pass

    @staticmethod
    def setShowAnnotations(value: bool = False):
        '''
        Sets the global visibility of annotations. Individual visibility can be set in         vrdAnnotationNode.
        '''
        pass

    @staticmethod
    def annotationCreated(annotation: 'vrdAnnotationNode' = None):
        '''
        Triggered when a new annotation was created.
        '''
        pass

    @staticmethod
    def annotationsAdded():
        '''
        Triggered when one or more annotations were added to the scene.
        '''
        pass

    @staticmethod
    def annotationsDeleted():
        '''
        Triggered when one or more annotations were deleted from the scene.
        '''
        pass

    @staticmethod
    def showAnnotationsChanged(value: bool = False):
        '''
        Triggered when the global annotation visibility has changed.
        '''
        pass


class vrdDeviceMessageData():
    '''
    Defines message content for     vrImmersiveInteractionService.showControllerMessage(data, rightHand). You can display either a text message or an image message for a VR controller.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getBackgroundColor() -> 'QVector3D':
        '''

        '''
        return QVector3D()

    @staticmethod
    def getFontSize() -> 'int':
        '''

        '''
        return int()

    @staticmethod
    def getForegroundColor() -> 'QVector3D':
        '''

        '''
        return QVector3D()

    @staticmethod
    def getFrameSize() -> float:
        '''

        '''
        return float()

    @staticmethod
    def getImageDpi() -> 'int':
        '''

        '''
        return int()

    @staticmethod
    def getImagePath() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getPosition() -> 'QVector3D':
        '''

        '''
        return QVector3D()

    @staticmethod
    def getRotation() -> 'QVector3D':
        '''

        '''
        return QVector3D()

    @staticmethod
    def getText() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getUseImage() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def setBackgroundColor(color: 'QVector3D' = None):
        '''
        Set the background color for the message.
        '''
        pass

    @staticmethod
    def setFontSize(value: 'int' = None):
        '''
        Set the font size for the message text.
        '''
        pass

    @staticmethod
    def setForegroundColor(color: 'QVector3D' = None):
        '''
        Set the foreground color (e.g. text) for the message.
        '''
        pass

    @staticmethod
    def setFrameSize(value: float = 0.0):
        '''
        Set the frame size (outline width) of the message rectangle.
        '''
        pass

    @staticmethod
    def setImageDpi(dpi: 'int' = None):
        '''
        Set the dpi for the image.
        '''
        pass

    @staticmethod
    def setImagePath(path: 'str' = None):
        '''
        Set a path to an image file. See         vrdDeviceMessageData.setUseImage(value).
        '''
        pass

    @staticmethod
    def setPosition(position: 'QVector3D' = None):
        '''
        Set the position of the message.
        '''
        pass

    @staticmethod
    def setRotation(eulerRotation: 'QVector3D' = None):
        '''
        Set the orientation of the message.
        '''
        pass

    @staticmethod
    def setText(text: 'str' = None):
        '''
        Set the message text.
        '''
        pass

    @staticmethod
    def setUseImage(value: bool = False):
        '''
        Set if an image instead of text is used.
        '''
        pass

    @staticmethod
    def vrdDeviceMessageData():
        '''

        '''
        pass


class vrdLightTransform(vrdSceneObject):
    '''
    This class is used to change or propagate the transformation of a light.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def applyToCamera(cameraNode: 'vrdCameraNode' = None):
        '''
        Set the camera to the world transformation of the light.
        '''
        pass

    @staticmethod
    def setFromCamera(cameraNode: 'vrdCameraNode' = None):
        '''
        Set the light to the world transformation of the camera.
        '''
        pass

    @staticmethod
    def setFromNodes(nodes: List['vrdNode'] = None):
        '''
        Set the light to the bounding box center of a set of nodes.
        '''
        pass


class vrdProjectMergeSettings():
    '''
    Returns the index of the environment.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getEnvironmentImportOption() -> 'int':
        '''
        Returns the index of the environment.
        '''
        return int()

    @staticmethod
    def getImportVredAnimationClips() -> bool:
        '''
        Queries if animation clips should be merged during file import.
        '''
        return bool()

    @staticmethod
    def getImportVredAnimationCurves() -> bool:
        '''
        Queries if animation curves should be merged during file import.
        '''
        return bool()

    @staticmethod
    def getImportVredAnnotations() -> bool:
        '''
        Queries if annotations clips should be merged during file import.
        '''
        return bool()

    @staticmethod
    def getImportVredSequences() -> bool:
        '''
        Queries if sequences should be merged during file import.
        '''
        return bool()

    @staticmethod
    def getImportVredTouchSensors() -> bool:
        '''
        Queries if touch sensors should be merged during file import.
        '''
        return bool()

    @staticmethod
    def getImportVredVariants() -> bool:
        '''
        Queries if variants should be merged during file import.
        '''
        return bool()

    @staticmethod
    def getMergeVredMaterials() -> bool:
        '''
        Queries if materials should be merged during file import.
        '''
        return bool()

    @staticmethod
    def setEnvironmentImportOption(value: 'int' = None):
        '''
        Sets the index of the environment that should be used during file import
        '''
        pass

    @staticmethod
    def setImportVredAnimationClips(value: bool = False):
        '''
        Sets the flag indicating that animation clips should be merged during file import
        '''
        pass

    @staticmethod
    def setImportVredAnimationCurves(value: bool = False):
        '''
        Sets the flag indicating that animation curves should be merged during file import
        '''
        pass

    @staticmethod
    def setImportVredAnnotations(value: bool = False):
        '''
        Sets the flag indicating that annotations should be merged during file import
        '''
        pass

    @staticmethod
    def setImportVredSequences(value: bool = False):
        '''
        Sets the flag indicating that sequences should be merged during file import
        '''
        pass

    @staticmethod
    def setImportVredTouchSensors(value: bool = False):
        '''
        Sets the flag indicating that touch sensors should be merged during file import
        '''
        pass

    @staticmethod
    def setImportVredVariants(value: bool = False):
        '''
        Sets the flag indicating that variants should be merged during file import
        '''
        pass

    @staticmethod
    def setMergeVredMaterials(value: bool = False):
        '''
        Sets the flag indicating that materials should be merged during file import
        '''
        pass

    @staticmethod
    def vrdProjectMergeSettings():
        '''

        '''
        pass


class vrdLensFlareGlow(vrdLensFlareFxElement):
    '''
    This class is used for a a glowing shape. A short introduction can be found under     https://help.autodesk.com/view/VREDPRODUCTS/2020/ENU/?guid=VRED_Lights_About_Lens_Flares_and_Elements_html.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getImage() -> 'vrdImage':
        '''
        Return the current used texture.
        '''
        return vrdImage()

    @staticmethod
    def getShape() -> 'ElementShape':
        '''
        Get the current used shape.
        '''
        return ElementShape()

    @staticmethod
    def setImage(image: 'vrdImage' = None):
        '''
        Set an image for this element. You have to change the type to Texture to use the image for the glow effect.
        '''
        pass

    @staticmethod
    def setShape(shape: 'ElementShape' = None):
        '''
        Set a shape for the glow element.
        '''
        pass


class vrSceneplateService():
    '''
    Base class for all work with scene plate.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def clearSelection():
        '''
        Clears the current sceneplate selection.
        '''
        pass

    @staticmethod
    def copyNodes(nodes: List['vrdNode'] = None):
        '''
        Copy Nodes.
        '''
        pass

    @staticmethod
    def createGroupForNodes(nodes: List['vrdNode'] = None) -> 'vrdNode':
        '''
        All given nodes will be moved to a new created group.
        '''
        return vrdNode()

    @staticmethod
    def createNode(parent: 'vrdNode' = None, type: 'NodeType' = None, name: 'str' = None) -> 'vrdNode':
        '''
        Creates a new sceneplate node.
        '''
        return vrdNode()

    @staticmethod
    def createSwitchForNodes(nodes: List['vrdNode'] = None) -> 'vrdSwitchNode':
        '''
        All given nodes will be moved to a new created switch.
        '''
        return vrdSwitchNode()

    @staticmethod
    def cutNodes(nodes: List['vrdNode'] = None):
        '''
        Cut nodes.
        '''
        pass

    @staticmethod
    def duplicateNodes(nodes: List['vrdNode'] = None):
        '''
        Duplicate the nodes.
        '''
        pass

    @staticmethod
    def findNode(name: 'str' = None) -> 'vrdNode':
        '''
        Returns the first node found in sceneplate hierarchy with the given name.
        '''
        return vrdNode()

    @staticmethod
    def findNodes(name: 'str' = None) -> List['vrdNode']:
        '''
        Returns list of nodes found in sceneplate hierarchy with the given name.
        '''
        return [vrdNode()]

    @staticmethod
    def getAllNodes() -> List['vrdNode']:
        '''
        Returns all nodes (sceneplates, groups and switches)
        '''
        return [vrdNode()]

    @staticmethod
    def getAllSceneplates() -> List['vrdSceneplateNode']:
        '''
        Returns all sceneplates (excluding groups and switches)
        '''
        return [vrdSceneplateNode()]

    @staticmethod
    def getDefaultBackgroundColor() -> 'QVector3D':
        '''
        Returns the default background color for new created (text) sceneplates.
        '''
        return QVector3D()

    @staticmethod
    def getDefaultBackgroundTransparency() -> float:
        '''
        Returns the default background transparency for new created (text) sceneplates.
        '''
        return float()

    @staticmethod
    def getDefaultFont() -> 'str':
        '''
        Returns the default font for new created (text) sceneplates.
        '''
        return str()

    @staticmethod
    def getDefaultFontColor() -> 'QVector3D':
        '''
        Returns the default font color for new created (text) sceneplates.
        '''
        return QVector3D()

    @staticmethod
    def getPreviewImage(sceneplate: 'vrdNode' = None) -> 'QImage':
        '''
        Returns an image for a node, the image shows the current content of the sceneplate. If a group or switch is selected the content of the first visible sceneplate will be returned.
        '''
        return QImage()

    @staticmethod
    def getRootNode() -> 'vrdNode':
        '''
        Returns the root node of all sceneplates.
        '''
        return vrdNode()

    @staticmethod
    def getSelectedNodes() -> List['vrdNode']:
        '''
        Returns the currently selected nodes.
        '''
        return [vrdNode()]

    @staticmethod
    def loadNodes(filename: 'str' = None) -> bool:
        '''
        Load sceneplate nodes from file with the given name.
        '''
        return bool()

    @staticmethod
    def pasteAllAttributes(nodes: List['vrdSceneplateNode'] = None):
        '''
        Paste all attributes from the first node in copy buffer to the given nodes.
        '''
        pass

    @staticmethod
    def pasteColorCorrection(nodes: List['vrdSceneplateNode'] = None):
        '''
        Paste color correction setting from the first node in copy buffer to the given nodes.
        '''
        pass

    @staticmethod
    def pasteNodes(targetRoot: 'vrdNode' = None):
        '''
        Paste nodes.
        '''
        pass

    @staticmethod
    def pasteProperties(nodes: List['vrdSceneplateNode'] = None):
        '''
        Paste properties (all information about the content) from the first node in copy buffer to the given nodes.
        '''
        pass

    @staticmethod
    def pasteSizeAndPosition(nodes: List['vrdSceneplateNode'] = None):
        '''
        Paste size and position from the first node in copy buffer to the given nodes.
        '''
        pass

    @staticmethod
    def reloadWebPage(nodes: List['vrdNode'] = None):
        '''
        Reloads the web pages of the given nodes.
        '''
        pass

    @staticmethod
    def removeAllGroups():
        '''
        Removes all groups (not switches) from the sceneplate hierarchy.
        '''
        pass

    @staticmethod
    def removeNodes(nodes: List['vrdNode'] = None):
        '''
        Remove nodes from sceneplates.
        '''
        pass

    @staticmethod
    def saveNodes(filename: 'str' = None, nodes: List['vrdNode'] = None) -> 'bool':
        '''
        Saves the nodes to the file with the given name.
        '''
        return bool()

    @staticmethod
    def setDefaultBackgroundColor(color: 'QVector3D' = None):
        '''
        Sets the default background color for new created (text) sceneplates.
        '''
        pass

    @staticmethod
    def setDefaultBackgroundTransparency(transparency: float = 0.0):
        '''
        Sets the default background transparency for new created (text) sceneplates.
        '''
        pass

    @staticmethod
    def setDefaultFont(font: 'str' = None):
        '''
        Sets the default font for new created (text) sceneplates.
        '''
        pass

    @staticmethod
    def setDefaultFontColor(color: 'QVector3D' = None):
        '''
        Sets the default font color for new created (text) sceneplates.
        '''
        pass

    @staticmethod
    def setSelectedNodes(nodes: List['vrdNode'] = None):
        '''
        Sets the sceneplate selection.
        '''
        pass

    @staticmethod
    def nodesAdded(nodes: List['vrdNode'] = None):
        '''
        Notifies about nodes added to the sceneplate hierarchy.
        '''
        pass

    @staticmethod
    def nodesChanged():
        '''
        Notifies about changes in node structure, e.g. after a new scene.
        '''
        pass

    @staticmethod
    def nodesRemoved(nodes: List['vrdNode'] = None):
        '''
        Notifies about nodes removed from the sceneplate hierarchy.
        '''
        pass

    @staticmethod
    def nodesSelected(nodes: List['vrdNode'] = None):
        '''
        Notifies about selection changes of sceneplates.
        '''
        pass


class vrHMDService():
    '''
    Gives access to a Virtual Reality HMD (Head-mounted display) like the HTC Vive or Oculus.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getEyeGaze() -> 'vrdEyeGaze':
        '''
        Returns tracked eye gaze data while eye tracking is active. Without eye tracking returns the forward looking ray of the HMD user. The gaze ray is in world coordinates.
        '''
        return vrdEyeGaze()

    @staticmethod
    def getEyeTrackingEnabled() -> bool:
        '''
        Returns whether eye tracking should be enabled in VR. Please note this does not tell whether the HMD actually supports eye tracking or whether eye tracking is currently running. For the latter, use         vrHMDService.isEyeTrackingActive().
        '''
        return bool()

    @staticmethod
    def getFovealRegionSize() -> float:
        '''
        Gets the size of the foveal region in foveated rendering mode.
        '''
        return float()

    @staticmethod
    def getFoveatedRenderingEnabled() -> bool:
        '''
        Returns whether foveated rendering should be enabled in VR. Please note this does not tell whether the graphics card actually supports foveated rendering.
        '''
        return bool()

    @staticmethod
    def getFoveatedRenderingQuality(preset: 'FoveatedQualityPreset' = None) -> 'vrdFoveatedQuality':
        '''
        Gets the quality settings for a given preset.
        '''
        return vrdFoveatedQuality()

    @staticmethod
    def getFoveatedRenderingQualityPreset() -> 'FoveatedQualityPreset':
        '''
        Gets the quality preset that is used for foveated rendering. Get the individual settings for the preset with getFoveatedRenderingQuality(vrRenderTypes::FoveatedQualityPreset).
        '''
        return FoveatedQualityPreset()

    @staticmethod
    def getStarVRRenderSettings() -> 'vrdStarVRRenderSettings':
        '''
        Get current render settings that are specific for the StarVR HMD.
        '''
        return vrdStarVRRenderSettings()

    @staticmethod
    def isEyeTrackingActive() -> bool:
        '''
        Returns whether eye tracking is currently active. It can only be active if enabled, while in VR and if the HMD has an eye tracker supported by VRED.
        '''
        return bool()

    @staticmethod
    def isHmdActive() -> bool:
        '''
        Check if an HMD (VR) display mode is active.
        '''
        return bool()

    @staticmethod
    def setEyeTrackingEnabled(enabled: bool = False):
        '''
        Enables or disables eye tracking in VR if supported by the connected HMD. If the option is set before VR mode is enabled, it is applied when entering VR. Enable eye tracking for foveated rendering.
        '''
        pass

    @staticmethod
    def setFovealRegionSize(size: float = 0.0):
        '''
        Sets the size of the foveal region in foveated rendering mode. See         vrHMDService.setFoveatedRenderingEnabled(enabled).
        '''
        pass

    @staticmethod
    def setFoveatedRenderingCustomQuality(quality: 'vrdFoveatedQuality' = None):
        '''
        Allows to set a custom configuration for the shading qualities used in foveated rendering mode. Enable the custom quality by setting         vrHMDService.setFoveatedRenderingQualityPreset(preset) to Custom.
        '''
        pass

    @staticmethod
    def setFoveatedRenderingEnabled(enabled: bool = False):
        '''
        Enables or disables foveated rendering in VR. This requires the OpenGL Shading Rate Image extension which is supported by NVIDIA Turing graphics cards. If the option is set before VR mode is enabled, it is applied when entering VR.
        '''
        pass

    @staticmethod
    def setFoveatedRenderingQualityPreset(preset: 'FoveatedQualityPreset' = None):
        '''
        Set the quality preset used for foveated rendering.
        '''
        pass

    @staticmethod
    def setStarVRRenderSettings(settings: 'vrdStarVRRenderSettings' = None):
        '''
        Apply specific render settings for the StarVR HMD. Changes to these settings take effect on next activation of StarVR HMD mode.
        '''
        pass

    @staticmethod
    def eyeGazeChanged():
        '''
        This signal is triggered every frame while eye tracking is active.
        '''
        pass

    @staticmethod
    def foveatedRenderingStateChanged(enabled: bool = False):
        '''
        This signal is triggered when the state of foveated rendering changed.
        '''
        pass

    @staticmethod
    def hmdStatusChanged(active: bool = False):
        '''
        This signal is triggered when HMD (VR) display mode is switched on or off.
        '''
        pass


class vrdEyeGaze():
    '''
    Holds eye gaze data returned by     vrHMDService.getEyeGaze().

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getDirection() -> 'QVector3D':
        '''
        Get normalized direction of the gaze ray.
        '''
        return QVector3D()

    @staticmethod
    def getOrigin() -> 'QVector3D':
        '''
        Get origin of the gaze ray.
        '''
        return QVector3D()

    @staticmethod
    def isTracked() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def setDirection(direction: 'QVector3D' = None):
        '''
        Set normalized direction of the gaze ray.
        '''
        pass

    @staticmethod
    def setOrigin(origin: 'QVector3D' = None):
        '''
        Set origin of the gaze ray.
        '''
        pass

    @staticmethod
    def setTracked(tracked: bool = False):
        '''
        Set whether the eye gaze is tracked.
        '''
        pass

    @staticmethod
    def vrdEyeGaze():
        '''
        Default constructor.
        '''
        pass


class vrFileIOService():
    '''
    Aborts an import job.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def abortImport(importId: 'int' = None):
        '''
        Aborts an import job.
        '''
        pass

    @staticmethod
    def checkCadType(file: 'str' = None):
        '''
        Asynchronously starts querying the CAD file type of a file with the given file path. After succesfully querying the type or looking it up in a cache a fileTypeReceived signal is emited. This might be needed since some file extensions, i.E. .prt, can’t be clearly associated to a single file type.
        '''
        pass

    @staticmethod
    def getBaseFileSuffix(file: 'str' = None) -> 'str':
        '''
        Returns the file extension.
        '''
        return str()

    @staticmethod
    def getFileName() -> 'str':
        '''
        Gets the current file name.
        '''
        return str()

    @staticmethod
    def getFileTypeByFileName(file: 'str' = None) -> 'FileType':
        '''
        Gets the file type by file name.
        '''
        return FileType()

    @staticmethod
    def getImageReadFilter() -> 'str':
        '''
        This returns a space separated list of the the supported image file types that can be loaded.
        '''
        return str()

    @staticmethod
    def getImageWriteFilter() -> 'str':
        '''
        This returns a space separated list of the the supported image file types that can be saved.
        '''
        return str()

    @staticmethod
    def getImportSettings(fileType: 'FileType' = None) -> 'vrdAtfSettings':
        '''
        Gets the current import settings for a given CAD file type.
        '''
        return vrdAtfSettings()

    @staticmethod
    def getImportSettingsFromPreferences(fileType: 'FileType' = None) -> 'vrdAtfSettings':
        '''
        Gets the import settings from preferences.
        '''
        return vrdAtfSettings()

    @staticmethod
    def getMaxNumImportProcesses() -> 'int':
        '''
        Returns the maximum number import processes.
        '''
        return int()

    @staticmethod
    def getMergeProjectAnnotations() -> bool:
        '''
        Flag indicates if annotations contained in a project file should be merged after loading.
        '''
        return bool()

    @staticmethod
    def getProjectMergeSettings() -> 'vrdProjectMergeSettings':
        '''
        Gets the project merge settings.
        '''
        return vrdProjectMergeSettings()

    @staticmethod
    def getReadFileTypesFilter(mode: 'FileExtensionFilterMode' = None) -> 'str':
        '''
        Gets the filter for readable file types.
        '''
        return str()

    @staticmethod
    def getSceneImportSettings() -> 'vrdSceneImportSettings':
        '''
        Gets the scene current scene import settings.
        '''
        return vrdSceneImportSettings()

    @staticmethod
    def getStreamName() -> 'str':
        '''
        Gets the current stream name.
        '''
        return str()

    @staticmethod
    def getVREDDataDir() -> 'str':
        '''
        Gets the VRED data dir. This is the ‘data’ subfolder of the base directory.
        '''
        return str()

    @staticmethod
    def getVREDDir() -> 'str':
        '''
        Gets the base application directory.
        '''
        return str()

    @staticmethod
    def getVREDExamplesDir() -> 'str':
        '''
        Gets the VRED examples dir. This is the ‘examples’ subfolder of the base directory.
        '''
        return str()

    @staticmethod
    def getVREDFileTypesFilter() -> 'str':
        '''
        Gets the VRED file types filter.
        '''
        return str()

    @staticmethod
    def hasImportSettings(file: 'str' = None) -> bool:
        '''
        Determines if there are import settings for a given file.
        '''
        return bool()

    @staticmethod
    def hasSmartReferences(file: 'str' = None) -> bool:
        '''
        Queries for a OSB or VPB file if it contains smart references.
        '''
        return bool()

    @staticmethod
    def importAtfFile(file: 'str' = None, parent: 'vrdNode' = None) -> 'vrdNode':
        '''
        Imports a file with the ATF loader.
        '''
        return vrdNode()

    @staticmethod
    def importFiles(files: List['str'] = None, parent: 'vrdNode' = None, atfConversionOutputDir: 'str' = None, loadConvertedAtfFiles: bool = False, removeConvertedAtfFiles: bool = False, loadBehavior: bool = False) -> 'int':
        '''
        Imports a list of files.
        '''
        return int()

    @staticmethod
    def importMissingFiles(node: 'vrdNode' = None, removeConvertedAtfFiles: bool = False) -> 'int':
        '''
        Imports missing files from a scene node.
        '''
        return int()

    @staticmethod
    def inlineImageSequences():
        '''
        Inlines all image sequences.
        '''
        pass

    @staticmethod
    def isAtfFile(file: 'str' = None) -> bool:
        '''
        Checks if the given file can be imported with ATF.
        '''
        return bool()

    @staticmethod
    def isConvertedAtfTree(root: 'vrdNode' = None) -> bool:
        '''
        Checks if a scene node is a converted ATF tree.
        '''
        return bool()

    @staticmethod
    def isSupportedFile(file: 'str' = None) -> bool:
        '''
        Checks if a given file can be imported.
        '''
        return bool()

    @staticmethod
    def isVredProject(file: 'str' = None) -> bool:
        '''
        Checks if the given file is a VRED project.
        '''
        return bool()

    @staticmethod
    def jobBelongsToImport(jobId: 'int' = None, importId: 'int' = None) -> 'bool':
        '''
        Checks if an import identifier belongs to a given job.
        '''
        return bool()

    @staticmethod
    def loadFile(file: 'str' = None) -> bool:
        '''
        Loads a file.
        '''
        return bool()

    @staticmethod
    def newFile():
        '''
        Destroy the current scene and create a new scene with an empty file name.
        '''
        pass

    @staticmethod
    def reimportNodes(nodes: List['vrdNode'] = None) -> List['vrdNode']:
        '''
        Reimports a list of nodes with referenced source files.
        '''
        return [vrdNode()]

    @staticmethod
    def saveFile(file: 'str' = None) -> bool:
        '''
        Saves a file.
        '''
        return bool()

    @staticmethod
    def setImportSettings(fileType: 'FileType' = None, settings: 'vrdAtfSettings' = None):
        '''
        Sets the import settings for a given file type.
        '''
        pass

    @staticmethod
    def setMaxNumImportProcesses(value: 'int' = None):
        '''
        Sets the maximum number of import processes.
        '''
        pass

    @staticmethod
    def setProjectMergeSettings(settings: 'vrdProjectMergeSettings' = None):
        '''
        Sets the project merge settings.
        '''
        pass

    @staticmethod
    def setSceneImportSettings(settings: 'vrdSceneImportSettings' = None):
        '''
        Sets the scene import settings.
        '''
        pass

    @staticmethod
    def undoInlineImageSequences():
        '''
        Removes all inlined image sequences.
        '''
        pass

    @staticmethod
    def validateAtfTree(file: 'str' = None, root: 'vrdNode' = None, parent: 'vrdNode' = None):
        '''

        '''
        pass

    @staticmethod
    def addedGeometry(nodeid: 'int' = None, preLoading: bool = False):
        '''

        '''
        pass

    @staticmethod
    def addLoadedMaterial():
        '''

        '''
        pass

    @staticmethod
    def childFileImportAdded(jobId: 'int' = None, parentFile: 'str' = None, childFile: 'str' = None):
        '''
        Emitted when a child cad file import was added.
        '''
        pass

    @staticmethod
    def childFileImportFinished(jobId: 'int' = None, parentFile: 'str' = None, childFile: 'str' = None):
        '''
        Emitted when a child cad file import has finished.
        '''
        pass

    @staticmethod
    def childrenFileConversionFinished(jobId: 'int' = None, parentFile: 'str' = None, durationInSeconds: float = 0.0):
        '''
        Emitted when the conversion of all child cad files has finsished.
        '''
        pass

    @staticmethod
    def conversionFinished(importId: 'int' = None, durationInSeconds: float = 0.0):
        '''
        Emitted when a file conversion job has finished.
        '''
        pass

    @staticmethod
    def conversionProgressChanged(importId: 'int' = None, percent: 'int' = None, status: 'str' = None):
        '''
        Emitted when the progress of the file conversion changes.
        '''
        pass

    @staticmethod
    def exportedFile(filename: 'str' = None):
        '''
        Emitted after a file has been exported.
        '''
        pass

    @staticmethod
    def fileAddedToLoadQueue(jobId: 'int' = None, file: 'str' = None):
        '''
        Emitted when a new cad file has been added to the load queue.
        '''
        pass

    @staticmethod
    def fileAddedToScene(jobId: 'int' = None, file: 'str' = None, node: 'vrdNode' = None):
        '''
        Emitted when a cad file has been added to the current scene.
        '''
        pass

    @staticmethod
    def fileConversionAborted(jobId: 'int' = None, file: 'str' = None):
        '''
        Emitted when a cad file conversion has been aborted.
        '''
        pass

    @staticmethod
    def fileConversionFailed(jobId: 'int' = None, file: 'str' = None, description: 'str' = None):
        '''
        Emitted when a cad file conversion has failed.
        '''
        pass

    @staticmethod
    def fileConversionFinished(jobId: 'int' = None, file: 'str' = None, state: 'JobState' = None, durationInSeconds: float = 0.0):
        '''
        Emitted when the conversion of a cad file has finished.
        '''
        pass

    @staticmethod
    def fileConversionProgressChanged(jobId: 'int' = None, file: 'str' = None, percent: 'int' = None, status: 'str' = None):
        '''
        Emitted when the progress of a cad file conversion has changed.
        '''
        pass

    @staticmethod
    def fileConversionStarted(jobId: 'int' = None, file: 'str' = None):
        '''
        Emiited when the conversion of a cad file has started.
        '''
        pass

    @staticmethod
    def fileConversionSucceded(jobId: 'int' = None, file: 'str' = None):
        '''
        Emitted when a cad file conversion has succeded.
        '''
        pass

    @staticmethod
    def fileLoadingFailed(jobId: 'int' = None, file: 'str' = None, description: 'str' = None):
        '''
        Emitted when loading of an imported cad file has failed.
        '''
        pass

    @staticmethod
    def fileLoadingFinished(jobId: 'int' = None, file: 'str' = None, state: 'JobState' = None):
        '''
        Emitted when loading of an imported cad file has finished.
        '''
        pass

    @staticmethod
    def fileLoadingProgressChanged(jobId: 'int' = None, file: 'str' = None, percent: 'int' = None, status: 'str' = None):
        '''
        Emitted when the loading progress of an imported cad file changes.
        '''
        pass

    @staticmethod
    def fileLoadingStarted(jobId: 'int' = None, file: 'str' = None):
        '''
        Emitted when loading of an imported cad file starts.
        '''
        pass

    @staticmethod
    def fileTypeReceived(file: 'str' = None, fileType: 'FileType' = None):
        '''
        Emitted when a new cad file type has been received.
        '''
        pass

    @staticmethod
    def importedFile(filename: 'str' = None):
        '''
        Emitted after a file has been imported.
        '''
        pass

    @staticmethod
    def importFinished(importId: 'int' = None, durationInSeconds: float = 0.0):
        '''
        Emitted when an import job has finished.
        '''
        pass

    @staticmethod
    def importProgressChanged(importId: 'int' = None, percent: 'int' = None):
        '''
        Emitted when the import progress is updated.
        '''
        pass

    @staticmethod
    def loadedGeometry(filename: 'str' = None, nodeid: 'int' = None):
        '''
        Emitted after a geometry has been loaded.
        '''
        pass

    @staticmethod
    def newScene():
        '''
        Emitted after a new scene is created.
        '''
        pass

    @staticmethod
    def preExportGeometry(nodeid: 'int' = None, addActionAttachment: bool = False):
        '''

        '''
        pass

    @staticmethod
    def preNewScene():
        '''
        Emitted before a new scene is created.
        '''
        pass

    @staticmethod
    def progress(p: 'int' = None):
        '''
        Periodically emitted to provide a percentage value of how much of the file has been loaded.
        '''
        pass

    @staticmethod
    def project(loading: bool = False):
        '''

        '''
        pass

    @staticmethod
    def projectLoad(filename: 'str' = None):
        '''
        Emitted when project loading starts.
        '''
        pass

    @staticmethod
    def projectLoaded(filename: 'str' = None):
        '''
        Emitted after a project has been successfully loaded. This signal is not sent if loading aborted with an error.
        '''
        pass

    @staticmethod
    def projectLoadFinished(filename: 'str' = None, success: bool = False):
        '''
        Emitted after a project has been loaded The signal will always be sent whether loading succeeded or not.
        '''
        pass

    @staticmethod
    def projectMerged():
        '''
        Emitted after a project has been merged.
        '''
        pass

    @staticmethod
    def projectSave(filename: 'str' = None):
        '''
        Signal is emitted when a project is about to be saved.
        '''
        pass

    @staticmethod
    def projectSaved(filename: 'str' = None):
        '''
        Signal is emitted when a project has finished saving.
        '''
        pass

    @staticmethod
    def savedGeometry(filename: 'str' = None):
        '''
        Emitted after a geometry has been saved.
        '''
        pass

    @staticmethod
    def sequences(xml: 'str' = None, merge: bool = False):
        '''

        '''
        pass

    @staticmethod
    def startingConversion(importId: 'int' = None, fileCount: 'int' = None):
        '''
        Emitted when file conversion starts.
        '''
        pass

    @staticmethod
    def startingImport(importId: 'int' = None, fileCount: 'int' = None):
        '''
        Emitted when a file import job is started.
        '''
        pass


class vrdCameraCollider(vrdSceneObject):
    '''
    This class provides access to the camera collision configuration.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def addNode(nodeName: 'str' = None):
        '''
        Add a not to collide with the camera.
        '''
        pass

    @staticmethod
    def buildCollisionStructure():
        '''
        Starts the precalculation of the collision structures.
        '''
        pass

    @staticmethod
    def getCollisionStructureBuildMethod() -> 'CollisionStructureBuildMethod':
        '''
        Returns the collision structure build method.
        '''
        return CollisionStructureBuildMethod()

    @staticmethod
    def getDistance() -> float:
        '''
        Returns the closest allowed distance from the camera to a colliding object.
        '''
        return float()

    @staticmethod
    def getEnabled() -> bool:
        '''
        Returns if camera collisions are enabled.
        '''
        return bool()

    @staticmethod
    def getNodes() -> List['str']:
        '''
        Returns the list of node names that can collide with the camera.
        '''
        return [str()]

    @staticmethod
    def getSlide() -> bool:
        '''
        Returns if the slide mode is activated.
        '''
        return bool()

    @staticmethod
    def removeNode(nodeName: 'str' = None):
        '''
        Remove a node from the camera collision detection.
        '''
        pass

    @staticmethod
    def setCollisionStructureBuildMethod(method: 'CollisionStructureBuildMethod' = None):
        '''
        Sets the collision structure build method.
        '''
        pass

    @staticmethod
    def setDistance(distance: float = 0.0):
        '''
        Sets the closest allowed distance from the camera to a colliding object.
        '''
        pass

    @staticmethod
    def setEnabled(enabled: bool = False):
        '''
        Enable / disable camera collisions.
        '''
        pass

    @staticmethod
    def setNodes(nodeNames: List['str'] = None):
        '''
        Add nodes allowed to collide with the camera.
        '''
        pass

    @staticmethod
    def setSlide(enabled: bool = False):
        '''
        Enable / disable the slide mode.
        '''
        pass


class vrdLensFlareRing(vrdLensFlareFxElement):
    '''
    Get used chromatic aberration values as RGB.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getChromaticAberration() -> 'QVector3D':
        '''
        Get used chromatic aberration values as RGB.
        '''
        return QVector3D()

    @staticmethod
    def getIsChromaticAberrationActive() -> bool:
        '''
        Get activation state the usage of chromatic aberration.
        '''
        return bool()

    @staticmethod
    def getNumberOfStreaks() -> 'int':
        '''
        Get how many arms a Ring element has.
        '''
        return int()

    @staticmethod
    def getStreakThickness() -> float:
        '''
        Get the thickness of the segments.
        '''
        return float()

    @staticmethod
    def getThickness() -> float:
        '''
        Get the current used thickness of the effect.
        '''
        return float()

    @staticmethod
    def setChromaticAberration(chromaticAberration: 'QVector3D' = None):
        '''
        Use chromatic aberration with the lens flare element to distort the colors.
        '''
        pass

    @staticmethod
    def setIsChromaticAberrationActive(isActive: bool = False):
        '''
        Activate the usage of chromatic aberration.
        '''
        pass

    @staticmethod
    def setNumberOfStreaks(numberOfStreaks: 'int' = None):
        '''
        Use to set how many arms a Ring element has.
        '''
        pass

    @staticmethod
    def setStreakThickness(streakThickness: float = 0.0):
        '''
        Controls the thickness of the segments.
        '''
        pass

    @staticmethod
    def setThickness(thickness: float = 0.0):
        '''
        Controls the thickness of the effect.
        '''
        pass


class vrdDeviceAction(vrdObject):
    '''
    Represents an action that is part of an interaction.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getName() -> 'str':
        '''
        Gets the name of the action.
        '''
        return str()

    @staticmethod
    def signal() -> 'vrdDeviceActionSignal':
        '''
        Gets the signal that is sent, when the action is triggered.
        '''
        return vrdDeviceActionSignal()


class vrdParentConstraintNode(vrdConstraintNode):
    '''
    This class gives access to an parent constraint object in VRED. An parent constraint will synchronize the transformation of a source and a target. If there are multiple sources, the transformation is calculated as the weighted average value of it.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getMaintainOffset() -> bool:
        '''
        Returns if the constraint maintains the offset to its sources.
        '''
        return bool()

    @staticmethod
    def setMaintainOffset(value: bool = False):
        '''
        Sets if the constraint should maintain the offset to the sources when creating it.
        '''
        pass


class vrImmersiveInteractionTypes():
    '''
    This defines where the user can teleport to.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdSessionUser(vrdObject):
    '''
    User information for collaboration sessions.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getCameraMatrix() -> 'QMatrix4x4':
        '''

        '''
        return QMatrix4x4()

    @staticmethod
    def getDeviceImage() -> 'QImage':
        '''

        '''
        return QImage()

    @staticmethod
    def getDeviceName() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getHasLeftHand() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def getHasRightHand() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def getHeadNode() -> 'vrdNode':
        '''

        '''
        return vrdNode()

    @staticmethod
    def getHeadTrackingMatrix() -> 'QMatrix4x4':
        '''

        '''
        return QMatrix4x4()

    @staticmethod
    def getIsHmd() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def getIsRemote() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def getLeftHandNode() -> 'vrdNode':
        '''

        '''
        return vrdNode()

    @staticmethod
    def getLeftHandTrackingMatrix() -> 'QMatrix4x4':
        '''

        '''
        return QMatrix4x4()

    @staticmethod
    def getProjectCRC() -> 'int':
        '''

        '''
        return int()

    @staticmethod
    def getProjectName() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getRightHandNode() -> 'vrdNode':
        '''

        '''
        return vrdNode()

    @staticmethod
    def getRightHandTrackingMatrix() -> 'QMatrix4x4':
        '''

        '''
        return QMatrix4x4()

    @staticmethod
    def getRoom() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getSpectatorCount() -> 'int':
        '''

        '''
        return int()

    @staticmethod
    def getTorsoNode() -> 'vrdNode':
        '''

        '''
        return vrdNode()

    @staticmethod
    def getUserColor() -> 'QColor':
        '''

        '''
        return QColor()

    @staticmethod
    def getUserIcon() -> 'QImage':
        '''

        '''
        return QImage()

    @staticmethod
    def getUserId() -> 'int':
        '''

        '''
        return int()

    @staticmethod
    def getUserName() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def sendPython(command: 'str' = None, commandId: 'str' = None):
        '''
        Sends a python command to this users.
        '''
        pass


class vrdTonemapper(vrdSceneObject):
    '''
    Class to access tonemapping functionality.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getBlueResponseCurve() -> List['QVector2D']:
        '''
        Returns the blue response curve.
        '''
        return [QVector2D()]

    @staticmethod
    def getCandelaMappingMode() -> 'CameraCandelaMapping':
        '''
        Returns the candela mapping mode.
        '''
        return CameraCandelaMapping()

    @staticmethod
    def getCandelaRange() -> 'QVector2D':
        '''
        Returns the candela range.
        '''
        return QVector2D()

    @staticmethod
    def getColorspace() -> 'CameraColorspace':
        '''
        Returns the colorspace.
        '''
        return CameraColorspace()

    @staticmethod
    def getContrast() -> float:
        '''
        Returns the contrast.
        '''
        return float()

    @staticmethod
    def getExposure() -> float:
        '''
        Returns the exposure of the camera.
        '''
        return float()

    @staticmethod
    def getGreenResponseCurve() -> List['QVector2D']:
        '''
        Returns the green response curve.
        '''
        return [QVector2D()]

    @staticmethod
    def getISO() -> float:
        '''
        Returns the ISO of the camera.
        '''
        return float()

    @staticmethod
    def getLuminanceResponseCurve() -> List['QVector2D']:
        '''
        Returns the luminance response curve.
        '''
        return [QVector2D()]

    @staticmethod
    def getRedResponseCurve() -> List['QVector2D']:
        '''
        Returns the red response curve.
        '''
        return [QVector2D()]

    @staticmethod
    def getResponseCurveMode() -> 'CameraResponseCurveMode':
        '''
        Returns the active response curve mode.
        '''
        return CameraResponseCurveMode()

    @staticmethod
    def getSensorResponse() -> 'CameraSensorResponse':
        '''
        Returns the sensor response of the camera.
        '''
        return CameraSensorResponse()

    @staticmethod
    def getShoulderStrength() -> float:
        '''
        Returns the shoulder strength.
        '''
        return float()

    @staticmethod
    def getToeStrength() -> float:
        '''
        Returns the toe strength.
        '''
        return float()

    @staticmethod
    def getTonemapperType() -> 'CameraTonemapper':
        '''
        Returns the active tonemapper type.
        '''
        return CameraTonemapper()

    @staticmethod
    def getWhiteBalance() -> float:
        '''
        Returns the white balance of the camera.
        '''
        return float()

    @staticmethod
    def getWhitePoint() -> float:
        '''
        Returns the white point of the camera.
        '''
        return float()

    @staticmethod
    def loadResponseCurve(fileName: 'str' = None) -> bool:
        '''
        Loads a saved response curve from a file.
        '''
        return bool()

    @staticmethod
    def saveResponseCurve(fileName: 'str' = None) -> bool:
        '''
        Saves the response curve to a file.
        '''
        return bool()

    @staticmethod
    def setBlueResponseCurve(values: List['QVector2D'] = None):
        '''
        Sets the blue response curve.
        '''
        pass

    @staticmethod
    def setCandelaMappingMode(mapping: 'CameraCandelaMapping' = None):
        '''
        Sets the candela mapping mode.
        '''
        pass

    @staticmethod
    def setCandelaRange(rangeMinMax: 'QVector2D' = None):
        '''
        Sets the candela range.
        '''
        pass

    @staticmethod
    def setColorspace(value: 'CameraColorspace' = None):
        '''
        Sets the colorspace.
        '''
        pass

    @staticmethod
    def setContrast(value: float = 0.0):
        '''
        Sets the contrast.
        '''
        pass

    @staticmethod
    def setExposure(value: float = 0.0):
        '''
        Sets the exposure of the camera.
        '''
        pass

    @staticmethod
    def setGreenResponseCurve(values: List['QVector2D'] = None):
        '''
        Sets the green response curve.
        '''
        pass

    @staticmethod
    def setISO(value: float = 0.0):
        '''
        Sets the ISO of the camera.
        '''
        pass

    @staticmethod
    def setLuminanceResponseCurve(values: List['QVector2D'] = None):
        '''
        Sets the luminance response curve.
        '''
        pass

    @staticmethod
    def setRedResponseCurve(values: List['QVector2D'] = None):
        '''
        Sets the red response curve.
        '''
        pass

    @staticmethod
    def setResponseCurveMode(mode: 'CameraResponseCurveMode' = None):
        '''
        Sets the response curve mode.
        '''
        pass

    @staticmethod
    def setSensorResponse(value: 'CameraSensorResponse' = None):
        '''
        Sets the sensor response of the camera.
        '''
        pass

    @staticmethod
    def setShoulderStrength(value: float = 0.0):
        '''
        Sets the shoulder strength.
        '''
        pass

    @staticmethod
    def setToeStrength(value: float = 0.0):
        '''
        Sets the toe strength.
        '''
        pass

    @staticmethod
    def setTonemapperType(mapper: 'CameraTonemapper' = None):
        '''
        Sets the tonemapper type.
        '''
        pass

    @staticmethod
    def setWhiteBalance(value: float = 0.0):
        '''
        Sets the white balance of the camera.
        '''
        pass

    @staticmethod
    def setWhitePoint(value: float = 0.0):
        '''
        Sets the white point of the camera.
        '''
        pass


class vrdLensFlareStreak(vrdLensFlareFxElement):
    '''
    This class is used for a streaking effect, like what you get when using an anamorphic lens. Use it for things such as street lamps at night, objects with stationary lights, or a light source that’s partially obscured by an object, like a tree or building’s edge. A short introduction can be found under     https://help.autodesk.com/view/VREDPRODUCTS/2020/ENU/?guid=VRED_Lights_About_Lens_Flares_and_Elements_html.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getOffset() -> 'QVector2D':
        '''
        Get offset the streak effect from the center of the light source.
        '''
        return QVector2D()

    @staticmethod
    def getThickness() -> float:
        '''
        Get the current used thickness of the effect.
        '''
        return float()

    @staticmethod
    def setOffset(offset: 'QVector2D' = None):
        '''
        Use to offset the streak effect from the center of the light source. Negative values will move the streak to the left and below the light. Positive will move it to the right and above the light.
        '''
        pass

    @staticmethod
    def setThickness(thickness: float = 0.0):
        '''
        Controls the thickness of the effect.
        '''
        pass


class vrReferenceTypes():
    '''
    vrRenderTypes

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdImage(vrdSceneObject):
    '''
    Class that gives access to VRED’s internal image format.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAbsolutePath() -> 'str':
        '''
        Returns the absolute path of the image.
        '''
        return str()

    @staticmethod
    def getDimension() -> 'QSize':
        '''
        Gets the dimension of the image.
        '''
        return QSize()

    @staticmethod
    def getHeight() -> float:
        '''
        Gets the height of the image.
        '''
        return float()

    @staticmethod
    def getWidth() -> float:
        '''
        Gets the width of the image.
        '''
        return float()

    @staticmethod
    def hasAlphaChannel() -> bool:
        '''
        Determines if the image has an alpha channel.
        '''
        return bool()

    @staticmethod
    def toQIcon() -> 'QIcon':
        '''
        Returns the image data as a QIcon.
        '''
        return QIcon()

    @staticmethod
    def toQImage() -> 'QImage':
        '''
        Returns the image data as a QImage.
        '''
        return QImage()


class vrdStarVRRenderSettings():
    '''
    Holds render settings for StarVR HMD. Changes to these settings take effect on next activation of StarVR HMD mode.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getFoveatedFovFactor() -> float:
        '''
        Returns the FOV factor used for native foveated rendering.
        '''
        return float()

    @staticmethod
    def getFoveatedResolutionScale() -> float:
        '''
        Returns the resolution scale factor for the foveated area (high-resolution) used in native foveated rendering mode.
        '''
        return float()

    @staticmethod
    def getFrontViewResolutionScale() -> float:
        '''
        Returns resolution scale for front viewports.
        '''
        return float()

    @staticmethod
    def getNonFoveatedResolutionScale() -> float:
        '''
        Returns the resolution scale factor for the pheripheral area (low-resolution) used in native foveated rendering mode.
        '''
        return float()

    @staticmethod
    def getSideViewResolutionScale() -> float:
        '''
        Returns resolution scale for side viewports.
        '''
        return float()

    @staticmethod
    def getUseNativeFoveatedRendering() -> bool:
        '''
        Return whether native StarVR foveated rendering is used.
        '''
        return bool()

    @staticmethod
    def getUseSingleTexture() -> bool:
        '''
        Return whether only one texture per eye is rendered.
        '''
        return bool()

    @staticmethod
    def setFoveatedFovFactor(fovFactor: float = 0.0):
        '''
        Set field of view factor for native foveated rendering. Defines which percentage of the whole FOV per eye is used for the high-resolution area.
        '''
        pass

    @staticmethod
    def setFoveatedResolutionScale(scale: float = 0.0):
        '''
        Set resolution scale for foveated area (high-resolution) used in native foveated rendering mode. 1.0 corresponds to 100% (maximum) resolution.
        '''
        pass

    @staticmethod
    def setFrontViewResolutionScale(scale: float = 0.0):
        '''
        Set resolution scale for front viewports.
        '''
        pass

    @staticmethod
    def setNonFoveatedResolutionScale(scale: float = 0.0):
        '''
        Set resolution scale for pheripheral area (low-resolution) used in native foveated rendering mode.
        '''
        pass

    @staticmethod
    def setSideViewResolutionScale(scale: float = 0.0):
        '''
        Set resolution scale for side viewports.
        '''
        pass

    @staticmethod
    def setUseNativeFoveatedRendering(on: bool = False):
        '''
        Toggle native StarVR foveated rendering. In this mode, the scene is rendered 2 times per eye: once into a larger low resolution viewport for peripheral vision, and once into a smaller high resolution viewport that is moved by eye tracking to the position you’re currently looking at. Change the size of the tracked viewport with         vrdStarVRRenderSettings.setFoveatedFovFactor(fovFactor), and its resolution with vrdStarVRRenderSettings.setFoveatedResolutionScale(scale).
        '''
        pass

    @staticmethod
    def setUseSingleTexture(on: bool = False):
        '''
        Enable this option to render only one texture per eye, instead of the two ‘front’ and ‘side’ view textures. This option is only applied if native foveated rendering is off.
        '''
        pass

    @staticmethod
    def vrdStarVRRenderSettings():
        '''
        Default constructor.
        '''
        pass


class vrAnnotationTypes():
    '''
    vrCADFileTypes

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdImmersiveTool(vrdObject):
    '''
    VR tool object.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getCheckable() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def getChecked() -> bool:
        '''

        '''
        return bool()

    @staticmethod
    def getCheckedCommand() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getClickedCommand() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getGroup() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getHideAway() -> bool:
        '''
        Returns if the tool is hidden from the VR menu.
        '''
        return bool()

    @staticmethod
    def getIcon() -> 'QIcon':
        '''

        '''
        return QIcon()

    @staticmethod
    def getIsInternal() -> bool:
        '''
        Returns if the tool is marked as internal. All tools that are created internally by default will have this flag set.
        '''
        return bool()

    @staticmethod
    def getName() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getText() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getUncheckedCommand() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getViewContent() -> 'str':
        '''

        '''
        return str()

    @staticmethod
    def getViewWidget() -> 'QWidget':
        '''

        '''
        return QWidget()

    @staticmethod
    def hideAway(value: bool = False):
        '''
        If value is True, this tool is not visible on the VR menu.
        '''
        pass

    @staticmethod
    def setCheckable(value: bool = False):
        '''
        Sets the tool button to checkable.
        '''
        pass

    @staticmethod
    def setChecked(value: bool = False):
        '''
        Sets the tool button to checked.
        '''
        pass

    @staticmethod
    def setCheckedCommand(value: 'str' = None):
        '''
        Sets the Python command that is executed when the button is checked.
        '''
        pass

    @staticmethod
    def setClickedCommand(value: 'str' = None):
        '''
        Sets the Python command that is executed on button click.
        '''
        pass

    @staticmethod
    def setGroup(value: 'str' = None):
        '''
        Changes the group in which the tool is inserted.
        '''
        pass

    @staticmethod
    def setIcon(icon: 'QIcon' = None):
        '''
        Sets the icon displayed on the VR tools menu.
        '''
        pass

    @staticmethod
    def setIconData(data: 'str' = None, format: 'str' = None):
        '''
        Use a base64 encoded string to set the icon.
        '''
        pass

    @staticmethod
    def setIconPath(iconPath: 'str' = None):
        '''
        Use the image at the given path as an icon.
        '''
        pass

    @staticmethod
    def setOnOffIconData(onData: 'str' = None, offData: 'str' = None, format: 'str' = None):
        '''
        Use two base64 encoded strings to set the icon.
        '''
        pass

    @staticmethod
    def setText(text: 'str' = None):
        '''
        Changes the text displayed on the VR tools menu.
        '''
        pass

    @staticmethod
    def setUncheckedCommand(value: 'str' = None):
        '''
        Sets the Python command that is executed when the button is unchecked.
        '''
        pass

    @staticmethod
    def setViewContent(value: 'str' = None):
        '''
        On tool button press, the given content is displayed on a menu panel.
        '''
        pass

    @staticmethod
    def setViewWidget(widget: 'QWidget' = None):
        '''
        On tool button press, the given content is displayed on a menu panel.
        '''
        pass

    @staticmethod
    def signal() -> 'vrdImmersiveToolSignal':
        '''

        '''
        return vrdImmersiveToolSignal()


class vrdCameraBaseNode(vrdTransformNode):
    '''
    This class serves as base class for     vrdCameraNode and vrdViewpointNode.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def adjustAtPosition(root: 'vrdNode' = None):
        '''
        Adjust the look at point onto the surface of the closest object in the direction of viewing.
        '''
        pass

    @staticmethod
    def getApplyColorCorrectionToBackground() -> bool:
        '''
        Returns if color correction should be applied to background.
        '''
        return bool()

    @staticmethod
    def getApplyColorCorrectionToForeground() -> bool:
        '''
        Returns if color correction should be applied to foreground.
        '''
        return bool()

    @staticmethod
    def getBlendAmount() -> float:
        '''
        Returns the amount of blending used.
        '''
        return float()

    @staticmethod
    def getBlendMapLeftEye() -> 'vrdImage':
        '''
        Returns the blending map for the left eye of the camera.
        '''
        return vrdImage()

    @staticmethod
    def getBlendMapRightEye() -> 'vrdImage':
        '''
        Returns the blending map for the right eye of the camera.
        '''
        return vrdImage()

    @staticmethod
    def getBlendMode() -> 'BlendMode':
        '''
        Returns the current blending mode.
        '''
        return BlendMode()

    @staticmethod
    def getColorCorrectionBrightness() -> float:
        '''
        Returns the color correction brightness.
        '''
        return float()

    @staticmethod
    def getColorCorrectionContrast() -> float:
        '''
        Returns the color correction contrast.
        '''
        return float()

    @staticmethod
    def getColorCorrectionHueOffset() -> float:
        '''
        Returns the color correction hue offset.
        '''
        return float()

    @staticmethod
    def getColorCorrectionSaturation() -> float:
        '''
        Returns the color correction saturation.
        '''
        return float()

    @staticmethod
    def getCustomFrustumEnabled() -> bool:
        '''
        Returns the state of the custom frustum.
        '''
        return bool()

    @staticmethod
    def getCustomProjectionMatrix() -> 'QMatrix4x4':
        '''
        Returns the custom 4x4 projection matrix.
        '''
        return QMatrix4x4()

    @staticmethod
    def getDepthOfField() -> bool:
        '''
        Returns the current depth of field state of the camera.
        '''
        return bool()

    @staticmethod
    def getDistanceFog() -> bool:
        '''
        Returns the current activation state of distance-fog.
        '''
        return bool()

    @staticmethod
    def getDistanceFogColor() -> 'QColor':
        '''
        Get the color of distance-fog.
        '''
        return QColor()

    @staticmethod
    def getDistanceFogDensity() -> float:
        '''
        Returns the density of distance-fog.
        '''
        return float()

    @staticmethod
    def getDistanceFogEnableNoiseSizeUniform() -> bool:
        '''
        Returns the uniform noise size flag for distance-fog.
        '''
        return bool()

    @staticmethod
    def getDistanceFogFalloff() -> 'FogFalloffMode':
        '''
        Returns the falloff type of distance-fog.
        '''
        return FogFalloffMode()

    @staticmethod
    def getDistanceFogNoise() -> float:
        '''
        Returns the noise intensity of distance-fog.
        '''
        return float()

    @staticmethod
    def getDistanceFogNoiseOffset() -> 'QVector3D':
        '''
        Returns the noise offset of distance-fog.
        '''
        return QVector3D()

    @staticmethod
    def getDistanceFogNoiseSize() -> 'QVector3D':
        '''
        Returns the noise size of distance-fog.
        '''
        return QVector3D()

    @staticmethod
    def getDistanceFogRange() -> float:
        '''
        Get the near value of distance-fog.
        '''
        return float()

    @staticmethod
    def getDistortion() -> bool:
        '''
        Returns if distortion is enabled.
        '''
        return bool()

    @staticmethod
    def getDistortionMapLeftEye() -> 'vrdImage':
        '''
        Returns the distortion map for the left eye of the camera.
        '''
        return vrdImage()

    @staticmethod
    def getDistortionMapRightEye() -> 'vrdImage':
        '''
        Returns the distortion map for the left right of the camera.
        '''
        return vrdImage()

    @staticmethod
    def getFarClippingDistance() -> float:
        '''
        Returns the distance of the far clipping plane.
        '''
        return float()

    @staticmethod
    def getFocalLength() -> float:
        '''
        Returns the focal length.
        '''
        return float()

    @staticmethod
    def getFocusDistance() -> float:
        '''
        Returns the focus distance.
        '''
        return float()

    @staticmethod
    def getFov() -> float:
        '''
        Gets the field of view.
        '''
        return float()

    @staticmethod
    def getFovMode() -> 'FovMode':
        '''
        Returns the field of view mode.
        '''
        return FovMode()

    @staticmethod
    def getFromAtUp() -> 'vrCameraFromAtUp':
        '''
        Gets the from at and up vectors in local space.
        '''
        return vrCameraFromAtUp()

    @staticmethod
    def getFromAtUpWorld() -> 'vrCameraFromAtUp':
        '''
        Returns from, at and up vectors in world space.
        '''
        return vrCameraFromAtUp()

    @staticmethod
    def getFrustum() -> 'QVector4D':
        '''
        Returns the custom frustum.
        '''
        return QVector4D()

    @staticmethod
    def getFrustumBottom() -> float:
        '''
        Returns the size bottom side of the frustum.
        '''
        return float()

    @staticmethod
    def getFrustumLeft() -> float:
        '''
        Returns the size left side of the frustum.
        '''
        return float()

    @staticmethod
    def getFrustumRight() -> float:
        '''
        Returns the size right side of the frustum.
        '''
        return float()

    @staticmethod
    def getFrustumTop() -> float:
        '''
        Returns the size top side of the frustum.
        '''
        return float()

    @staticmethod
    def getFStop() -> float:
        '''
        Returns the FStop of the camera,.
        '''
        return float()

    @staticmethod
    def getGlare() -> bool:
        '''
        Returns the current glare state of the camera.
        '''
        return bool()

    @staticmethod
    def getGlareIntensity() -> float:
        '''
        Returns the glare intensity.
        '''
        return float()

    @staticmethod
    def getGlareRotation() -> float:
        '''
        Returns the glare rotation.
        '''
        return float()

    @staticmethod
    def getGlareSize() -> float:
        '''
        Returns the glare size.
        '''
        return float()

    @staticmethod
    def getGlareStreaks() -> 'int':
        '''
        Returns the number of glare streaks.
        '''
        return int()

    @staticmethod
    def getGlareThreshold() -> float:
        '''
        Returns the glare threshold.
        '''
        return float()

    @staticmethod
    def getGlow() -> bool:
        '''
        Returns the current glow state of the camera.
        '''
        return bool()

    @staticmethod
    def getGlowFalloff() -> float:
        '''
        Returns the glow falloff.
        '''
        return float()

    @staticmethod
    def getGlowIntensity() -> float:
        '''
        Returns the glow intensity.
        '''
        return float()

    @staticmethod
    def getGlowSize() -> float:
        '''
        Returns the glow size.
        '''
        return float()

    @staticmethod
    def getGlowThreshold() -> float:
        '''
        Returns the glow threshold.
        '''
        return float()

    @staticmethod
    def getHeightFog() -> bool:
        '''
        Returns the current activation value of height-fog.
        '''
        return bool()

    @staticmethod
    def getHeightFogBlend() -> float:
        '''
        Returns the blend value of height-fog.
        '''
        return float()

    @staticmethod
    def getHeightFogColor() -> 'QColor':
        '''
        Get the color of height-fog.
        '''
        return QColor()

    @staticmethod
    def getHeightFogDensity() -> float:
        '''
        Returns the density of height-fog.
        '''
        return float()

    @staticmethod
    def getHeightFogEnableNoiseSizeUniform() -> bool:
        '''
        Returns the uniform noise size flag for height-fog.
        '''
        return bool()

    @staticmethod
    def getHeightFogFalloff() -> 'FogFalloffMode':
        '''
        Returns the falloff type of height-fog.
        '''
        return FogFalloffMode()

    @staticmethod
    def getHeightFogNoise() -> float:
        '''
        Returns the noise intensity of height-fog.
        '''
        return float()

    @staticmethod
    def getHeightFogNoiseOffset() -> 'QVector3D':
        '''
        Returns the noise offset of height-fog.
        '''
        return QVector3D()

    @staticmethod
    def getHeightFogNoiseSize() -> 'QVector3D':
        '''
        Returns the noise size of height-fog.
        '''
        return QVector3D()

    @staticmethod
    def getHeightFogRange() -> 'QVector2D':
        '''
        Returns the range of height-fog.
        '''
        return QVector2D()

    @staticmethod
    def getLensFlare() -> bool:
        '''
        Queries if lens flares are visible for this camera.
        '''
        return bool()

    @staticmethod
    def getMotionBlur() -> bool:
        '''
        Returns the current motion blur state of the camera.
        '''
        return bool()

    @staticmethod
    def getNearClippingDistance() -> float:
        '''
        Returns the distance of the near clipping plane.
        '''
        return float()

    @staticmethod
    def getOrthographicSize() -> float:
        '''
        Returns the orthographic size.
        '''
        return float()

    @staticmethod
    def getPerspectiveMatch() -> 'vrdPerspectiveMatch':
        '''
        Gets the camera perspective match object.
        '''
        return vrdPerspectiveMatch()

    @staticmethod
    def getPrincipalPointOffset() -> 'QVector2D':
        '''
        Returns the principal point offset.
        '''
        return QVector2D()

    @staticmethod
    def getProjectionMode() -> 'CameraProjectionMode':
        '''
        Returns the projection mode used for the camera.
        '''
        return CameraProjectionMode()

    @staticmethod
    def getRoll() -> float:
        '''
        Returns the camera roll.
        '''
        return float()

    @staticmethod
    def getSensorSize() -> 'QVector2D':
        '''
        Returns the sensor size.
        '''
        return QVector2D()

    @staticmethod
    def getShutterSpeed() -> float:
        '''
        Returns the shutter speed.
        '''
        return float()

    @staticmethod
    def getSkew() -> float:
        '''
        Returns the skew factor of the camera.
        '''
        return float()

    @staticmethod
    def getStereoEyeSeparation() -> float:
        '''
        Returns the stereo eye separation used during omnidirectional stereo rendering.
        '''
        return float()

    @staticmethod
    def getStereoLayout() -> 'CameraStereoLayout':
        '''
        Returns the stereo layout.
        '''
        return CameraStereoLayout()

    @staticmethod
    def getStereoPolarMergeAngle() -> float:
        '''
        Returns the polar merge angle used during omnidirectional stereo rendering.
        '''
        return float()

    @staticmethod
    def getTonemapper() -> 'vrdTonemapper':
        '''
        Returns the tone mapper.
        '''
        return vrdTonemapper()

    @staticmethod
    def getViewpointTransition() -> bool:
        '''
        Returns if viewpoint transitions are enabled.
        '''
        return bool()

    @staticmethod
    def getViewpointTransitionDuration() -> float:
        '''
        Returns the duration of viewpoint transitions.
        '''
        return float()

    @staticmethod
    def getVignetteFeather() -> float:
        '''
        Returns the vignette feather.
        '''
        return float()

    @staticmethod
    def getVignetteRadius() -> float:
        '''
        Returns the vignette radius.
        '''
        return float()

    @staticmethod
    def getVignetteRoundness() -> float:
        '''
        Returns the vignette roundness.
        '''
        return float()

    @staticmethod
    def getWireframeRendering() -> bool:
        '''
        Returns the state of wireframe rendering.
        '''
        return bool()

    @staticmethod
    def isEditable() -> bool:
        '''
        Returns if the node is in a locked state or can be edited.
        '''
        return bool()

    @staticmethod
    def isEqual(camera: 'vrdCameraBaseNode' = None) -> bool:
        '''
        Determines if two camera nodes are internally using the same camera.
        '''
        return bool()

    @staticmethod
    def isOrthographic() -> bool:
        '''
        Returns if the camera is using orthographic projection.
        '''
        return bool()

    @staticmethod
    def loadBlendMap(fileName: 'str' = None, eye: 'CameraEye' = None) -> 'bool':
        '''
        Loads an image from a file and sets it as blending map for either the left or the right eye.
        '''
        return bool()

    @staticmethod
    def loadDistortionMap(fileName: 'str' = None, eye: 'CameraEye' = None) -> 'bool':
        '''
        Loads an image from a file and sets it as distortion map for either the left or the right eye.
        '''
        return bool()

    @staticmethod
    def mirrorView(axis: 'CameraAxis' = None):
        '''
        Mirrors the camera view along one of the major axis.
        '''
        pass

    @staticmethod
    def resetView():
        '''
        Zeros all values in the camera viewing matrix.
        '''
        pass

    @staticmethod
    def setApplyColorCorrectionToBackground(enabled: bool = False):
        '''
        Enable / disable the color correction for the background.
        '''
        pass

    @staticmethod
    def setApplyColorCorrectionToForeground(enabled: bool = False):
        '''
        Enable / disable the color correction for the foreground.
        '''
        pass

    @staticmethod
    def setBlendAmount(value: float = 0.0):
        '''
        Sets the amount of blending to use.
        '''
        pass

    @staticmethod
    def setBlendMapLeftEye(image: 'vrdImage' = None):
        '''
        Sets the blending map for the left eye of the camera.
        '''
        pass

    @staticmethod
    def setBlendMapRightEye(image: 'vrdImage' = None):
        '''
        Sets the blending map for the right eye of the camera.
        '''
        pass

    @staticmethod
    def setBlendMode(mode: 'BlendMode' = None):
        '''
        Sets and enables / disables the blending mode.
        '''
        pass

    @staticmethod
    def setColorCorrectionBrightness(value: float = 0.0):
        '''
        Sets the color correction brightness.
        '''
        pass

    @staticmethod
    def setColorCorrectionContrast(value: float = 0.0):
        '''
        Sets the color correction contrast.
        '''
        pass

    @staticmethod
    def setColorCorrectionHueOffset(value: float = 0.0):
        '''
        Sets the color correction hue offset.
        '''
        pass

    @staticmethod
    def setColorCorrectionSaturation(value: float = 0.0):
        '''
        Sets the color correction saturation.
        '''
        pass

    @staticmethod
    def setCustomFrustumEnabled(enabled: bool = False):
        '''
        Enable / disable the use of a custom frustum.
        '''
        pass

    @staticmethod
    def setCustomProjectionMatrix(matrix: 'QMatrix4x4' = None):
        '''
        Sets a custom 4x4 projection matrix.
        '''
        pass

    @staticmethod
    def setDepthOfField(enabled: bool = False):
        '''
        Enables / disables depth of field for the camera.
        '''
        pass

    @staticmethod
    def setDistanceFog(enable: bool = False):
        '''
        Enables / disables distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogColor(color: 'QColor' = None):
        '''
        Sets the color of the distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogDensity(density: float = 0.0):
        '''
        Set the density of distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogEnableNoiseSizeUniform(enable: bool = False):
        '''
        Enables / disables uniform noise size for distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogFalloff(value: 'FogFalloffMode' = None):
        '''
        Sets the falloff type of distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogNoise(intensity: float = 0.0):
        '''
        Set the intensity of noise for distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogNoiseOffset(offset: 'QVector3D' = None):
        '''
        Set the offset of noise for distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogNoiseSize(size: 'QVector3D' = None):
        '''
        Set the size of noise for distance-fog.
        '''
        pass

    @staticmethod
    def setDistanceFogRange(nearDistance: float = 0.0):
        '''
        Sets where distance-fog begins.
        '''
        pass

    @staticmethod
    def setDistortion(enabled: bool = False):
        '''
        Enable / disable distortion.
        '''
        pass

    @staticmethod
    def setDistortionMapLeftEye(image: 'vrdImage' = None):
        '''
        Sets the distortion map for the left eye of the camera.
        '''
        pass

    @staticmethod
    def setDistortionMapRightEye(image: 'vrdImage' = None):
        '''

        '''
        pass

    @staticmethod
    def setFarClippingDistance(value: float = 0.0):
        '''
        Sets the distance of the far clipping plane.
        '''
        pass

    @staticmethod
    def setFocalLength(value: float = 0.0):
        '''
        Sets the focal length.
        '''
        pass

    @staticmethod
    def setFocusDistance(distance: float = 0.0):
        '''
        Sets the focus distance.
        '''
        pass

    @staticmethod
    def setFov(value: float = 0.0):
        '''
        Sets the field of view.
        '''
        pass

    @staticmethod
    def setFovMode(mode: 'FovMode' = None):
        '''
        Sets the field of view mode.
        '''
        pass

    @staticmethod
    def setFromAtUp(fromAtUp: 'vrCameraFromAtUp' = None):
        '''
        Sets the from, at and up vectors in local space.
        '''
        pass

    @staticmethod
    def setFromAtUpWorld(fromAtUp: 'vrCameraFromAtUp' = None):
        '''
        Sets the from, at and up vectors in world space.
        '''
        pass

    @staticmethod
    def setFrustum(frustum: 'QVector4D' = None):
        '''
        Sets the custom frustum.
        '''
        pass

    @staticmethod
    def setFrustumBottom(value: float = 0.0):
        '''
        Sets the size of the bottom side of the frustum.
        '''
        pass

    @staticmethod
    def setFrustumLeft(value: float = 0.0):
        '''
        Sets the size of the left side of the frustum.
        '''
        pass

    @staticmethod
    def setFrustumRight(value: float = 0.0):
        '''
        Sets the size of the right side of the frustum.
        '''
        pass

    @staticmethod
    def setFrustumTop(value: float = 0.0):
        '''
        Sets the size of the top side of the frustum.
        '''
        pass

    @staticmethod
    def setFStop(value: float = 0.0):
        '''
        Sets the FStop of the camera.
        '''
        pass

    @staticmethod
    def setGlare(enabled: bool = False):
        '''
        Enables / disables glare for the camera.
        '''
        pass

    @staticmethod
    def setGlareIntensity(value: float = 0.0):
        '''
        Sets the glare intensity.
        '''
        pass

    @staticmethod
    def setGlareRotation(value: float = 0.0):
        '''
        Sets the glare rotation.
        '''
        pass

    @staticmethod
    def setGlareSize(value: float = 0.0):
        '''
        Sets the glare size.
        '''
        pass

    @staticmethod
    def setGlareStreaks(value: 'int' = None):
        '''
        Sets the number of glare streaks.
        '''
        pass

    @staticmethod
    def setGlareThreshold(value: float = 0.0):
        '''
        Sets the glare threshold.
        '''
        pass

    @staticmethod
    def setGlow(enabled: bool = False):
        '''
        Enables / disables glow for the camera.
        '''
        pass

    @staticmethod
    def setGlowFalloff(value: float = 0.0):
        '''
        Sets the glow falloff.
        '''
        pass

    @staticmethod
    def setGlowIntensity(value: float = 0.0):
        '''
        Sets the glow intensity.
        '''
        pass

    @staticmethod
    def setGlowSize(value: float = 0.0):
        '''
        Sets the glow size.
        '''
        pass

    @staticmethod
    def setGlowThreshold(value: float = 0.0):
        '''
        Sets the glow threshold.
        '''
        pass

    @staticmethod
    def setHeightFog(enable: bool = False):
        '''
        Enables / disables height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogBlend(blend: float = 0.0):
        '''
        Set the transition distance between fog and no fog.
        '''
        pass

    @staticmethod
    def setHeightFogColor(color: 'QColor' = None):
        '''
        Sets the color of the height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogDensity(density: float = 0.0):
        '''
        Set the density of height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogEnableNoiseSizeUniform(enable: bool = False):
        '''
        Enables / disables uniform noise size for height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogFalloff(value: 'FogFalloffMode' = None):
        '''
        Set the falloff of height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogNoise(intensity: float = 0.0):
        '''
        Set the intensity of noise for height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogNoiseOffset(offset: 'QVector3D' = None):
        '''
        Set the offset of noise for height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogNoiseSize(size: 'QVector3D' = None):
        '''
        Set the size of noise for height-fog.
        '''
        pass

    @staticmethod
    def setHeightFogRange(range: 'QVector2D' = None):
        '''
        Sets where height-fog begins and where it ends.
        '''
        pass

    @staticmethod
    def setLensFlare(enabled: bool = False):
        '''
        Enables / disables the visibility of lens flares for this camera.
        '''
        pass

    @staticmethod
    def setMotionBlur(enabled: bool = False):
        '''
        Enables / disables motion blur for the camera.
        '''
        pass

    @staticmethod
    def setNearClippingDistance(value: float = 0.0):
        '''
        Sets the distance of the near clipping plane.
        '''
        pass

    @staticmethod
    def setOrthographicSize(size: float = 0.0):
        '''
        Sets the orthographic size.
        '''
        pass

    @staticmethod
    def setPrincipalPointOffset(offset: 'QVector2D' = None):
        '''
        Sets the principal point offset.
        '''
        pass

    @staticmethod
    def setProjectionMode(mode: 'CameraProjectionMode' = None):
        '''
        Sets the projection mode for the camera.
        '''
        pass

    @staticmethod
    def setRoll(value: float = 0.0):
        '''
        Sets the camera roll.
        '''
        pass

    @staticmethod
    def setSensorSize(size: 'QVector2D' = None):
        '''
        Sets the sensor size.
        '''
        pass

    @staticmethod
    def setShutterSpeed(value: float = 0.0):
        '''
        Sets the shutter speed used for motion blur.
        '''
        pass

    @staticmethod
    def setSkew(value: float = 0.0):
        '''
        Sets the skew factor of the camera.
        '''
        pass

    @staticmethod
    def setStereoEyeSeparation(value: float = 0.0):
        '''
        Sets eye separation used during omnidirectional stereo rendering.
        '''
        pass

    @staticmethod
    def setStereoLayout(layout: 'CameraStereoLayout' = None):
        '''
        Sets the image layout during omnidirectional stereo rendering.
        '''
        pass

    @staticmethod
    def setStereoPolarMergeAngle(value: float = 0.0):
        '''
        Sets the polar merge angle used during omnidirectional stereo rendering.
        '''
        pass

    @staticmethod
    def setToCurrentView():
        '''
        Applies the current viewport transformation to the camera.
        '''
        pass

    @staticmethod
    def setViewpointTransition(enabled: bool = False):
        '''
        Enables / disables a transition animation between viewpoints.
        '''
        pass

    @staticmethod
    def setViewpointTransitionDuration(seconds: float = 0.0):
        '''
        Sets the duration of viewpoint transitions.
        '''
        pass

    @staticmethod
    def setVignetteFeather(value: float = 0.0):
        '''
        Sets the vignette feather.
        '''
        pass

    @staticmethod
    def setVignetteRadius(value: float = 0.0):
        '''
        Sets the radius of the vignette used for blending.
        '''
        pass

    @staticmethod
    def setVignetteRoundness(value: float = 0.0):
        '''
        Sets the vignette roundness.
        '''
        pass

    @staticmethod
    def setWireframeRendering(enabled: bool = False):
        '''
        Enables / disables wireframe rendering.
        '''
        pass


class vrdLensFlareGhostLine(vrdLensFlareElement):
    '''
    This class is used for collection ghost effects. Objects of this class acts as a container for     vrdLensFlareGhost objects. But it is an effect too. This class has a name and if becomes inactive, all ghosts of this line becomes inactive.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createGhost(distance: float = 0.0) -> 'vrdLensFlareGhost':
        '''
        A new ghost will be created for this line. The new ghost object has default properties. A ‘ghost’ property signal is emitted for the line object.
        '''
        return vrdLensFlareGhost()

    @staticmethod
    def getGhosts() -> List['vrdLensFlareGhost']:
        '''
        Get a list of all ghost of this line.
        '''
        return [vrdLensFlareGhost()]

    @staticmethod
    def removeGhosts(ghosts: List['vrdLensFlareGhost'] = None):
        '''
        Remove some ghosts of this line. It will be checked, if the given ghosts are in this line. A ‘ghost’ property signal is emitted for the line object. But this only happens when ghosts have been removed. If the parameter list was empty, the signal is not sent. If the ghosts were not in this line, the signal will not be sent either.
        '''
        pass


class vrCameraService():
    '''
    Interface to access cameras and viewpoints in VRED.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createCamera(name: 'str' = None, mode: 'CameraProjectionMode' = None, constraint: 'CameraConstraint' = None, sceneGraphParentNode: 'vrdNode' = None, cameraGraphParentNode: 'vrdNode' = None) -> 'vrdCameraNode':
        '''
        Creates a new camera.
        '''
        return vrdCameraNode()

    @staticmethod
    def createCameraGroup(name: 'str' = None, cameraGraphParentNode: 'vrdNode' = None) -> 'vrdNode':
        '''
        Creates a new camera group.
        '''
        return vrdNode()

    @staticmethod
    def createCameraTrack(name: 'str' = None, cameraNode: 'vrdCameraNode' = None) -> 'vrdCameraTrackNode':
        '''
        Creates a new camera track.
        '''
        return vrdCameraTrackNode()

    @staticmethod
    def createViewpoint(name: 'str' = None, cameraTrack: 'vrdCameraTrackNode' = None) -> 'vrdViewpointNode':
        '''
        Creates a new viewpoint.
        '''
        return vrdViewpointNode()

    @staticmethod
    def duplicateNode(node: 'vrdNode' = None) -> 'vrdNode':
        '''
        Creates a copy of a camera tree node (including its children).
        '''
        return vrdNode()

    @staticmethod
    def getActiveCamera(useCameraGraph: bool = False) -> 'vrdCameraNode':
        '''
        Returns the active camera of the currently active viewport.
        '''
        return vrdCameraNode()

    @staticmethod
    def getAllCameraTracks() -> List['vrdCameraTrackNode']:
        '''
        Returns the list of all camera tracks.
        '''
        return [vrdCameraTrackNode()]

    @staticmethod
    def getAllViewpoints() -> List['vrdViewpointNode']:
        '''
        Returns the list of all viewpoints.
        '''
        return [vrdViewpointNode()]

    @staticmethod
    def getCamera(name: 'str' = None, useCameraGraph: bool = False) -> 'vrdCameraNode':
        '''
        Returns the first camera with the given name.
        '''
        return vrdCameraNode()

    @staticmethod
    def getCameraNames() -> List['str']:
        '''
        Returns a list with the names of all cameras.
        '''
        return [str()]

    @staticmethod
    def getCameraRoot() -> 'vrdNode':
        '''
        Returns the root node of cameras, that contains all cameras, camera tracks and viewpoints.
        '''
        return vrdNode()

    @staticmethod
    def getCameras(useCameraScenegraph: bool = False) -> List['vrdCameraNode']:
        '''
        Returns the list of all cameras (not including viewpoints or camera tracks).
        '''
        return [vrdCameraNode()]

    @staticmethod
    def getViewpoint(name: 'str' = None) -> 'vrdViewpointNode':
        '''
        Returns the first viewpoint with the given name.
        '''
        return vrdViewpointNode()

    @staticmethod
    def getViewpointCreationMode() -> 'ViewpointCreationMode':
        '''
        Returns if tracking transformation should be included in viewpoint transformation.
        '''
        return ViewpointCreationMode()

    @staticmethod
    def load(filename: 'str' = None) -> List['vrdNode']:
        '''
        Load camera related nodes.
        '''
        return [vrdNode()]

    @staticmethod
    def saveCameras(nodes: List['vrdNode'] = None, filename: 'str' = None) -> 'bool':
        '''
        Save cameras and viewpoints to an .xml file (no hierarchy, groups or tracks supported).
        '''
        return bool()

    @staticmethod
    def saveNodes(nodes: List['vrdNode'] = None, filename: 'str' = None) -> 'bool':
        '''
        Save nodes including children (tracks, groups, viewpoints) to .osb file.
        '''
        return bool()

    @staticmethod
    def saveViewpoints(filename: 'str' = None) -> bool:
        '''
        Save all viewpoints to ‘.xml’ file.
        '''
        return bool()

    @staticmethod
    def setViewpointCreationMode(mode: 'ViewpointCreationMode' = None):
        '''
        Defines if tracking transformation should be included in viewpoint transformation.
        '''
        pass


class vrdDiskLightNode(vrdAreaLightNode):
    '''
    This class represents a Disk light.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAreaLightCone() -> 'vrdAreaLightCone':
        '''
        Returns the area light cone.
        '''
        return vrdAreaLightCone()


class vrdAimConstraintNode(vrdConstraintNode):
    '''
    This class gives access to an aim constraint object in VRED. An aim constraint will compute the orientation of a constrained object depending on the position of a target and an optional up vector target. If there are multiple targets or up vector targets, the positions are calculated as the weighted average value of it.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def clearUpVectorTargetNodes():
        '''
        Clears the set up vector target nodes of the constraint.
        '''
        pass

    @staticmethod
    def getUpVectorTargetNodes() -> List['vrdNode']:
        '''
        Returns the list of nodes set as up vector targets for the constraint.
        '''
        return [vrdNode()]

    @staticmethod
    def getUpVectorTargetNodeWeight(node: 'vrdNode' = None) -> float:
        '''
        Gets the weight for a up vector target node of the constraint. The node must be referenced in the up vector target nodes list of the constraint.
        '''
        return float()

    @staticmethod
    def setUpVectorTargetNodes(nodes: List['vrdNode'] = None):
        '''
        Sets a list of nodes as up vector targets for the constraint.
        '''
        pass

    @staticmethod
    def setUpVectorTargetNodeWeight(node: 'vrdNode' = None, weight: float = 0.0):
        '''
        Sets the weight for an up vector target node of the constraint. The node must be referenced in the up vector target nodes list of the constraint.
        '''
        pass


class vrDeviceService():
    '''
    This service allows the management of VR devices and interactions that are triggered by those devices. It gives access to interaction as well as device objects and also allows their creation.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def activateInteraction(interaction: 'str' = None):
        '''
        Activates an interaction. This allows an interaction to resume receiving input signals, if the interaction is in the active interaction group.
        '''
        pass

    @staticmethod
    def createInteraction(name: 'str' = None) -> 'vrdDeviceInteraction':
        '''
        Creates a new device interaction and makes it available for mapping inputs to its actions.
        '''
        return vrdDeviceInteraction()

    @staticmethod
    def createVRDevice(name: 'str' = None) -> 'vrdVRDevice':
        '''
        Creates a virtual device. This can be used to integrate custom hand tracking wtih python.
        '''
        return vrdVRDevice()

    @staticmethod
    def deactivateInteraction(interaction: 'str' = None):
        '''
        Deactivates an interaction. The interaction will not receive input signals anymore.
        '''
        pass

    @staticmethod
    def deleteVRDevice(device: 'vrdVRDevice' = None):
        '''
        Removes a virtual device.
        '''
        pass

    @staticmethod
    def getActiveInteractionGroup() -> 'str':
        '''
        Gets the currently active interaction group.
        '''
        return str()

    @staticmethod
    def getConnectedVRDevices() -> List['vrdVRDevice']:
        '''
        Gets the connected VR devices like controllers or trackers.
        '''
        return [vrdVRDevice()]

    @staticmethod
    def getInteraction(name: 'str' = None) -> 'vrdDeviceInteraction':
        '''
        Gets an interactions that is already known to the service.
        '''
        return vrdDeviceInteraction()

    @staticmethod
    def getInteractions() -> List['vrdDeviceInteraction']:
        '''
        Gets all interactions that are known to the service.
        '''
        return [vrdDeviceInteraction()]

    @staticmethod
    def getTrackingOrigin() -> 'QVector3D':
        '''
        Returns the tracking reference origin. Default is (0, 0, 0). Can be changed with setTrackingOrigin.
        '''
        return QVector3D()

    @staticmethod
    def getVRDevice(name: 'str' = None) -> 'vrdVRDevice':
        '''
        Gets an VR device, which can be a controllers or a trackers by its name.
        '''
        return vrdVRDevice()

    @staticmethod
    def getVRDeviceBySerialNumber(serialNumber: 'str' = None) -> 'vrdVRDevice':
        '''
        Gets an VR device, which can be a controllers or a trackers by its serial number.
        '''
        return vrdVRDevice()

    @staticmethod
    def removeInteraction(interaction: 'vrdDeviceInteraction' = None):
        '''
        Removes an interaction from the input mapping.
        '''
        pass

    @staticmethod
    def setActiveInteractionGroup(interactionGroup: 'str' = None):
        '''
        Activates a group of interactions which will from now on receive all the input signals. This will also deactivate all other interaction groups as only one interaction group can be active.
        '''
        pass

    @staticmethod
    def setTrackingOrigin(position: 'QVector3D' = None):
        '''
        Sets the tracking reference origin for tracking. Use it to correct any offsets in the scene This function always assumes Y-Up, even if Z-up is set in the scene. If the tracking origin should be at pos = (x_scene, y_scene, z_scene) in the VRED scene, call setTrackingOrigin(QVector3D(-x_scene, -z_scene, y_scene))
        '''
        pass

    @staticmethod
    def deviceActionTriggered(action: 'vrdDeviceAction' = None, device: 'vrdVRDevice' = None):
        '''
        The signal that is send, when the corresponding device action is triggered.
        '''
        pass

    @staticmethod
    def deviceCollisionStarted(otherNode: 'vrdNode' = None, device: 'vrdVRDevice' = None):
        '''
        Signal is emitted when the collision sensor of a device touches a collision sensitive node.
        '''
        pass

    @staticmethod
    def deviceCollisionStopped(otherNode: 'vrdNode' = None, device: 'vrdVRDevice' = None):
        '''
        Signal is emitted when the collision sensor of a device stops touching a collision sensitive node.
        '''
        pass

    @staticmethod
    def deviceMoved(device: 'vrdVRDevice' = None):
        '''
        Signal that is triggered, when a VR device moved.
        '''
        pass


class vrdRectangularLightNode(vrdAreaLightNode):
    '''
    This class represents a Rectangular light.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getAreaLightCone() -> 'vrdAreaLightCone':
        '''
        Returns the area light cone.
        '''
        return vrdAreaLightCone()


class vrdViewpointNode(vrdCameraBaseNode):
    '''
    This class represents a viewpoint in VRED.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def activate(disableTransition: bool = False, blockForAnimation: bool = False):
        '''
        Activates the viewpoint.
        '''
        pass

    @staticmethod
    def createPreview(force: bool = False):
        '''
        Create a preview for the viewpoint.
        '''
        pass

    @staticmethod
    def getOverrideTrackSettings() -> bool:
        '''
        Returns if overriding of camera track settings is enabled.
        '''
        return bool()

    @staticmethod
    def getPreview() -> 'vrdImage':
        '''
        Returns the viewpoint preview image.
        '''
        return vrdImage()

    @staticmethod
    def getTrackFadeInDurationOverride() -> float:
        '''
        Returns the override for the fade in duration of the camera track.
        '''
        return float()

    @staticmethod
    def getTrackPauseDurationOverride() -> float:
        '''
        Returns the override for the pause duration of the camera track.
        '''
        return float()

    @staticmethod
    def getTrackTransitionDurationOverride() -> float:
        '''
        Returns the override for the transition duration of the camera track.
        '''
        return float()

    @staticmethod
    def hasPreview() -> bool:
        '''
        Checks if the viewpoint has a preview image.
        '''
        return bool()

    @staticmethod
    def setOverrideTrackSettings(enable: bool = False):
        '''
        Enables / disables overriding of camera track settings.
        '''
        pass

    @staticmethod
    def setTrackFadeInDurationOverride(value: float = 0.0):
        '''
        Sets the override for the fade in duration of the camera track.
        '''
        pass

    @staticmethod
    def setTrackPauseDurationOverride(value: float = 0.0):
        '''
        Sets the override for the pause duration of the camera track.
        '''
        pass

    @staticmethod
    def setTrackTransitionDurationOverride(value: float = 0.0):
        '''
        Sets the override for the transition duration of the camera track.
        '''
        pass


class vrConstraintService():
    '''
    Interface to manage constraints in VRED.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def createAimConstraint(targetNodes: List['vrdNode'] = None, upTargetNodes: List['vrdNode'] = None, constrainedNode: 'vrdNode' = None) -> 'vrdAimConstraintNode':
        '''
        Creates a new aim constraint node.
        '''
        return vrdAimConstraintNode()

    @staticmethod
    def createOrientationConstraint(targetNodes: List['vrdNode'] = None, constrainedNode: 'vrdNode' = None) -> 'vrdOrientationConstraintNode':
        '''
        Creates a new orientation constraint node.
        '''
        return vrdOrientationConstraintNode()

    @staticmethod
    def createParentConstraint(targetNodes: List['vrdNode'] = None, constrainedNode: 'vrdNode' = None, maintainOffset: bool = False) -> 'vrdParentConstraintNode':
        '''
        Creates a new parent constraint node.
        '''
        return vrdParentConstraintNode()

    @staticmethod
    def createPositionConstraint(targetNodes: List['vrdNode'] = None, constrainedNode: 'vrdNode' = None, maintainOffset: bool = False) -> 'vrdPositionConstraintNode':
        '''
        Creates a new position constraint node.
        '''
        return vrdPositionConstraintNode()

    @staticmethod
    def deleteConstraint(node: 'vrdConstraintNode' = None) -> bool:
        '''
        Deletes a given constraint.
        '''
        return bool()

    @staticmethod
    def findConstrainedNode(node: 'vrdNode' = None) -> List['vrdConstraintNode']:
        '''
        Returns a list of constraints for a given constrained node.
        '''
        return [vrdConstraintNode()]

    @staticmethod
    def getConstraints() -> List['vrdConstraintNode']:
        '''
        Returns a list of all public constraints.
        '''
        return [vrdConstraintNode()]


class vrReferenceImportOptions():
    '''
    vrReferenceService

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def vrReferenceImportOptions():
        '''

        '''
        pass


class vrdLensFlareStar(vrdLensFlareFxElement):
    '''
    This class is used for a sun-like effect, made up of multiple streaks. Use it for things such as street lamps at night, objects with stationary lights, or a light source that’s partially obscured by an object, like a tree or building’s edge. A short introduction can be found under     https://help.autodesk.com/view/VREDPRODUCTS/2020/ENU/?guid=VRED_Lights_About_Lens_Flares_and_Elements_html.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getImage() -> 'vrdImage':
        '''
        Return the current used texture.
        '''
        return vrdImage()

    @staticmethod
    def getNumberOfBursts() -> 'int':
        '''
        Get how many arms a Starburst element has.
        '''
        return int()

    @staticmethod
    def getShape() -> 'StarShape':
        '''
        Get the current used shape.
        '''
        return StarShape()

    @staticmethod
    def getThickness() -> float:
        '''
        Get the current used thickness of the effect.
        '''
        return float()

    @staticmethod
    def setImage(image: 'vrdImage' = None):
        '''
        Set an image for this element. You has to change the type to Texture to use the image for the star effect.
        '''
        pass

    @staticmethod
    def setNumberOfBursts(numberOfBursts: 'int' = None):
        '''
        Use to set how many arms a Starburst element has.
        '''
        pass

    @staticmethod
    def setShape(shape: 'StarShape' = None):
        '''
        Change its current shape to a fan, spike, blade, or texture.
        '''
        pass

    @staticmethod
    def setThickness(thickness: float = 0.0):
        '''
        Controls the thickness of the effect.
        '''
        pass


class vrdVRDevice(vrdObject):
    '''
    Represents a VR device like a controller or a tracker. This can be created before the actual device is connected with the system. When a device connects, VRED will map the physical device to the already created object. This allows to define mappings in advance.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def addVirtualButton(button: 'vrdVirtualTouchpadButton' = None, physicalButton: 'str' = None):
        '''
        Adds a virtual button to the controller that maps a position of a button to a new signal.
        '''
        pass

    @staticmethod
    def disableRay():
        '''
        Disables the currently activated pointing ray.
        '''
        pass

    @staticmethod
    def enableRay(axis: 'str' = None):
        '''
        Enables a pointing ray out of the controller.
        '''
        pass

    @staticmethod
    def getButtonState(button: 'str' = None) -> 'vrdButtonState':
        '''
        Gets the state of the current button.
        '''
        return vrdButtonState()

    @staticmethod
    def getName() -> 'str':
        '''
        Gets the name of the device
        '''
        return str()

    @staticmethod
    def getNode() -> 'vrdNode':
        '''
        Gets a node under the origin of the VR device. This node is not part of the scenegraph. If some geometry should be attached to the device, a constraint (see         vrConstraintService.createParentConstraint(targetNodes, constrainedNode, maintainOffset)) should be used. Example: vr/attachToController.py.
        '''
        return vrdNode()

    @staticmethod
    def getSerialNumber() -> 'str':
        '''
        Gets the serial number of the device.
        '''
        return str()

    @staticmethod
    def getTrackingMatrix() -> 'QMatrix4x4':
        '''

        '''
        return QMatrix4x4()

    @staticmethod
    def getVisualizationMode() -> 'int':
        '''
        Gets the current visualization mode.
        '''
        return int()

    @staticmethod
    def getVisualizationNode() -> 'vrdNode':
        '''
        Gets the root node of the controller visualization. If the controller is currently not visible or not detected by the tracking system, this function will return an empty node.
        '''
        return vrdNode()

    @staticmethod
    def isVisible() -> bool:
        '''
        Gets the visibility of the device.
        '''
        return bool()

    @staticmethod
    def pick() -> 'vrdRayIntersection':
        '''
        Tries to pick the object in the scene at the intersection point of the pointing ray with the scene.
        '''
        return vrdRayIntersection()

    @staticmethod
    def removeVirtualButton(button: 'vrdVirtualTouchpadButton' = None, physicalButton: 'str' = None):
        '''
        Removes a virtual button that is related to a physical button.
        '''
        pass

    @staticmethod
    def setButtonPressed(state: bool = False, button: 'str' = None):
        '''
        Simulate a button press.
        '''
        pass

    @staticmethod
    def setButtonTouched(state: bool = False, button: 'str' = None):
        '''
        Simulate a button press.
        '''
        pass

    @staticmethod
    def setTrackingMatrix(matrix: 'QMatrix4x4' = None):
        '''
        Simulate a tracking position change.
        '''
        pass

    @staticmethod
    def setVisible(visible: bool = False):
        '''
        Sets the VR device visible or invisible.
        '''
        pass

    @staticmethod
    def setVisualizationMode(mode: 'int' = None):
        '''
        Sets the visualization mode.
        '''
        pass

    @staticmethod
    def signal() -> 'vrdVRDeviceSignal':
        '''

        '''
        return vrdVRDeviceSignal()

    @staticmethod
    def vibrate(milliseconds: 'int' = None, axisId: 'int' = None):
        '''
        Triggers the vibration functionality of the device if available.
        '''
        pass


class vrVRInputDeviceTypes():
    '''
    vrdAimConstraintNode

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''
    pass


class vrdFoveatedQuality():
    '''
    Holds shading quality settings for foveated rendering in VR. See     vrHMDService.setFoveatedRenderingCustomQuality(quality).

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getInner() -> 'ShadingQuality':
        '''
        Get shading quality for the inner foveal region.
        '''
        return ShadingQuality()

    @staticmethod
    def getMiddle() -> 'ShadingQuality':
        '''
        Get shading quality for the transition zone between foveal region and and periphery.
        '''
        return ShadingQuality()

    @staticmethod
    def getMinimumMultisamplingSamples() -> 'int':
        '''
        Get minimum number of multisampling samples (Realtime Antialiasing) that is required for this set of shading qualities. Supersampling 2x, 4x, 8x require at least the same number of multisampling samples (2, 4, 8).
        '''
        return int()

    @staticmethod
    def getPeriphery() -> 'ShadingQuality':
        '''
        Get shading quality for periphery.
        '''
        return ShadingQuality()

    @staticmethod
    def setInner(inner: 'ShadingQuality' = None):
        '''
        Set shading quality for the inner foveal region.
        '''
        pass

    @staticmethod
    def setMiddle(middle: 'ShadingQuality' = None):
        '''
        Set shading quality for the transition zone between foveal region and and periphery.
        '''
        pass

    @staticmethod
    def setPeriphery(periphery: 'ShadingQuality' = None):
        '''
        Set shading quality for the periphery.
        '''
        pass

    @staticmethod
    def vrdFoveatedQuality():
        '''
        Default constructor.
        '''
        pass


class vrdCameraNode(vrdCameraBaseNode):
    '''
    This class represents a camera in VRED.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def activate():
        '''
        Sets the camera to active.
        '''
        pass

    @staticmethod
    def getAimConstraintSources() -> List['vrdNode']:
        '''
        Returns the list of nodes set as aim constraint sources for the camera.
        '''
        return [vrdNode()]

    @staticmethod
    def getAimVisualizationScale() -> float:
        '''
        Returns the scaling value used for the aim and up vector visualization.
        '''
        return float()

    @staticmethod
    def getAimVisualizationVisible() -> bool:
        '''
        Queries if the aim and up vector visualization is visible in the renderer.
        '''
        return bool()

    @staticmethod
    def getCameraCollider() -> 'vrdCameraCollider':
        '''
        This object gives access to the camera collision functionality.
        '''
        return vrdCameraCollider()

    @staticmethod
    def getCameraTrack(cameraTrackIndex: 'int' = None) -> 'vrdCameraTrackNode':
        '''
        Gets the camera track.
        '''
        return vrdCameraTrackNode()

    @staticmethod
    def getCameraTrackCount() -> 'int':
        '''
        Returns the number of camera tracks in the camera.
        '''
        return int()

    @staticmethod
    def getCameraTracks() -> List['vrdCameraTrackNode']:
        '''
        Returns the list of all camera track nodes of the camera.
        '''
        return [vrdCameraTrackNode()]

    @staticmethod
    def getDefaultCameraTrack() -> 'vrdCameraTrackNode':
        '''
        Returns the default camera track node.
        '''
        return vrdCameraTrackNode()

    @staticmethod
    def getDollyZoom() -> bool:
        '''
        Returns the state of dolly zoom mode.
        '''
        return bool()

    @staticmethod
    def getEvaluateNavigationMode() -> bool:
        '''
        Queries if evaluation of the navigation mode is enabled.
        '''
        return bool()

    @staticmethod
    def getTurntable() -> 'vrdTurntable':
        '''
        This object gives access to the turntable.
        '''
        return vrdTurntable()

    @staticmethod
    def getUpVectorConstraintSources() -> List['vrdNode']:
        '''
        Returns the list of nodes set as up vector sources for the camera.
        '''
        return [vrdNode()]

    @staticmethod
    def getVisualizationScale() -> float:
        '''
        Returns the scaling value used for the camera visualization.
        '''
        return float()

    @staticmethod
    def getVisualizationVisible() -> bool:
        '''
        Queries if the visualization for the camera has been enabled.
        '''
        return bool()

    @staticmethod
    def hasAimConstraint() -> bool:
        '''
        Queries if the camera has an aim constraint.
        '''
        return bool()

    @staticmethod
    def hasAimConstraintSource(sourceNode: 'vrdNode' = None) -> bool:
        '''
        Queries if a given node is an aim constraint source for the camera.
        '''
        return bool()

    @staticmethod
    def isActive() -> bool:
        '''
        Determines if the camera is active.
        '''
        return bool()

    @staticmethod
    def isDefault() -> bool:
        '''
        Determines if the camera is the default camera.
        '''
        return bool()

    @staticmethod
    def isInitialCamera() -> bool:
        '''
        Queries if this camera is the initial camera.
        '''
        return bool()

    @staticmethod
    def removeAimConstraintSources() -> bool:
        '''
        Removes all aim constraint sources from the camera.
        '''
        return bool()

    @staticmethod
    def removeUpVectorConstraintSources() -> bool:
        '''
        Removes all up vector constraint sources.
        '''
        return bool()

    @staticmethod
    def setAimConstraintSources(nodes: List['vrdNode'] = None):
        '''
        Sets a list of nodes as aim constraint sources for the camera.
        '''
        pass

    @staticmethod
    def setAimVisualizationScale(value: float = 0.0):
        '''
        Sets the scaling value for the aim and up vector visualization.
        '''
        pass

    @staticmethod
    def setAimVisualizationVisible(enable: bool = False):
        '''
        Enables / disables the aim and up vector visualizations.
        '''
        pass

    @staticmethod
    def setDollyZoom(enabled: bool = False):
        '''
        Enables / disables dolly zoom mode.
        '''
        pass

    @staticmethod
    def setEvaluateNavigationMode(enabled: bool = False):
        '''
        Enable / disable the evaluation of the navigation mode when playing camera animations.
        '''
        pass

    @staticmethod
    def setInitialCamera():
        '''
        Sets this camera to be the initial camera.
        '''
        pass

    @staticmethod
    def setUpVectorConstraintSources(nodes: List['vrdNode'] = None):
        '''
        Sets a list of nodes as up vector constraint sources.
        '''
        pass

    @staticmethod
    def setVisualizationScale(value: float = 0.0):
        '''
        Sets a scaling value for the camera visualization.
        '''
        pass

    @staticmethod
    def setVisualizationVisible(enable: bool = False):
        '''
        Enables / disables the visualization of the camera.
        '''
        pass

    @staticmethod
    def updateFromPerspectiveMatch():
        '''
        Updates this camera’s focal length and rotation according to perspective match settings.
        '''
        pass


class vrdPerspectiveMatch(vrdSceneObject):
    '''
    Class to access camera perspective matching functionality.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def doRotateLeft():
        '''
        Rotates the camera clockwise around the pivot by the amount of degrees set with         vrdPerspectiveMatch.setRotationStepSize(deg)
        '''
        pass

    @staticmethod
    def doRotateRight():
        '''
        Rotates the camera counterclockwise around the pivot by the amount of degrees set with         vrdPerspectiveMatch.setRotationStepSize(deg)
        '''
        pass

    @staticmethod
    def getEnabled() -> bool:
        '''
        Returns if perspective matching tool is currently enabled.
        '''
        return bool()

    @staticmethod
    def getMagnifyFactor() -> float:
        '''
        Returns the scale factor used for the magnifier.
        '''
        return float()

    @staticmethod
    def getPivot() -> 'QVector3D':
        '''
        Returns the pivot used for rotations with         vrdPerspectiveMatch.doRotateLeft() and vrdPerspectiveMatch.doRotateRight()
        '''
        return QVector3D()

    @staticmethod
    def getRotationStepSize() -> float:
        '''
        Returns the rotation step size used by         vrdPerspectiveMatch.doRotateLeft() and vrdPerspectiveMatch.doRotateRight()
        '''
        return float()

    @staticmethod
    def getVanishingLinesType() -> 'VanishingLinesType':
        '''
        Returns the vanishing lines type.
        '''
        return VanishingLinesType()

    @staticmethod
    def setDefaultLines():
        '''
        Resets the vanishing lines to default values.
        '''
        pass

    @staticmethod
    def setEnabled(enabled: bool = False):
        '''
        Enables or disables the perspective match tool.
        '''
        pass

    @staticmethod
    def setMagnifyFactor(factor: float = 0.0):
        '''
        Sets the magnify factor used for the magnifier shown at the manipulator handles. This does not have an effect on the calculation.
        '''
        pass

    @staticmethod
    def setPivot(pivot: 'QVector3D' = None):
        '''
        Sets the pivot used for rotations with         vrdPerspectiveMatch.doRotateLeft() and vrdPerspectiveMatch.doRotateRight()
        '''
        pass

    @staticmethod
    def setPivotFromNavigator():
        '''
        Applies the currently used navigation pivot as perspective match pivot.
        '''
        pass

    @staticmethod
    def setRotationStepSize(deg: float = 0.0):
        '''
        Sets the rotation step size used by         vrdPerspectiveMatch.doRotateLeft() and vrdPerspectiveMatch.doRotateRight()
        '''
        pass

    @staticmethod
    def setVanishingLinesType(type: 'VanishingLinesType' = None):
        '''
        Sets the vanishing lines type defining which vanishing lines should be used (and shown) for perspective matching.
        '''
        pass


class vrdRayIntersection():
    '''
    Represents an intersection of an ray with a node in the scene.

    Generation Date: 2020-09-14 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs
    '''

    @staticmethod
    def getNode() -> 'vrdNode':
        '''
        Gets that node that has been hit.
        '''
        return vrdNode()

    @staticmethod
    def getNormal() -> 'QVector3D':
        '''
        The hit normal.
        '''
        return QVector3D()

    @staticmethod
    def getOrigin() -> 'QVector3D':
        '''
        Gets the origin of the ray that has used for the intersection test.
        '''
        return QVector3D()

    @staticmethod
    def getPoint() -> 'QVector3D':
        '''
        Gets the point that has been hit.
        '''
        return QVector3D()

    @staticmethod
    def getUV() -> 'QVector2D':
        '''
        Gets the uv coordinates of the texture where the hit occured.
        '''
        return QVector2D()

    @staticmethod
    def hasHit() -> bool:
        '''
        Returns if an actual hit occured.
        '''
        return bool()

    @staticmethod
    def setHit(value: bool = False):
        '''
        Sets if a hit occured.
        '''
        pass

    @staticmethod
    def setNode(value: 'vrdNode' = None):
        '''
        Sets the node that has been hit.
        '''
        pass

    @staticmethod
    def setNormal(value: 'QVector3D' = None):
        '''
        Sets the hit normal.
        '''
        pass

    @staticmethod
    def setOrigin(value: 'QVector3D' = None):
        '''
        Sets the origin of the ray that has been used for the intersection test.
        '''
        pass

    @staticmethod
    def setPoint(value: 'QVector3D' = None):
        '''
        Sets the point that has been hit.
        '''
        pass

    @staticmethod
    def setUV(value: 'QVector2D' = None):
        '''
        Sets the uv coordinates of the texture where the hit occured.
        '''
        pass

    @staticmethod
    def vrdRayIntersection():
        '''
        Default constructor.
        '''
        pass
