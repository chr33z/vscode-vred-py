
# Autogenerated method stubs for 'vrFileIO.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def exportSelectedSurface(filename, version):
    '''
    Saves selected geometry file.

@param filename: The name of the geometry file.

@type filename: string

@param version: The version of the IGES file (0: OpenCascade Import, 1: vCAD Import).

@type version: int

@return: Returns true on success, false otherwise.

@rtype: bool
    '''
    pass



def findFile(filename):
    '''
    Find a filename relative to the fileio base directory.

@param filename: The relative filename.

@type filename: string

@return: The absolute file path.

@rtype: string
    '''
    pass



def getApproximationEnabled():
    '''
    Returns if body approximation is enabled in import.

@return: true if body approximation is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getDisableMultithreadedImport():
    '''
    Returns if internal multithreading is disabled in CAD import.

@return: true if multithreading is disabled, otherwise false.

@rtype: bool
    '''
    pass



def getFileIOBaseDir():
    '''
    Returns the base dir of the project.

@return: The directory name.

@rtype: string
    '''
    pass



def getFileIOFilePath():
    '''
    Returns the current loaded file path.

@return: The file path.

@rtype: string
    '''
    pass



def getFixSurfaceOrientation():
    '''
    Returns if surface normals should be unified in import.

@return: true if normal unification is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getHealStitchEnabled():
    '''
    Returns if additional healing while stitch is enabled in import.

@return: true if heal stitch is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportAssociativeMeshes():
    '''
    Returns if import should contain associative mesh geometry. (Catia V5, NX, STEP)

@return: true if import of mesh associative geometry is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportBookmarks():
    '''
    Returns if import should contain bookmarks.

@return: true if import of bookmarks is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportCameras():
    '''
    Returns if import should contain cameras.

@return: true if import of cameras is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportCurves():
    '''
    Returns if import should contain independent curves and poly-lines.

@return: true if import of independent curves and poly-lines is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportEmptyLayers():
    '''
    Returns if import should contain empty layers.

@return: true if import of empty layers is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportInvisibleCurves():
    '''
    Returns if import should contain invisible independent curves and poly-lines.

@return: true if import of invisible independent curves and poly-lines is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportInvisibleInstances():
    '''
    Returns if import of invisible instances is enabled. Usually used to filter geometries not needed in VRED and improve import performance.

@return: true if import of invisible instances is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportInvisibleMeshes():
    '''
    Returns if import should contain invisible mesh geometry.

@return: true if import of invisible mesh geometry is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportInvisibleSurfaces():
    '''
    Returns if import should contain invisible NURB surfaces.

@return: true if import of invisible NURB surfaces is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportLights():
    '''
    Returns if import should contain lights.

@return: true if import of lights is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportMeshes():
    '''
    Returns if import should contain mesh geometry.

@return: true if import of mesh geometry is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportParts():
    '''
    Returns if import of part files is enabled.

@return: true if import of part files is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportSurfaces():
    '''
    Returns if import should contain NURB surfaces.

@return: true if import of NURB surfaces is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getImportTemplateGeometries():
    '''
    Returns if import should contain template geometries.

@return: true if import of template geometries is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getMaxParallelImportTasks():
    '''
    Returns maximum parallelism of part file import when importing an assembly.

@return: maximum number of parallel import tasks when importing part files from assembly.

@rtype: int
    '''
    pass



def getRobustTessellationEnabled():
    '''
    Returns if more robust tessellation algorithm is enabled.

@return: true if more robust tessellation algorithm is enabled, otherwise false.

@rtype: bool
    '''
    pass



def getVREDDataDir():
    '''
    Returns the VRED data path.

@return: path.

@rtype: string
    '''
    pass



def getVREDDir():
    '''
    Returns the VRED installation path.

@return: path.

@rtype: string
    '''
    pass



def getVREDExamplesDir():
    '''
    Returns the VRED examples path.

@return: path.

@rtype: string
    '''
    pass



def getVServerScene():
    '''
    Returns the current vserver scene path.

@return: file path.

@rtype: string
    '''
    pass



def isLoading():
    '''
    Returns loading file state.

@return: loading file state.

@rtype: bool
    '''
    pass



def load(filename, filenames, parent, newFile, showImportOptions):
    '''
    Function signatures: load(fileName), load(fileNames), load(fileNames, parent, newFile, showImportOptions)

Loads a single or multiple files with wildcard support from disk. The loaded node is automatically attached to the root of the scenegraph.

The function can be called with a single filename or a list of filenames.

Supported file formats are the same as for (File -> Open) in the UI.

When loading from import file formats, no import dialog is shown. The loaded geometry is tessellated with the tessellation settings that are set in preferences or that have been last used for import. Tessellation settings can also be setup with L{setTessellationOptions}.

Data from VRED file formats (project files .vpb and .osb) is validated and updated to the current VRED version if the file contains data from old VRED versions. Also, it is ensured that only one set of default cameras is in the scene.

VRED modules (e.g. Material Editor) are notified about the loaded data.

@param filename: A single filename.

@type filename: string

@param filenames: A list of filenames.

@type filenames: list of strings

@param parent: Scenegraph parent node.

@type parent: vrNodePtr

@param newFile: False means add and true means calls new scene and load the files.

@type newFile: bool

@param showImportOptions: Show import dialog options.

@type showImportOptions: bool

@return: Returns true on success, false otherwise.

@rtype: bool
    '''
    pass



def loadGeometry(filename):
    '''
    Loads a geometry file. The geometry is not attached to the scenegraph (and because of this not rendered), instead the user is responsible to attach it to the correct location in the scenegraph (see addChild method in vrNodePtr class).

@param filename: The name of the geometry file.

@type filename: string

@return: Returns the root node of the geometry on success, NullFC otherwise.

@rtype: vrNodePtr
    '''
    pass



def loadOSB(filename):
    '''
    Loads a single or multiple osb files from disk. The loaded node is automatically attached to the root of the scenegraph.

Nodes are loaded from file exactly like they have been saved, without any validation of the loaded data.

Data from older VRED versions is not converted.

Modules (except Scenegraph) are not informed about the loaded content.

To load data from osb with validation use L{load}.

@param filename: A list of filenames.

@type filename: list of strings

@return: Returns a list of root nodes added by this command.

@rtype: list of vrNodePtr
    '''
    pass



def save(filename):
    '''
    Saves a geometry, script or project file.

@param filename: The name of the file.

@type filename: string

@return: Returns true on success, false otherwise.

@rtype: bool
    '''
    pass



def saveGeometry(root, filename):
    '''
    Saves a geometry file.

@param root: The root node.

@type root: vrNodePtr

@param filename: The name of the geometry file.

@type filename: string

@return: Returns true on success, false otherwise.

@rtype: bool
    '''
    pass



def saveGeometryNoSwapCubeMaps():
    '''
    Saves geometry without swapping the cube maps.

@return: Returns true on success, false otherwise.

@rtype: bool
    '''
    pass



def saveSelectedGeometry(filename, includeEnvironmentGeometries):
    '''
    Saves selected geometry file.

@param filename: The name of the geometry file.

@type filename: string

@param includeEnvironmentGeometries: Defines if environment geometry switch should be included in the saved file (Optional).

@type includeEnvironmentGeometries: bool

@return: Returns true on success, false otherwise.

@rtype: bool
    '''
    pass



def setApproximationEnabled():
    '''
    @param enable_approximation: Enables body approximation in import. Disabling body approximation might speed up import but can rarely create geometric glitches.

@type enable_approximation: bool
    '''
    pass



def setConvertToUberMaterials(value):
    '''
    Deprecated. Imported materials should always be converted to UberMaterials.

@param value: convert true/false.

@type value: bool
    '''
    pass



def setDisableMultithreadedImport():
    '''
    @param disable_multithreading: Disables/enables internal multithreading in CAD import. Should only be disabled if import runs out of memory. Might degrade import performance

@type disable_multithreading: bool
    '''
    pass



def setFileIOKey(key):
    '''
    Sets the current fileo key for crypted vpb files.

@param key: key string.

@type key: string
    '''
    pass



def setFileIOMergeEnvironmentOption(option):
    '''
    Sets the current vred project file merge behavior when adding a vpb file.

@param option: 0 = Use from scene, 1 = Use from file, 2 = Add from file, 3 = Merge.

@type option: int
    '''
    pass



def setFileIOMergeMaterials(merge):
    '''
    Sets the current vred project file merge behavior when adding a vpb file.

@param merge: true for merging.

@type merge: boolean
    '''
    pass



def setFileIOMergeProjectAnimations(import):
    '''
    Sets the value for importing animations when loading VRED files.

@param import: true for import.

@type import: boolean
    '''
    pass



def setFileIOMergeProjectAnnotations(merge):
    '''
    Sets the current vred project file merge behavior when adding a vpb file.

@param merge: true for merging.

@type merge: boolean
    '''
    pass



def setFileIOMergeProjectClips(import):
    '''
    Sets the value for importing animation clips when loading VRED files.

@param import: true for import.

@type import: boolean
    '''
    pass



def setFileIOMergeProjectSequences(merge):
    '''
    Sets the current vred project file merge behavior when adding a vpb file.

@param merge: true for merging.

@type merge: boolean
    '''
    pass



def setFileIOMergeProjectTouchSensors(merge):
    '''
    Sets the current vred project file merge behavior when adding a vpb file.

@param merge: true for merging.

@type merge: boolean
    '''
    pass



def setFileIOMergeProjectVariants(merge):
    '''
    Sets the current vred project file merge behavior when adding a vpb file.

@param merge: true for merging.

@type merge: boolean
    '''
    pass



def setFileIOValidationKey(vkey):
    '''
    Sets the current fileo validation key for crypted vpb files.

@param vkey: validation key string.

@type vkey: string
    '''
    pass



def setFixSurfaceOrientation():
    '''
    @param fix_surface_orientation: Enables surface normal unification in import.

@type fix_surface_orientation: bool
    '''
    pass



def setHealStitchEnabled():
    '''
    @param enable_heal_stitch: Enables additional healing while stitch in import. Disabling heal stitch might speed up import but can rarely create geometric glitches.

@type enable_heal_stitch: bool
    '''
    pass



def setImportApplyMaterialsFromAssetManager(apply):
    '''
    Sets the value for applying materials from asset manager when importing a file.

@param apply: true for apply.

@type apply: boolean
    '''
    pass



def setImportAssociativeMeshes():
    '''
    @param enable_associative_meshes: Enables import of associative mesh geometry. (Catia V5, NX, STEP)

@type enable_associative_meshes: bool
    '''
    pass



def setImportBookmarks():
    '''
    @param enable_bookmarks: Enables import of bookmarks.

@type enable_bookmarks: bool
    '''
    pass



def setImportCameras():
    '''
    @param enable_cameras: Enables import of cameras.

@type enable_cameras: bool
    '''
    pass



def setImportCenterInOrigin(centerInOrigin):
    '''
    Sets the value for centering loaded geometry in origin.

@param centerInOrigin: true for center in origin.

@type centerInOrigin: boolean
    '''
    pass



def setImportCurves():
    '''
    @param enable_curves: Enables import of independent curve and polyline geometries.

@type enable_curves: bool
    '''
    pass



def setImportEmptyLayers():
    '''
    @param enable_empty_layers: Enables import of empty layers.

@type enable_empty_layers: bool
    '''
    pass



def setImportInvisibleCurves():
    '''
    @param enable_invisible_curves: Enables import of invisible indipendent curve and polyline geometries.

@type enable_invisible_curves: bool
    '''
    pass



def setImportInvisibleInstances(enable_invisible_instances):
    '''
    Switch import of invisible instances. Usually used to filter geometries not needed in VRED and improve import performance.

@param enable_invisible_instances: Enables import of invisible instances.

@type enable_invisible_instances: bool
    '''
    pass



def setImportInvisibleMeshes():
    '''
    @param enable_invisible_meshes: Enables import of mesh geometry.

@type enable_invisible_meshes: bool
    '''
    pass



def setImportInvisibleSurfaces():
    '''
    @param enable_invisible_surfaces: Enables import of invisible NURB surfaces.

@type enable_invisible_surfaces: bool
    '''
    pass



def setImportLights():
    '''
    @param enable_lights: Enables import of lights.

@type enable_lights: bool
    '''
    pass



def setImportMeshes():
    '''
    @param enable_meshes: Enables import of mesh geometry.

@type enable_meshes: bool
    '''
    pass



def setImportParts(enable_parts):
    '''
    Switch import of part files refereced in assemblies.

@param enable_parts: Enables import of part files.

@type enable_parts: bool
    '''
    pass



def setImportPutOnGround(putOnGround):
    '''
    Sets the value for putting loaded geometry on the zero plane.

@param putOnGround: true for put on ground.

@type putOnGround: boolean
    '''
    pass



def setImportSurfaces():
    '''
    @param enable_surfaces: Enables import of NURB surfaces.

@type enable_surfaces: bool
    '''
    pass



def setImportTemplateGeometries():
    '''
    @param enable_template_geometries: Enables import of template geometries.

@type enable_template_geometries: bool
    '''
    pass



def setMaxParallelImportTasks():
    '''
    @param max_parallel_tasks: Set maximum number of parallel import tasks, used for parrallel reading part files from assembly.

@type max_parallel_tasks: int
    '''
    pass



def setRobustTessellationEnabled():
    '''
    @param robust_tessellation: Enables more robust tessellation algorithm. Might slow down import. Only needed if geometric glitches appear on tessellated bodies.

@type robust_tessellation: bool
    '''
    pass



def setTessellationOptions(chord_deviation, normal_tolerance, max_chord_length, stitching, stitching_tolerance, mergegeometries, keep_nurbs, create_layer_groups, remove_groups, unshare_nodes, flush_transforms):
    '''
    Sets the tessellation parameters to use when loading a file.

@param chord_deviation: The chord deviation. Lower values create a more accurate fit to the NURBS surface but also increase triangle count.

@type chord_deviation: float

@param normal_tolerance: The normal tolerance limits the allowed difference between the normals of a triangle edge. Lower values create smoother normals but increase the triangle count. 

@type normal_tolerance: float

@param max_chord_length: The maximum length of a triangle edge.

@type max_chord_length: float

@param stitching: Enables stitching.

@type stitching: bool

@param stitching_tolerance: Sets the stitching tolerance. Only edges inside the tolerance can be stitched.

@type stitching_tolerance: float

@param mergegeometries: Merges triangle geometries and creates shells if present.

@type mergegeometries: bool

@param keep_nurbs: Keeps the nurbs information to allow retessellation later on.

@type keep_nurbs: bool

@param create_layer_groups: Creates groups for layers.

@type create_layer_groups: bool

@param remove_groups: Removes any empty hierarchy branches.

@type remove_groups: bool

@param unshare_nodes: If set to true, all clone connections are disrupted.

@type unshare_nodes: bool

@param flush_transforms: If set to true, moves transform information to the geometry on lowest level.

@type flush_transforms: bool
    '''
    pass



def setVServerScene(scene):
    '''
    Sets the current vserver scene path.

@param scene: The vserver scene path.

@type scene: string
    '''
    pass



def unloadGeometry(node, filename):
    '''
    Unloads a geometry file.

@param node: The node to unload.

@type node: NodePtr

@param filename: The name of the geometry file.

@type filename: string
    '''
    pass



def vrFileClearTmpDir():
    '''
    Deletes all files in the temporary directory.
    '''
    pass



def vrFileGetTmpDir():
    '''
    Returns a temporary filepath.

@return: The filepath.

@rtype: string
    '''
    pass



def vrFileRemoveTmpFile(filename):
    '''
    Deletes a file in the temporary directory.

@param filename: The filename to remove.

@type filename: string

@return: Returns true on success, false otherwise.

@rtype: bool
    '''
    pass


