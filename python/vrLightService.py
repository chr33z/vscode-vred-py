'''
vrLightService
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Interface to access lights, light sets and lens flares in VRED.
'''

from typing import List


class vrdLensFlareEffect():
    pass


class vrdBaseLightNode():
    pass


class vrdLensFlareGhost():
    pass


class LightType():
    pass


class vrdLensFlareGhostLine():
    pass


class vrdLensFlareElement():
    pass


class vrdNode():
    pass


class vrdLightLinkSetNode():
    pass


class vrdPointLightNode():
    pass


def convertLight(lightNode: vrdNode, lightType: LightType):
    '''
    Converts a light node to a light of another type. Note: This will invalidate this node object.
    '''
    pass


def convertLights(nodes: List[vrdNode], lightType: LightType):
    '''
    Converts light nodes to lights of another type. Note: This will invalidate these node objects.
    '''
    pass


def copyLensFlare(effect: vrdLensFlareEffect):
    '''
    Adds a lens flare effect to the copy buffer.
    '''
    pass


def copyLensFlareElements(elements: List[vrdLensFlareElement]):
    '''
    Add lens flares to the copy buffer.
    '''
    pass


def copyLensFlareGhosts(ghosts: List[vrdLensFlareGhost]):
    '''
    Copy all ghosts to copy buffer.
    '''
    pass


def createLight(name: str, type: LightType, parent: vrdNode) -> vrdNode:
    '''
    Create a new light node in light graph.
    '''
    return None


def createLightGroup(name: str, parent: vrdNode) -> vrdNode:
    '''
    Create a new light group.
    '''
    return None


def createLightGroup(name: str, nodes: List[vrdNode]) -> vrdNode:
    '''
    Create a new light group out of some lights.
    '''
    return None


def createLightLinkSet(name: str) -> vrdLightLinkSetNode:
    '''
    Create a new light link set.
    '''
    return None


def duplicateLensFlareElements(light: vrdPointLightNode, elements: List[vrdLensFlareElement]):
    '''
    Duplicates lens flare elements of a light and adds them to the same light.
    '''
    pass


def duplicateLensFlareGhosts(ghostLine: vrdLensFlareGhostLine, ghosts: List[vrdLensFlareGhost]):
    '''
    Duplicates lens flare ghosts of a ghost line and adds them to the same ghost line.
    '''
    pass


def duplicateLights(nodes: List[vrdNode]):
    '''
    Duplicate all given light nodes from light graph. The duplicated nodes will be added under the same parent as the original node.
    '''
    pass


def findLight(name: str) -> vrdNode:
    '''
    Find a light node with a given name in the light graph.
    '''
    return None


def findLights(name: str) -> List[vrdNode]:
    '''
    Find all light nodes with a given name.
    '''
    return None


def getAllLights(sceneGraph: bool) -> List[vrdNode]:
    '''
    Return all light nodes.
    '''
    return None


def getHeadlight() -> vrdBaseLightNode:
    '''
    Returns the head light node.
    '''
    return None


def getLightLinksRoot() -> vrdNode:
    '''
    Returns the root node of light sets, that contains all light sets.
    '''
    return None


def getLightRoot() -> vrdNode:
    '''
    Returns the root node of lights, that contains all lights and lens flares.
    '''
    return None


def getSelectedLensFlareElements() -> List[vrdLensFlareElement]:
    '''
    Get the selected lens flare elements.
    '''
    return None


def getSelectedLensFlareGhosts() -> List[vrdLensFlareGhost]:
    '''
    Gets currently selected ghosts.
    '''
    return None


def getSelectedNodes() -> List[vrdNode]:
    '''
    Returns all current selected light nodes from internal buffer.
    '''
    return None


def hasCopiedGhosts() -> bool:
    '''
    Check if ghost elements are available in clipboard.
    '''
    return None


def hasCopiedLensFlareEffect() -> bool:
    '''
    Checks is a lens flare effect is available in the clipboard.
    '''
    return None


def hasCopiedLensFlareElements() -> bool:
    '''
    Check if lens flare elements are available in clipboard.
    '''
    return None


def isHeadLight(light: vrdBaseLightNode) -> bool:
    '''
    Check if the given node is the head light node.
    '''
    return None


def loadLights(paths: List[str]) -> List[vrdNode]:
    '''
    load lights from OpenSG Binary Geometry or VRED Project Binary file
    '''
    return None


def pasteLensFlare(lights: List[vrdPointLightNode]):
    '''
    Pastes a lens flare effect from the copy buffer to one or more lights.
    '''
    pass


def pasteLensFlareElements(light: vrdPointLightNode):
    '''
    Pastes lens flare elements from the clipboard to a light.
    '''
    pass


def pasteLensFlareGhosts(ghostLine: vrdLensFlareGhostLine):
    '''
    Paste all ghosts from copy buffer to a ghost line.
    '''
    pass


def removeLightLinkSets(nodes: List[vrdLightLinkSetNode]):
    '''
    Remove light link sets.
    '''
    pass


def removeLights(nodes: List[vrdNode]):
    '''
    Remove all given light nodes from light graph.
    '''
    pass


def saveLights(nodes: List[vrdNode], path: str) -> bool:
    '''
    Collects all lights recursively in the given nodes and saves them as a OpenSG Binary Geometry file.
    '''
    return None


def setSelectedLensFlareElements(elements: List[vrdLensFlareElement]):
    '''
    Set all selected lens flare elements.
    '''
    pass


def setSelectedLensFlareGhosts(ghosts: List[vrdLensFlareGhost]):
    '''
    Set selected ghosts. All currently selected ghosts will be reset to not select. A         vrLightService.lensFlareGhostSelectionChanged(ghosts) signal will be emitted.
    '''
    pass


def setSelectedNodes(nodes: List[vrdNode]):
    '''
    Set all selected light nodes. All current selected nodes will be reset to not select. Almost all commands of light service works on selected nodes. A         vrLightService.nodeSelectionChanged(nodes) signal will be emitted.
    '''
    pass


def validateLights():
    '''
    Validates if all lights in the scene graph have a corresponding light in the light graph and vice versa. Lights without a valid parent will be removed. A         vrLightService.lightsValidated() signal will be emitted.
    '''
    pass


def lensFlareElementSelectionChanged(elements: List[vrdLensFlareElement]):
    '''
    Signal will be emitted if selection buffer of lens flare elements was changed.
    '''
    pass


def lensFlareGhostSelectionChanged(ghosts: List[vrdLensFlareGhost]):
    '''
    Signal will be emitted if the list of selected ghost was changed.
    '''
    pass


def lightLinkSetsChanged():
    '''
    Signal will be emitted if light link set are added or removed.
    '''
    pass


def lightsConverted(lightIds: List[int]):
    '''
    Signal that will be emitted when lights are converted to different light types.
    '''
    pass


def lightsStateChanged():
    '''
    Signal is emitted when then on/off state of any light changes in either the light graph or the scene graph.
    '''
    pass


def lightsValidated():
    '''
    Signal that is send after lights have been validated.
    '''
    pass


def nodesAdded(nodes: List[vrdNode]):
    '''
    Signal will be emitted if light nodes was added.
    '''
    pass


def nodesChanged(nodes: List[vrdNode]):
    '''
    Signal will be emitted if light nodes was changed.
    '''
    pass


def nodeSelectionChanged(nodes: List[vrdNode]):
    '''
    Signal will be emitted if selection buffer of light nodes was changed.
    '''
    pass


def nodesRemoved(nodes: List[vrdNode]):
    '''
    Signal will be emitted if light nodes was removed.
    '''
    pass

