'''
Autogenerated Method-Stub for:
module vrLightService
------------------------------------------

API version: v2
Generation Date: 2020-04-24

VRED-Py: Visual Studio Code Tools for Autodesk VRED
'''

from typing import List



def convertLight(lightNode, lightType):
    '''
    Converts a light node to a light of another type. Note: This will invalidate this node object.
    '''
    pass



def convertLights(nodes, lightType):
    '''
    Converts light nodes to lights of another type. Note: This will invalidate these node objects.
    '''
    pass



def copyLensFlare(effect):
    '''
    Adds a lens flare effect to the copy buffer.
    '''
    pass



def copyLensFlareElements(elements):
    '''
    Add lens flares to the copy buffer.
    '''
    pass



def copyLensFlareGhosts(ghosts):
    '''
    Copy all ghosts to copy buffer.
    '''
    pass



def createLight(name, type, parent):
    '''
    Create a new light node in light graph.
    '''
    pass



def createLightGroup(name, parent):
    '''
    Create a new light group.
    '''
    pass



def createLightGroup(name, nodes):
    '''
    Create a new light group out of some lights.
    '''
    pass



def createLightLinkSet(name):
    '''
    Create a new light link set.
    '''
    pass



def duplicateLensFlareElements(light, elements):
    '''
    Duplicates lens flare elements of a light and adds them to the same light.
    '''
    pass



def duplicateLensFlareGhosts(ghostLine, ghosts):
    '''
    Duplicates lens flare ghosts of a ghost line and adds them to the same ghost line.
    '''
    pass



def duplicateLights(nodes):
    '''
    Duplicate all given light nodes from light graph. The duplicated nodes will be added under the same parent as the original node.
    '''
    pass



def findLight(name):
    '''
    Find a light node with a given name in the light graph.
    '''
    pass



def findLights(name):
    '''
    Find all light nodes with a given name.
    '''
    pass



def getAllLights(sceneGraph):
    '''
    Return all light nodes.
    '''
    pass



def getHeadlight():
    '''
    Returns the head light node.
    '''
    pass



def getLightLinksRoot():
    '''
    Returns the root node of light sets, that contains all light sets.
    '''
    pass



def getLightRoot():
    '''
    Returns the root node of lights, that contains all lights and lens flares.
    '''
    pass



def getSelectedLensFlareElements():
    '''
    Get the selected lens flare elements.
    '''
    pass



def getSelectedLensFlareGhosts():
    '''
    Gets currently selected ghosts.
    '''
    pass



def getSelectedNodes():
    '''
    Returns all current selected light nodes from internal buffer.
    '''
    pass



def hasCopiedGhosts():
    '''
    Check if ghost elements are available in clipboard.
    '''
    pass



def hasCopiedLensFlareEffect():
    '''
    Checks is a lens flare effect is available in the clipboard.
    '''
    pass



def hasCopiedLensFlareElements():
    '''
    Check if lens flare elements are available in clipboard.
    '''
    pass



def isHeadLight(light):
    '''
    Check if the given node is the head light node.
    '''
    pass



def loadLights(paths):
    '''
    load lights from OpenSG Binary Geometry or VRED Project Binary file
    '''
    pass



def pasteLensFlare(lights):
    '''
    Pastes a lens flare effect from the copy buffer to one or more lights.
    '''
    pass



def pasteLensFlareElements(light):
    '''
    Pastes lens flare elements from the clipboard to a light.
    '''
    pass



def pasteLensFlareGhosts(ghostLine):
    '''
    Paste all ghosts from copy buffer to a ghost line.
    '''
    pass



def removeLightLinkSets(nodes):
    '''
    Remove light link sets.
    '''
    pass



def removeLights(nodes):
    '''
    Remove all given light nodes from light graph.
    '''
    pass



def saveLights(nodes, path):
    '''
    Collects all lights recursively in the given nodes and saves them as a OpenSG Binary Geometry file.
    '''
    pass



def setSelectedLensFlareElements(elements):
    '''
    Set all selected lens flare elements.
    '''
    pass



def setSelectedLensFlareGhosts(ghosts):
    '''
    Set selected ghosts. All currently selected ghosts will be reset to not select. A         vrLightService.lensFlareGhostSelectionChanged(ghosts) signal will be emitted.
    '''
    pass



def setSelectedNodes(nodes):
    '''
    Set all selected light nodes. All current selected nodes will be reset to not select. Almost all commands of light service works on selected nodes. A         vrLightService.nodeSelectionChanged(nodes) signal will be emitted.
    '''
    pass



def validateLights():
    '''
    Validates if all lights in the scene graph have a corresponding light in the light graph and vice versa. Lights without a valid parent will be removed. A         vrLightService.lightsValidated() signal will be emitted.
    '''
    pass


