
# Autogenerated method stubs for 'vrAnimWidgets.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def addChoiceControlPoint(node, time, value):
    '''
    Adds control points to choice channel of node.

@param node: Node

@type node: NodePtr

@param time: Time value for control points

@type time: Real32

@param value: Choice value

@type value: Int32

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addChoiceControlPoints(node, times, values):
    '''
    Adds multiple control points to choice channel of node.

@param node: Node

@type node: NodePtr

@param times: Time values for control points

@type times: std::vector<Real32>

@param values: Choice values

@type values: std::vector<Int32>

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addRotationControlPoint(node, time, rot):
    '''
    Adds control points to rotation channel of node.

@param node: Node

@type node: NodePtr

@param time: Time value for control points

@type time: Real32

@param rot: Rotation value

@type rot: Vec3f

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addRotationControlPoints(node, times, rots):
    '''
    Adds multiple control points to rotation channel of node.

@param node: Node

@type node: NodePtr

@param times: Time values for control points

@type times: std::vector<Real32>

@param rots: Rotation values

@type rots: std::vector<Vec3f>

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addRotationOrientationControlPoint(node, time, rot):
    '''
    Adds control points to rotation orientation channel of node.

@param node: Node

@type node: NodePtr

@param time: Time value for control points

@type time: Real32

@param rot: Rotation value

@type rot: Vec3f

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addRotationOrientationControlPoints(node, times, rots):
    '''
    Adds multiple control points to rotation orientation channel of node.

@param node: Node

@type node: NodePtr

@param times: Time values for control points

@type times: std::vector<Real32>

@param rots: Rotation values

@type rots: std::vector<Vec3f>

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addScaleControlPoint(node, time, scale):
    '''
    Adds control points to scale channel of node.

@param node: Node

@type node: NodePtr

@param time: Time value for control points

@type time: Real32

@param scale: Scale value

@type scale: Vec3f

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addScaleControlPoints(node, times, scales):
    '''
    Adds multiple control points to scale channel of node.

@param node: Node

@type node: NodePtr

@param times: Time values for control points

@type times: std::vector<Real32>

@param scales: Scale values

@type scales: std::vector<Vec3f>

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addTranslationControlPoint(node, time, trans, updateGui):
    '''
    Adds control points to translation channel of node.

@param node: Node

@type node: NodePtr

@param time: Time value for control points

@type time: Real32

@param trans: Translation value

@type trans: Vec3f

@param updateGui: GUI update

@type updateGui: bool@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addTranslationControlPoints(node, times, trans, updateGui):
    '''
    Adds multiple control points to translation channel of node.

@param node: Node

@type node: NodePtr

@param times: Time values for control points

@type times: std::vector<Real32>

@param trans: Translation values

@type trans: std::vector<Vec3f>

@param updateGui: GUI update

@type updateGui: bool@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addVisibleControlPoint(node, time, value):
    '''
    Adds control points to visible channel of node.

@param node: Node

@type node: NodePtr

@param time: Time value for control points

@type time: Real32

@param value: Visible value

@type value: Real32

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def addVisibleControlPoints(node, times, values):
    '''
    Adds multiple control points to visible channel of node.

@param node: Node

@type node: NodePtr

@param times: Time values for control points

@type times: std::vector<Real32>

@param values: Visible values

@type values: std::vector<Real32>

@return: True if added, false otherwise

@rtype: bool
    '''
    pass



def animateClippingTransform():
    '''
    Loads the clipping transform node into curve editor.
    '''
    pass



def createAnimationBlockForMaterial(node, updateGui):
    '''
    Creates an animation block for passed material (if possible).

@param node: Material

@type node: MaterialPtr

@param updateGui: Trigger gui update

@type updateGui: Bool

@return: True if created, false otherwise

@rtype: bool
    '''
    pass



def createAnimationBlockForNode(node, updateGui):
    '''
    Creates an animation block for passed node (if possible).

@param node: Node

@type node: NodePtr

@param updateGui: Trigger gui update

@type updateGui: Bool

@return: True if created, false otherwise

@rtype: bool
    '''
    pass



def getAnimBlockNodes(includeHidden):
    '''
    Gets all animation block nodes from scene.

@param includeHidden: Include hidden blocks

@type includeHidden: Bool

@return: Animation Blocks

@rtype: std::vector<vrNodePtr>
    '''
    pass



def getAnimBlocks(includeHidden):
    '''
    Gets all animation block names from scene.

@param includeHidden: Include hidden blocks

@type includeHidden: Bool

@return: Animation Blocks

@rtype: std::vector<std::string>
    '''
    pass



def getAnimClipNodes():
    '''
    Gets all top-level animation clip nodes from scene.

@return: Animation Clips

@rtype: std::vector<vrNodePtr>
    '''
    pass



def getAnimClips():
    '''
    Gets all top-level animation clip names from scene.

@return: Animation Clips

@rtype: std::vector<std::string>
    '''
    pass



def getCurrentFrame():
    '''
    Gets the current frame of the time line.

@return: Current frame

@rtype: Real64
    '''
    pass



def isPlaying():
    '''
    Returns if object with given name is playing.

@return: True if playing, false otherwise

@rtype: bool
    '''
    pass



def keyAll():
    '''
    Sets a keyframe for all attributes.
    '''
    pass



def keySelected():
    '''
    Sets a keyframe for selected attributes.
    '''
    pass



def playCAnimation(name, name):
    '''
    Plays an animation block or animation clip via name. This function returns immediatly.

@param name: name of the animation object

@type name: string

Plays an animation block or animation clip via name. This function returns immediatly.

@param name: name of the animation object

@type name: string
    '''
    pass



def resetAnim(name):
    '''
    Resets the animation block or clip via name.

@param name: name of the animation object

@type name: string
    '''
    pass



def resetCAnimation(name):
    '''
    Resets the animation block or clip via name.

@param name: name of the animation object

@type name: string
    '''
    pass



def restoreAnimation(node):
    '''
    Restores animation from trash.

@param node: Node of animation object

@type node: NodePtr

@return: True if restored, false otherwise

@rtype: bool
    '''
    pass



def restoreAnimations(nodes):
    '''
    Restores a list of animation from trash.

@param nodes: Nodes of animation objects

@type nodes: std::vector<AnimNodePtr>

@return: True if restored, false otherwise

@rtype: bool
    '''
    pass



def setCurrentFrame(frame):
    '''
    Sets the current frame of the time line.

@param frame: Frame

@type frame: Real64
    '''
    pass



def stopAnim(name):
    '''
    Stops the animation evaluation of an animation block or animation clip via name.

@param name: name of the animation object

@type name: string
    '''
    pass



def trashAnimation(node):
    '''
    Moves animation to trash.

@param node: Animation node or parent object node

@type node: NodePtr

@return: True if trashed, false otherwise

@rtype: bool
    '''
    pass



def trashAnimations(nodes):
    '''
    Moves  a list of animation to trash.

@param nodes: Animation nodes or parent object nodes

@type nodes: std::vector<vrNodePtr>

@return: True if trashed, false otherwise

@rtype: bool
    '''
    pass


