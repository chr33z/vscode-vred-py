'''
vrFileIOService
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Aborts an import job.
'''

from typing import List


class vrdAtfSettings():
    pass


class integer():
    pass


class vrdNode():
    pass


class JobState():
    pass


class vrdSceneImportSettings():
    pass


class string():
    pass


class vrdProjectMergeSettings():
    pass


class FileExtensionFilterMode():
    pass


class FileType():
    pass


def abortImport(importId: integer):
    '''
    Aborts an import job.
    '''
    pass


def checkCadType(file: string):
    '''
    Asynchronously starts querying the CAD file type of a file with the given file path. After succesfully querying the type or looking it up in a cache a fileTypeReceived signal is emited. This might be needed since some file extensions, i.E. .prt, can’t be clearly associated to a single file type.
    '''
    pass


def getBaseFileSuffix(file: string) -> string:
    '''
    Returns the file extension.
    '''
    return None


def getFileName() -> string:
    '''
    Gets the current file name.
    '''
    return None


def getFileTypeByFileName(file: string) -> FileType:
    '''
    Gets the file type by file name.
    '''
    return None


def getImageReadFilter() -> string:
    '''
    This returns a space separated list of the the supported image file types that can be loaded.
    '''
    return None


def getImageWriteFilter() -> string:
    '''
    This returns a space separated list of the the supported image file types that can be saved.
    '''
    return None


def getImportSettings(fileType: FileType) -> vrdAtfSettings:
    '''
    Gets the current import settings for a given CAD file type.
    '''
    return None


def getImportSettingsFromPreferences(fileType: FileType) -> vrdAtfSettings:
    '''
    Gets the import settings from preferences.
    '''
    return None


def getMaxNumImportProcesses() -> integer:
    '''
    Returns the maximum number import processes.
    '''
    return None


def getMergeProjectAnnotations() -> bool:
    '''
    Flag indicates if annotations contained in a project file should be merged after loading.
    '''
    return None


def getProjectMergeSettings() -> vrdProjectMergeSettings:
    '''
    Gets the project merge settings.
    '''
    return None


def getReadFileTypesFilter(mode: FileExtensionFilterMode) -> string:
    '''
    Gets the filter for readable file types.
    '''
    return None


def getSceneImportSettings() -> vrdSceneImportSettings:
    '''
    Gets the scene current scene import settings.
    '''
    return None


def getStreamName() -> string:
    '''
    Gets the current stream name.
    '''
    return None


def getVREDDataDir() -> string:
    '''
    Gets the VRED data dir. This is the ‘data’ subfolder of the base directory.
    '''
    return None


def getVREDDir() -> string:
    '''
    Gets the base application directory.
    '''
    return None


def getVREDExamplesDir() -> string:
    '''
    Gets the VRED examples dir. This is the ‘examples’ subfolder of the base directory.
    '''
    return None


def getVREDFileTypesFilter() -> string:
    '''
    Gets the VRED file types filter.
    '''
    return None


def hasImportSettings(file: string) -> bool:
    '''
    Determines if there are import settings for a given file.
    '''
    return None


def hasImportSettings(fileType: FileType) -> bool:
    '''
    Determines if there are import settings for a given file type.
    '''
    return None


def hasSmartReferences(file: string) -> bool:
    '''
    Queries for a OSB or VPB file if it contains smart references.
    '''
    return None


def importAtfFile(file: string, parent: vrdNode) -> vrdNode:
    '''
    Imports a file with the ATF loader.
    '''
    return None


def importFiles(files: List[string], parent: vrdNode, atfConversionOutputDir: string, loadConvertedAtfFiles: bool, removeConvertedAtfFiles: bool, loadBehavior: bool) -> integer:
    '''
    Imports a list of files.
    '''
    return None


def importMissingFiles(node: vrdNode, removeConvertedAtfFiles: bool) -> integer:
    '''
    Imports missing files from a scene node.
    '''
    return None


def inlineImageSequences():
    '''
    Inlines all image sequences.
    '''
    pass


def isAtfFile(file: string) -> bool:
    '''
    Checks if the given file can be imported with ATF.
    '''
    return None


def isConvertedAtfTree(root: vrdNode) -> bool:
    '''
    Checks if a scene node is a converted ATF tree.
    '''
    return None


def isSupportedFile(file: string) -> bool:
    '''
    Checks if a given file can be imported.
    '''
    return None


def isVredProject(file: string) -> bool:
    '''
    Checks if the given file is a VRED project.
    '''
    return None


def jobBelongsToImport(jobId: integer, importId: integer) -> bool:
    '''
    Checks if an import identifier belongs to a given job.
    '''
    return None


def loadFile(file: string) -> bool:
    '''
    Loads a file.
    '''
    return None


def newFile():
    '''
    Destroy the current scene and create a new scene with an empty file name.
    '''
    pass


def reimportNodes(nodes: List[vrdNode]) -> List[vrdNode]:
    '''
    Reimports a list of nodes with referenced source files.
    '''
    return None


def saveFile(file: string) -> bool:
    '''
    Saves a file.
    '''
    return None


def setImportSettings(fileType: FileType, settings: vrdAtfSettings):
    '''
    Sets the import settings for a given file type.
    '''
    pass


def setMaxNumImportProcesses(value: integer):
    '''
    Sets the maximum number of import processes.
    '''
    pass


def setProjectMergeSettings(settings: vrdProjectMergeSettings):
    '''
    Sets the project merge settings.
    '''
    pass


def setSceneImportSettings(settings: vrdSceneImportSettings):
    '''
    Sets the scene import settings.
    '''
    pass


def undoInlineImageSequences():
    '''
    Removes all inlined image sequences.
    '''
    pass


def validateAtfTree():
    '''
    Documentation missing
    '''
    pass


def addedGeometry():
    '''
    Documentation missing
    '''
    pass


def addLoadedMaterial():
    '''
    Documentation missing
    '''
    pass


def childFileImportAdded(jobId: integer, parentFile: string, childFile: string):
    '''
    Emitted when a child cad file import was added.
    '''
    pass


def childFileImportFinished(jobId: integer, parentFile: string, childFile: string):
    '''
    Emitted when a child cad file import has finished.
    '''
    pass


def childrenFileConversionFinished(jobId: integer, parentFile: string, durationInSeconds: float):
    '''
    Emitted when the conversion of all child cad files has finsished.
    '''
    pass


def conversionFinished(importId: integer, durationInSeconds: float):
    '''
    Emitted when a file conversion job has finished.
    '''
    pass


def conversionProgressChanged(importId: integer, percent: integer, status: string):
    '''
    Emitted when the progress of the file conversion changes.
    '''
    pass


def exportedFile(filename: string):
    '''
    Emitted after a file has been exported.
    '''
    pass


def fileAddedToLoadQueue(jobId: integer, file: string):
    '''
    Emitted when a new cad file has been added to the load queue.
    '''
    pass


def fileAddedToScene(jobId: integer, file: string, node: vrdNode):
    '''
    Emitted when a cad file has been added to the current scene.
    '''
    pass


def fileConversionAborted(jobId: integer, file: string):
    '''
    Emitted when a cad file conversion has been aborted.
    '''
    pass


def fileConversionFailed(jobId: integer, file: string, description: string):
    '''
    Emitted when a cad file conversion has failed.
    '''
    pass


def fileConversionFinished(jobId: integer, file: string, state: JobState, durationInSeconds: float):
    '''
    Emitted when the conversion of a cad file has finished.
    '''
    pass


def fileConversionProgressChanged(jobId: integer, file: string, percent: integer, status: string):
    '''
    Emitted when the progress of a cad file conversion has changed.
    '''
    pass


def fileConversionStarted(jobId: integer, file: string):
    '''
    Emiited when the conversion of a cad file has started.
    '''
    pass


def fileConversionSucceded(jobId: integer, file: string):
    '''
    Emitted when a cad file conversion has succeded.
    '''
    pass


def fileLoadingFailed(jobId: integer, file: string, description: string):
    '''
    Emitted when loading of an imported cad file has failed.
    '''
    pass


def fileLoadingFinished(jobId: integer, file: string, state: JobState):
    '''
    Emitted when loading of an imported cad file has finished.
    '''
    pass


def fileLoadingProgressChanged(jobId: integer, file: string, percent: integer, status: string):
    '''
    Emitted when the loading progress of an imported cad file changes.
    '''
    pass


def fileLoadingStarted(jobId: integer, file: string):
    '''
    Emitted when loading of an imported cad file starts.
    '''
    pass


def fileTypeReceived(file: string, fileType: FileType):
    '''
    Emitted when a new cad file type has been received.
    '''
    pass


def importedFile(filename: string):
    '''
    Emitted after a file has been imported.
    '''
    pass


def importFinished(importId: integer, durationInSeconds: float):
    '''
    Emitted when an import job has finished.
    '''
    pass


def importProgressChanged(importId: integer, percent: integer):
    '''
    Emitted when the import progress is updated.
    '''
    pass


def loadedGeometry(filename: string, nodeid: integer):
    '''
    Emitted after a geometry has been loaded.
    '''
    pass


def newScene():
    '''
    Emitted after a new scene is created.
    '''
    pass


def preExportGeometry():
    '''
    Documentation missing
    '''
    pass


def preNewScene():
    '''
    Emitted before a new scene is created.
    '''
    pass


def progress(p: integer):
    '''
    Periodically emitted to provide a percentage value of how much of the file has been loaded.
    '''
    pass


def project():
    '''
    Documentation missing
    '''
    pass


def projectLoad(filename: string):
    '''
    Emitted when project loading starts.
    '''
    pass


def projectLoaded(filename: string):
    '''
    Emitted after a project has been successfully loaded. This signal is not sent if loading aborted with an error.
    '''
    pass


def projectLoadFinished(filename: string, success: bool):
    '''
    Emitted after a project has been loaded The signal will always be sent whether loading succeeded or not.
    '''
    pass


def projectMerged():
    '''
    Emitted after a project has been merged.
    '''
    pass


def projectSave(filename: string):
    '''
    Signal is emitted when a project is about to be saved.
    '''
    pass


def projectSaved(filename: string):
    '''
    Signal is emitted when a project has finished saving.
    '''
    pass


def savedGeometry(filename: string):
    '''
    Emitted after a geometry has been saved.
    '''
    pass


def sequences():
    '''
    Documentation missing
    '''
    pass


def startingConversion(importId: integer, fileCount: integer):
    '''
    Emitted when file conversion starts.
    '''
    pass


def startingImport(importId: integer, fileCount: integer):
    '''
    Emitted when a file import job is started.
    '''
    pass

