
# Autogenerated method stubs for 'vrMovieExport.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def createMovie(movie, filename, width, height, fps, startFrame, stopFrame, ssf, alpha, alphaRed, alphaGreen, alphaBlue, overwrite, alpha_premultiply, step, tonemap_hdr):
    '''
    Method to create a movie. Four sets of parameters are valid:

createMovie(filename,width,height,fps,startFrame,stopFrame,ssf,alpha,alphaRed,alphaGreen,alphaBlue,overwrite)

This method writes the movie in the specified resolution and supersampling and alpha channel and dpi. The movie starts with startFrame, ends with stopFrame and runs with fps frames per second. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. If overwrite is set to true an already existing file will be overwritten without an extra dialog. (This command is only available in VRED Professional.) 

createMovie(filename,width,height,fps,startFrame,stopFrame,ssf,alpha,alphaRed,alphaGreen,alphaBlue,overwrite,alpha_premultiply)

This method writes the movie in the specified resolution and supersampling and alpha channel and dpi. The movie starts with startFrame, ends with stopFrame and runs with fps frames per second. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. If overwrite is set to true an already existing file will be overwritten without an extra dialog. alpha_premultiply sets pre-multiplication of the alpha value on or off. (This command is only available in VRED Professional.) 

createMovie(filename,width,height,fps,startFrame,stopFrame,ssf,alpha,alphaRed,alphaGreen,alphaBlue,overwrite,alpha_premultiply,step)

This method writes the movie in the specified resolution and supersampling and alpha channel and dpi. The movie starts with startFrame, ends with stopFrame and runs with fps frames per second. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. If overwrite is set to true an already existing file will be overwritten without an extra dialog. alpha_premultiply sets pre-multiplication of the alpha value on or off. steps sets the number of frames to advance. (This command is only available in VRED Professional.) 

createMovie(movie, filename,width,height,fps,startFrame,stopFrame,ssf,alpha,alphaRed,alphaGreen,alphaBlue,alpha_premultiply,step,export_type)

This method writes the movie with name movie, in the specified resolution and supersampling and alpha channel and dpi. The movie starts with startFrame, ends with stopFrame and runs with fps frames per second. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. If overwrite is set to true an already existing file will be overwritten without an extra dialog. alpha_premultiply sets pre-multiplication of the alpha value on or off. steps sets the number of frames to advance.export type is 0 if images are to be generated and 1 if exporting to AVI. (This command is only available in VRED Professional.) 

createMovie(filename,width,height,fps,startFrame,stopFrame,ssf,alpha,alphaRed,alphaGreen,alphaBlue,overwrite,alpha_premultiply,step,tonemap_hdr)

This method writes the movie in the specified resolution and supersampling and alpha channel and dpi. The movie starts with startFrame, ends with stopFrame and runs with fps frames per second. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. If overwrite is set to true an already existing file will be overwritten without an extra dialog. alpha_premultiply sets pre-multiplication of the alpha value on or off. steps sets the number of frames to advance. tonemap_hdr applies tonemapping when you render to hdr format. (This command is only available in VRED Professional.) 

@param movie: The name of the movie.

@param filename: The name of the file.

@type filename: string

@param width: Width.

@type width: integer

@param height: Height.

@type height: integer

@param fps: Frames per second.

@type fps: integer

@param startFrame: The first frame to start the movie.

@type startFrame: integer

@param stopFrame: The last frame.

@type stopFrame: integer

@param ssf: Supersampling factor.

@type ssf: integer

@param alpha: Alpha channel: On/Off.

@type alpha: bool

@param alphaRed: The red component of the background color.

@type alphaRed: float

@param alphaGreen: The green component of the background color.

@type alphaGreen: float

@param alphaBlue: The blue component of the background color.

@type alphaBlue: float

@param overwrite: Overwrite existing file: On/Off.

@type overwrite: bool

@param alpha_premultiply: Premultiply alpha: On/Off.

@type alpha_premultiply: bool

@param step: Frame advance step size.

@type step: int

@param tonemap_hdr: Tonemap hdr formats: On/Off.

@type tonemap_hdr: bool

@type export_type: int
    '''
    pass



def createSnapshot(filename, width, height, ssf, alpha, alphaRed, alphaGreen, alphaBlue, dpi, overwrite, showImage, alpha_premultiply, tonemap_hdr):
    '''
    Method to create a snapshot. Actually, there are 11 different methods to create a snapshot.

createSnapshot(width,height) opens up a file dialog and writes the snapshot in the specified resolution with no supersampling. (This command is only available in VRED Professional.)

createSnapshot(width,height,ssf) opens up a file dialog and writes the snapshot in the specified resolution and supersampling factor. (This command is only available in VRED Professional.)

createSnapshot(width,height,ssf,alpha) opens up a file dialog and writes the snapshot in the specified resolution and supersampling. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. (This command is only available in VRED Professional.)

createSnapshot(width,height,ssf,alpha,dpi) opens up a file dialog and writes the snapshot in the specified resolution and supersampling. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. dpi gives the resolution in dots per inch important for image printing.(This command is only available in VRED Professional.)

createSnapshot(filename,width,height) writes the snapshot in the specified resolution with no supersampling. (This command is only available in VRED Professional.)

createSnapshot(filename,width,height,ssf) writes the snapshot in the specified resolution and supersampling factor. (This command is only available in VRED Professional.)

createSnapshot(filename,width,height,ssf,alpha) writes the snapshot in the specified resolution and supersampling and alpha channel. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. (This command is only available in VRED Professional.)

createSnapshot(filename,width,height,ssf,alpha,dpi) writes the snapshot in the specified resolution and supersampling and alpha channel and dpi. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. dpi gives the resolution in dots per inch important for image printing. (This command is only available in VRED Professional.)

createSnapshot(filename,width,height,ssf,alpha,alphaRed,alphaGreen,alphaBlue,dpi,overwrite,showImage) writes the snapshot in the specified resolution and supersampling and alpha channel and dpi. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. dpi gives the resolution in dots per inch important for image printing. If overwrite is set to true an already existing file will be overwritten without an extra dialog. If showImage is set to true the rendered image is shown. (This command is only available in VRED Professional.)

createSnapshot(filename,width,height,ssf,alpha,alphaRed,alphaGreen,alphaBlue,dpi,overwrite,showImage,alpha_premultiply) writes the snapshot in the specified resolution and supersampling and alpha channel and dpi. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. dpi gives the resolution in dots per inch important for image printing. If overwrite is set to true an already existing file will be overwritten without an extra dialog. If showImage is set to true the rendered image is shown. alpha_premultiply sets pre-multiplication of the alpha value on or off. (This command is only available in VRED Professional.)

createSnapshot(filename,width,height,ssf,alpha,alphaRed,alphaGreen,alphaBlue,dpi,overwrite,showImage,alpha_premultiply,tonemap_hdr) writes the snapshot in the specified resolution and supersampling and alpha channel and dpi. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. dpi gives the resolution in dots per inch important for image printing. If overwrite is set to true an already existing file will be overwritten without an extra dialog. If showImage is set to true the rendered image is shown. alpha_premultiply sets pre-multiplication of the alpha value on or off. tonemap_hdr applies tonemapping when you render to hdr format. (This command is only available in VRED Professional.)

@param filename: The name of the file.

@type filename: string

@param width: Width.

@type width: integer

@param height: Height.

@type height: integer

@param ssf: Supersampling factor. 0 disables supersampling, a value larger than 0 enables supersampling.

@type ssf: integer

@param alpha: Alpha channel: On/Off.

@type alpha: bool

@param alphaRed: The red component of the background color.

@type alphaRed: float

@param alphaGreen: The green component of the background color.

@type alphaGreen: float

@param alphaBlue: The blue component of the background color.

@type alphaBlue: float

@param dpi: The number of dots per inch.

@type dpi: float

@param overwrite: Overwrite existing file: On/Off.

@type overwrite: bool

@param showImage: Show rendered image: On/Off.

@type showImage: bool

@param alpha_premultiply: Premultiply alpha: On/Off.

@type alpha_premultiply: bool

@param tonemap_hdr: Tonemap hdr formats: On/Off.

@type tonemap_hdr: bool
    '''
    pass



def createSnapshotFast(filename):
    '''
    Create a fast snapshot with the provided file name.

@param filename: The name of the file.

@type filename: string
    '''
    pass



def createSnapshotFastInit(width, height, ssf):
    '''
    Initializes the fast snapshot method setting the image resolution to width times height. Optionally, a supersampling factor can be specified.

@param width: Width.

@type width: integer

@param height: Height.

@type height: integer

@param ssf: Supersampling factor (Optional).

@type ssf: integer
    '''
    pass



def createSnapshotFastTerminate():
    '''
    Terminates the creation of a fast snapshot.
    '''
    pass



def getExportExrHalf():
    '''
    Return if EXR is exported in 16 bit float format.

@return: True for 16 fit export, False otherwise.

@rtype: bool.
    '''
    pass



def getExportMultiLayer():
    '''
    Return if TIFF/PSD is exported as layers for render passes.

@return: True for layer export, False otherwise.

@rtype: bool.
    '''
    pass



def getExportTiffHDR():
    '''
    Return if TIFF/PSD is exported in HDR format.

@return: True for HDR export, False otherwise.

@rtype: bool.
    '''
    pass



def getLastRenderTime():
    '''
    Returns the duration in seconds of the last image render.
    '''
    pass



def imageStream():
    '''
    Redirects image write operations of function into a string which is returned. imageStream makes sense only with pythoneval calls on the webinterface. When a function produces multiple images, there is no way to keep them apart other when searching for image headers.Images will be held in memory during processing

Example:
binaryimage = imageStream(lambda: createSnapshot('D:/vred-snapshots/image.png', 100,100,50))
    '''
    pass



def imageStreamBase64():
    '''
    Redirects image write operations of function into a string which is returned

When a function produces multiple images, there is no way to keep them apart other when searching for image headers.Images will be held in memory during processing

Example:
b64image = imageStreamBase64(lambda: createSnapshot('D:/vred-snapshots/image.png', 100,100,50))
    '''
    pass



def renderAnimation(animation, filename, width, height, fps, startFrame, stopFrame, ssf, alpha, alphaRed, alphaGreen, alphaBlue, overwrite, alpha_premultiply, tonemap_hdr):
    '''
    This method writes an animation as a movie in the specified resolution and supersampling and alpha channel. The movie starts with startFrame, ends with stopFrame and runs with fps frames per second. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. If overwrite is set to true an already existing file will be overwritten without an extra dialog. alpha_premultiply sets pre-multiplication of the alpha value on or off. tonemap_hdr applies tonemapping when you render to hdr format. (This command is only available in VRED Professional.)

@param animation: The name of the animation.

@type animation: string

@param filename: The name of the file.

@type filename: string

@param width: Width.

@type width: integer

@param height: Height.

@type height: integer

@param fps: Frames per second.

@type fps: integer

@param startFrame: The first frame to start the movie.

@type startFrame: integer

@param stopFrame: The last frame.

@type stopFrame: integer

@param ssf: Supersampling factor.

@type ssf: integer

@param alpha: Alpha channel: On/Off.

@type alpha: bool

@param alphaRed: The red component of the background color.

@type alphaRed: float

@param alphaGreen: The green component of the background color.

@type alphaGreen: float

@param alphaBlue: The blue component of the background color.

@type alphaBlue: float

@param overwrite: Overwrite existing file: On/Off.

@type overwrite: bool

@param alpha_premultiply: Premultiply alpha: On/Off.

@type alpha_premultiply: bool

@param tonemap_hdr: Tonemap hdr formats: On/Off.

@type tonemap_hdr: bool
    '''
    pass



def renderStepAnimation(animation, filename, width, height, fps, startFrame, stopFrame, ssf, alpha, alphaRed, alphaGreen, alphaBlue, overwrite, alpha_premultiply, step):
    '''
    This method writes an animation as a movie in the specified resolution and supersampling and alpha channel. The movie starts with startFrame, ends with stopFrame and runs with fps frames per second. If alpha is set to true the resulting image will have a transparent background including correct alpha values for transparent materials. alphaRed, alphaGreen and alphaBlue define the red, green and blue component of the background color. If overwrite is set to true an already existing file will be overwritten without an extra dialog. alpha_premultiply sets pre-multiplication of the alpha value on or off. steps sets the number of frames to advance. (This command is only available in VRED Professional.)

@param animation: The name of the animation.

@type animation: string

@param filename: The name of the file.

@type filename: string

@param width: Width.

@type width: integer

@param height: Height.

@type height: integer

@param fps: Frames per second.

@type fps: integer

@param startFrame: The first frame to start the movie.

@type startFrame: integer

@param stopFrame: The last frame.

@type stopFrame: integer

@param ssf: Supersampling factor.

@type ssf: integer

@param alpha: Alpha channel: On/Off.

@type alpha: bool

@param alphaRed: The red component of the background color.

@type alphaRed: float

@param alphaGreen: The green component of the background color.

@type alphaGreen: float

@param alphaBlue: The blue component of the background color.

@type alphaBlue: float

@param overwrite: Overwrite existing file: On/Off.

@type overwrite: bool

@param alpha_premultiply: Premultiply alpha: On/Off.

@type alpha_premultiply: bool

@param step: Frame advance step size.

@type step: int
    '''
    pass



def resetActiveSnapshotMovieRenderPasses():
    '''
    Resets the active renderpasses for rendering a snapshot using the createSnapshot or renderAnimation commands. This command does not change the scene settings.
    '''
    pass



def setActiveSnapshotMovieRenderPasses(beauty_pass, diffuse_ibl_pass, diffuse_light_pass, glossy_ibl_pass, glossy_light_pass, specular_reflection_pass, specular_light_pass, translucency_pass, incandescence_pass, diffuse_indirect_pass, glossy_indirect_pass, occlusion_pass, normal_pass, depth_pass, material_id_pass):
    '''
    Sets the active renderpasses for rendering a snapshot using the createSnapshot or renderAnimation commands. This command does not change the scene settings. The following sets of parameters are valid:

setActiveSnapshotMovieRenderPasses(beauty_pass,diffuse_ibl_pass,diffuse_light_pass,glossy_ibl_pass,glossy_light_pass,specular_reflection_pass,specular_light_pass,diffuse_indirect_pass,glossy_indirect_pass,occlusion_pass,normal_pass,depth_pass).

setActiveSnapshotMovieRenderPasses(beauty_pass,diffuse_ibl_pass,diffuse_light_pass,glossy_ibl_pass,glossy_light_pass,specular_reflection_pass,specular_light_pass,incandescence_pass,diffuse_indirect_pass,glossy_indirect_pass,occlusion_pass,normal_pass,depth_pass).

setActiveSnapshotMovieRenderPasses(beauty_pass,diffuse_ibl_pass,diffuse_light_pass,glossy_ibl_pass,glossy_light_pass,specular_reflection_pass,specular_light_pass,incandescence_pass,diffuse_indirect_pass,glossy_indirect_pass,occlusion_pass,normal_pass,depth_pass,material_id_pass).

setActiveSnapshotMovieRenderPasses(beauty_pass,diffuse_ibl_pass,diffuse_light_pass,glossy_ibl_pass,glossy_light_pass,specular_reflection_pass,specular_light_pass,translucency_pass,incandescence_pass,diffuse_indirect_pass,glossy_indirect_pass,occlusion_pass,normal_pass,depth_pass,material_id_pass).

@param beauty_pass: Turns the beauty pass on or off.

@type beauty_pass: bool

@param diffuse_ibl_pass: Turns the diffuse ibl pass on or off.

@type diffuse_ibl_pass: bool

@param diffuse_light_pass: Turns the diffuse light pass on or off.

@type diffuse_light_pass: bool

@param glossy_ibl_pass: Turns the glossy ibl pass on or off.

@type glossy_ibl_pass: bool

@param glossy_light_pass: Turns the glossy light pass on or off.

@type glossy_light_pass: bool

@param specular_reflection_pass: Turns the specular reflection pass on or off.

@type specular_reflection_pass: bool

@param specular_light_pass: Turns the specular Light pass on or off. This parameter is deprecated, the specular light pass no longer exists, therefore the parameter will be ignored.

@type specular_light_pass: bool

@param translucency_pass: Turns the translucency pass on or off.

@type translucency_pass: bool

@param incandescence_pass: Turns the incandescence pass on or off.

@type incandescence_pass: bool

@param diffuse_indirect_pass: Turns the diffuse indirect pass on or off.

@type diffuse_indirect_pass: bool

@param glossy_indirect_pass: Turns the glossy indirect pass on or off.

@type glossy_indirect_pass: bool

@param occlusion_pass: Turns the occlusion pass on or off.

@type occlusion_pass: bool

@param normal_pass: Turns the normal pass on or off.

@type normal_pass: bool

@param depth_pass: Turns the depth pass on or off.

@type depth_pass: bool

@param material_id_pass: Turns the material id pass on or off.

@type material_id_pass: bool
    '''
    pass



def setAuxiliaryChannelsRenderPasses(occlusion_pass, normal_pass, depth_pass, material_id_pass, mask_pass, position_pass, view_vector_pass, crypto_object_pass, crypto_object_pass):
    '''
    Sets the active combined channels renderpasses for rendering a snapshot using the createSnapshot or renderAnimation commands. This command does not change the scene settings. 

@param occlusion_pass: Turns the occlusion pass on or off.

@type occlusion_pass: bool

@param normal_pass: Turns the normal pass on or off.

@type normal_pass: bool

@param depth_pass: Turns the depth pass on or off.

@type depth_pass: bool

@param material_id_pass: Turns the material id pass on or off.

@type material_id_pass: bool

@param mask_pass: Turns the mask pass on or off.

@type mask_pass: bool

@param position_pass: Turns the position pass on or off.

@type position_pass: bool

@param view_vector_pass: Turns the view vector pass on or off.

@type view_vector_pass: bool

@param crypto_object_pass: Turns the object cryptomatte pass on or off.

@type crypto_object_pass: bool

@param crypto_object_pass: Turns the material cryptomatte pass on or off.

@type crypto_object_pass: bool
    '''
    pass



def setCombinedChannelsRenderPasses(beauty_pass, diffuse_ibl_pass, diffuse_light_pass, glossy_ibl_pass, glossy_light_pass, specular_reflection_pass, translucency_pass, incandescence_pass, diffuse_indirect_pass, glossy_indirect_pass, transparency_pass, background_pass):
    '''
    Sets the active combined channels renderpasses for rendering a snapshot using the createSnapshot or renderAnimation commands. This command does not change the scene settings. 

@param beauty_pass: Turns the beauty pass on or off.

@type beauty_pass: bool

@param diffuse_ibl_pass: Turns the diffuse ibl pass on or off.

@type diffuse_ibl_pass: bool

@param diffuse_light_pass: Turns the diffuse light pass on or off.

@type diffuse_light_pass: bool

@param glossy_ibl_pass: Turns the glossy ibl pass on or off.

@type glossy_ibl_pass: bool

@param glossy_light_pass: Turns the glossy light pass on or off.

@type glossy_light_pass: bool

@param specular_reflection_pass: Turns the specular reflection pass on or off.

@type specular_reflection_pass: bool

@param translucency_pass: Turns the translucency pass on or off.

@type translucency_pass: bool

@param incandescence_pass: Turns the incandescence pass on or off. Note that this is the same pass as the incandescence pass in the separate material channel passes

@type incandescence_pass: bool

@param diffuse_indirect_pass: Turns the diffuse indirect pass on or off.

@type diffuse_indirect_pass: bool

@param glossy_indirect_pass: Turns the glossy indirect pass on or off.

@type glossy_indirect_pass: bool

@param transparency_pass: Turns the transparency pass on or off. Note that this is the same pass as the transparency pass in the separate material channel passes.

@type transparency_pass_pass: bool

@param background_pass: Turns the background pass on or off. Note that this is the same pass as the background pass in the separate material channel passes

@type background_pass: bool
    '''
    pass



def setExportExrHalf(on):
    '''
    Enables/Disables export of EXR format in 16 bit float.

@param on: True for export in 16 bit, False otherwise.

@type on: bool.
    '''
    pass



def setExportMultiLayer(on):
    '''
    Enables/Disables export of TIFF/PSD as layers for render passes.

@param on: True for export as layers, False otherwise.

@type on: bool.
    '''
    pass



def setExportTiffHDR(on):
    '''
    Enables/Disables export of TIFF/PSD in HDR format.

@param on: True for export in HDR, False otherwise.

@type on: bool.
    '''
    pass



def setIlluminationChannelsRenderPasses(diffuse_ibl_pass, glossy_ibl_pass, translucency_ibl_pass, diffuse_light_pass, glossy_light_pass, translucency_light_pass, diffuse_indirect_pass, glossy_indirect_pass, specular_indirect_pass, translucency_indirect_pass):
    '''
    Sets the active illumination channels renderpasses for rendering a snapshot using the createSnapshot or renderAnimation commands. This command does not change the scene settings. 

@param diffuse_ibl_pass: Turns the diffuse ibl pass on or off.

@type diffuse_ibl_pass: bool

@param glossy_ibl_pass: Turns the glossy ibl pass on or off.

@type glossy_ibl_pass: bool

@param translucency_ibl_pass: Turns the translucency ibl pass on or off.

@type translucency_ibl_pass: bool

@param diffuse_light_pass: Turns the diffuse light pass on or off.

@type diffuse_light_pass: bool

@param glossy_light_pass: Turns the glossy light pass on or off.

@type glossy_light_pass: bool

@param translucency_light_pass: Turns the translucency light pass on or off.

@type translucency_light_pass: bool

@param diffuse_indirect_pass: Turns the diffuse indirect pass on or off.

@type diffuse_indirect_pass: bool

@param glossy_indirect_pass: Turns the glossy indirect pass on or off.

@type glossy_indirect_pass: bool

@param specular_indirect_pass: Turns the specular indirect pass on or off.

@type specular_indirect_pass: bool

@param translucency_indirect_pass: Turns the translucency indirect pass on or off.

@type translucency_indirect_pass: bool
    '''
    pass



def setImageProcessingRenderPasses(fog_pass, lens_flare_pass, backplate_pass, frontplate_pass):
    '''
    Sets the active image processing renderpasses for rendering a snapshot using the createSnapshot or renderAnimation commands. This command does not change the scene settings. 

@param fog_pass: Turns the fog pass on or off.

@type fog_pass: bool

@param lens_flare_pass: Turns the lens flare pass on or off.

@type lens_flare_pass: bool

@param backplate_pass: Turns the backplate pass on or off.

@type backplate_pass: bool

@param frontplate_pass: Turns the frontplate pass on or off.

@type frontplate_pass: bool
    '''
    pass



def setMaterialChannelsRenderPasses(diffuse_material_pass, glossy_material_pass, specular_material_pass, translucency_material_pass, translucency_material_pass, transparency_material_pass):
    '''
    Sets the active material channels renderpasses for rendering a snapshot using the createSnapshot or renderAnimation commands. This command does not change the scene settings. 

@param diffuse_material_pass: Turns the diffuse material pass on or off.

@type diffuse_material_pass: bool

@param glossy_material_pass: Turns the glossy material pass on or off.

@type glossy_material_pass: bool

@param specular_material_pass: Turns the specular material pass on or off.

@type specular_material_pass: bool

@param translucency_material_pass: Turns the translucency material pass on or off.

@type translucency_material_pass: bool

@param translucency_material_pass: Turns the translucency material pass on or off.

@type translucency_material_pass: bool

@param transparency_material_pass: Turns the transparency pass on or off. Note that this is the same pass as the background pass in the combined material channel passes

@type transparency_material_pass: bool
    '''
    pass



def setSnapshotEmbedMetaData(embedRenderSettings, embedCameraSettings, embedNodeVisibilities, embedSwitchNodeStates, embedSwitchMaterialStates):
    '''
    Sets which meta data to store within the output image.

Please note: Image formats supporting meta data are png, jpg, tif and exr.

@param embedRenderSettings: Sets whether to embed image, animation and raytracing settings.

@type embedRenderSettings: bool

@param embedCameraSettings: Sets whether to embed the settings of the active camera.

@type embedCameraSettings: bool

@param embedNodeVisibilities: Sets whether to embed the visibility state of each node in the scenegraph.

@type embedNodeVisibilities: bool

@param embedSwitchNodeStates: Sets whether to embed the state of each switch node in the scenegraph.

@type embedSwitchNodeStates: bool

@param embedSwitchMaterialStates: Sets whether to embed the state of each valid switch material in the scene.

@type embedSwitchMaterialStates: bool
    '''
    pass



def setSnapshotICCProfile(profileID):
    '''
    Sets the ICC Profile to store with the output image.

0 uses the current settings from the render settings module.

1 uses sRGB encoding.

2 uses Adobe RGB 98 encoding.

3 uses the specified Monitor ICC Profile.

4 uses the specified Image ICC Profile.

@param profileID: The profile id.

@type profileID: int
    '''
    pass



def setSnapshotNoShowImage(state):
    '''
    If state is set to true the rendered image is shown.

@param state: Show image: On/Off.

@type state: bool
    '''
    pass



def setSnapshotQuality(quality):
    '''
    Sets the quality of the image to be exported. Only useful for file formats that define a compression quality like jpeg or png. -1 is the default value for reasonable compression.

@param quality: The quality of the image.

@type quality: integer signed (32bit)
    '''
    pass


