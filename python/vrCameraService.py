'''
vrCameraService
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Interface to access cameras and viewpoints in VRED.
'''

from typing import List


class vrdNode():
    pass


class vrdCameraTrackNode():
    pass


class CameraProjectionMode():
    pass


class CameraConstraint():
    pass


class ViewpointCreationMode():
    pass


class string():
    pass


class vrdCameraNode():
    pass


class vrdViewpointNode():
    pass


def createCamera(name: string, mode: CameraProjectionMode, constraint: CameraConstraint, sceneGraphParentNode: vrdNode, cameraGraphParentNode: vrdNode) -> vrdCameraNode:
    '''
    Creates a new camera.
    '''
    return None


def createCameraGroup(name: string, cameraGraphParentNode: vrdNode) -> vrdNode:
    '''
    Creates a new camera group.
    '''
    return None


def createCameraTrack(name: string, cameraNode: vrdCameraNode) -> vrdCameraTrackNode:
    '''
    Creates a new camera track.
    '''
    return None


def createViewpoint(name: string, cameraTrack: vrdCameraTrackNode) -> vrdViewpointNode:
    '''
    Creates a new viewpoint.
    '''
    return None


def duplicateNode(node: vrdNode) -> vrdNode:
    '''
    Creates a copy of a camera tree node (including its children).
    '''
    return None


def getActiveCamera(useCameraGraph: bool) -> vrdCameraNode:
    '''
    Returns the active camera of the currently active viewport.
    '''
    return None


def getAllCameraTracks() -> List[vrdCameraTrackNode]:
    '''
    Returns the list of all camera tracks.
    '''
    return None


def getAllViewpoints() -> List[vrdViewpointNode]:
    '''
    Returns the list of all viewpoints.
    '''
    return None


def getCamera(name: string, useCameraGraph: bool) -> vrdCameraNode:
    '''
    Returns the first camera with the given name.
    '''
    return None


def getCameraNames() -> List[string]:
    '''
    Returns a list with the names of all cameras.
    '''
    return None


def getCameraRoot() -> vrdNode:
    '''
    Returns the root node of cameras, that contains all cameras, camera tracks and viewpoints.
    '''
    return None


def getCameras(useCameraScenegraph: bool) -> List[vrdCameraNode]:
    '''
    Returns the list of all cameras (not including viewpoints or camera tracks).
    '''
    return None


def getViewpoint(name: string) -> vrdViewpointNode:
    '''
    Returns the first viewpoint with the given name.
    '''
    return None


def getViewpointCreationMode() -> ViewpointCreationMode:
    '''
    Returns if tracking transformation should be included in viewpoint transformation.
    '''
    return None


def load(filename: string) -> List[vrdNode]:
    '''
    Load camera related nodes.
    '''
    return None


def saveCameras(nodes: List[vrdNode], filename: string) -> bool:
    '''
    Save cameras and viewpoints to an .xml file (no hierarchy, groups or tracks supported).
    '''
    return None


def saveNodes(nodes: List[vrdNode], filename: string) -> bool:
    '''
    Save nodes including children (tracks, groups, viewpoints) to .osb file.
    '''
    return None


def saveViewpoints(filename: string) -> bool:
    '''
    Save all viewpoints to ‘.xml’ file.
    '''
    return None


def setViewpointCreationMode(mode: ViewpointCreationMode):
    '''
    Defines if tracking transformation should be included in viewpoint transformation.
    '''
    pass

