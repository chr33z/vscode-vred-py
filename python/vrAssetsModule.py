
# Autogenerated method stubs for 'vrAssetsModule.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def applyMaterialAssetsByName(path):
    '''
    Each material in the scene is replaced by an equally-named material asset that can be found 
under the specified directory and its sub-directories.

@param path: The path to the directory containing material assets.

@type path: string
    '''
    pass



def createEnvironmentAsset(environmentNode, assetManagerDirectory):
    '''
    Saves the given environment node as a new environment asset in the given directory. Returns whether save was successful. If successful, the given node points to the saved asset afterwards.

@param environmentNode: The environment node to be saved as asset.

@type environmentNode: vrNodePtr

@param assetManagerDirectory: Path of a directory in the Asset Manager.

@type assetManagerDirectory: string

@return: Success.

@rtype: bool
    '''
    pass



def createGeometryAsset(node, assetManagerDirectory):
    '''
    Saves the given node as a new geometry asset in the given directory. Returns whether save was successful.

Please note that the node needs to be a valid asset root which is a Transform3D node that has at leat one child node.

If successful, the given node points to the saved asset afterwards.

@param node: The node to be saved as asset. Needs to be a Transform3D node.

@type node: vrNodePtr

@param assetManagerDirectory: Path of a directory in the Asset Manager.

@type assetManagerDirectory: string

@return: Success.

@rtype: bool
    '''
    pass



def createMaterialAsset(material, assetManagerDirectory):
    '''
    Saves the given material as a new material asset in the given directory. Returns whether save was successful. If successful, the given material points to the saved asset afterwards. Updates the Material Editor and Asset Manager UI.

@param material: The material to be saved as asset.

@type material: vrMaterialPtr

@param assetManagerDirectory: Path of a directory in the Asset Manager.

@type assetManagerDirectory: string

@return: Success.

@rtype: bool
    '''
    pass



def createSceneplateAsset(node, assetManagerDirectory):
    '''
    Saves the given node as a new sceneplate asset in the given directory. Returns whether save was successful.

If successful, the given node points to the saved asset afterwards.

@param node: The sceneplate to be saved as asset.

@type node: vrNodePtr

@param assetManagerDirectory: Path of a directory in the Asset Manager.

@type assetManagerDirectory: string

@return: Success.

@rtype: bool
    '''
    pass



def getSelectedAssetDirectory(assetType):
    '''
    Returns the path of the currently selected directory in the Asset Manager directory view in the tab of the given asset type.

@param assetType: Allowed parameters are: VR_ASSET_MATERIAL, VR_ASSET_GEOMETRY, VR_ASSET_ENVIRONMENT, VR_ASSET_SCENEPLATE

@type assetType: enumeration

@return: The path of the selected directory. If no directory is selected, an empty string is returned.

@rtype: string
    '''
    pass



def getSelectedMaterialAssetDirectory():
    '''
    Deprecated. Please use getSelectedAssetDirectory(VR_ASSET_MATERIAL) instead.

Returns the path to the currently selected directory in the material assets tab of the Asset Manager.

@return: The path of the selected directory. If no directory is selected, an empty string is returned.
    '''
    pass



def loadEnvironmentAssetByName(assetName, assetPath):
    '''
    Load an environment asset from the Asset Manager by specifying the name of the asset and, optionally, the path where it is stored.
Specifying a path might be necessary if there are assets with the same name in the Asset Manager.
The loaded environment asset is added to the scene, and to the default environment switch, if present.

@param assetName: The name of the environment asset.

@type assetName: string

@param assetPath: Optional: The path to the directory containing the environment asset. The asset is searched in all subdirectories, too. Omit this parameter to search in all paths in the Asset Manager.

@type assetPath: string

@return: Success.

@rtype: bool
    '''
    pass



def loadEnvironmentAssetByUUID(assetUUID):
    '''
    Searches for an environment asset with the given UUID in the Asset Manager and loads it, if found.
The loaded environment asset is added to the scene, and to the default environment switch, if present.

@param assetUUID: The UUID of the environment asset. You can lookup the UUID of a stored asset in its xml file.

@type assetUUID: string

@return: Success.

@rtype: bool
    '''
    pass



def loadGeometryAssetByName(assetName, assetPath):
    '''
    Load a geometry asset from the Asset Manager by specifying the name of the asset and, optionally, the path where it is stored.
Specifying a path might be necessary if there are assets with the same name in the Asset Manager.
The loaded geometry asset is added to the scene

@param assetName: The name of the geometry asset.

@type assetName: string

@param assetPath: Optional: The path to the directory containing the geometry asset. The asset is searched in all subdirectories, too. Omit this parameter to search in all paths in the Asset Manager.

@type assetPath: string

@return: The root node of the loaded asset.

@rtype: vrNodePtr
    '''
    pass



def loadGeometryAssetByUUID(assetUUID):
    '''
    Searches for a geometry asset with the given UUID in the Asset Manager and loads it, if found.
The loaded geometry asset is added to the scene.

@param assetUUID: The UUID of the geometry asset. You can lookup the UUID of a stored asset in its xml file.

@type assetUUID: string

@return: The root node of the loaded asset.

@rtype: vrNodePtr
    '''
    pass



def loadMaterialAssetByName(assetName, assetPath):
    '''
    Load a material asset from the Asset Manager by specifying the name of the asset and, optionally, the path where it is stored.
Specifying a path might be necessary if there are assets with the same name in the Asset Manager.
The loaded material asset is added to the scene and returned by this function. Updates the Material Editor UI afterwards.

@param assetName: The name of the material asset.

@type assetName: string

@param assetPath: Optional: The path to the directory containing the material asset. The asset is searched in all subdirectories, too. Omit this parameter to search in all paths in the Asset Manager.

@type assetPath: string

@return: The loaded material asset.

@rtype: vrMaterialPtr
    '''
    pass



def loadMaterialAssetByUUID(assetUUID):
    '''
    Searches for a material asset with the given UUID in the Asset Manager and loads it, if found.
The loaded material asset is added to the scene and returned by this function. Updates the Material Editor UI afterwards.

@param assetUUID: The UUID of the material asset. You can lookup the UUID of a stored asset in its xml file.

@type assetUUID: string

@return: The loaded material asset.

@rtype: vrMaterialPtr
    '''
    pass



def loadSceneplateAssetByName(assetName, assetPath):
    '''
    Load a sceneplate asset from the Asset Manager by specifying the name of the asset and, optionally, the path where it is stored.
Specifying a path might be necessary if there are assets with the same name in the Asset Manager.
The loaded sceneplate asset is added to the scene

@param assetName: The name of the sceneplate asset.

@type assetName: string

@param assetPath: Optional: The path to the directory containing the sceneplate asset. The asset is searched in all subdirectories, too. Omit this parameter to search in all paths in the Asset Manager.

@type assetPath: string

@return: The root node of the loaded asset.

@rtype: vrNodePtr
    '''
    pass



def loadSceneplateAssetByUUID(assetUUID):
    '''
    Searches for a sceneplate asset with the given UUID in the Asset Manager and loads it, if found.
The loaded sceneplate asset is added to the scene.

@param assetUUID: The UUID of the sceneplate asset. You can lookup the UUID of a stored asset in its xml file.

@type assetUUID: string

@return: The root node of the loaded asset.

@rtype: vrNodePtr
    '''
    pass



def overwriteEnvironmentAsset(environmentAsset):
    '''
    If the given environment node has a reference to an already existing environment asset in the Asset Manager, it overwrites that asset. This makes sense if the environment has been modified. Returns whether successful. The node still points to the same asset afterwards. 

@param environmentAsset: An environment node referencing an environment asset in the Asset Manager.

@type environmentAsset: vrNodePtr

@return: Success.

@rtype: bool
    '''
    pass



def overwriteGeometryAsset(assetRootNode):
    '''
    If the given node has a reference to an already existing geometry asset in the Asset Manager, it overwrites that asset. Returns whether successful. The node still points to the same asset afterwards. 

@param assetRootNode: An node referencing an geometry asset in the Asset Manager.

@type assetRootNode: vrNodePtr

@return: Success.

@rtype: bool
    '''
    pass



def overwriteMaterialAsset(material):
    '''
    If the given material has a reference to an already existing material asset in the Asset Manager, it overwrites that asset. This makes sense if the material has been modified. Returns whether successful. The material still points to the same asset afterwards. 

Updates the Material Editor and Asset Manager UI.

@param material: A material referencing a material asset in the Asset Manager.

@type material: vrMaterialPtr

@return: Success.

@rtype: bool
    '''
    pass



def overwriteSceneplateAsset(assetRootNode):
    '''
    If the given node has a reference to an already existing sceneplate asset in the Asset Manager, it overwrites that asset. Returns whether successful. The node still points to the same asset afterwards. 

@param assetRootNode: An node referencing an sceneplate asset in the Asset Manager.

@type assetRootNode: vrNodePtr

@return: Success.

@rtype: bool
    '''
    pass



def reloadAllAssetDirectories():
    '''
    Reloads all directories in the asset manager. No scene assets are updated.
    '''
    pass



def reloadAssetDirectory(url):
    '''
    Reloads the directory with the specified path. No scene assets are updated.

@param url: Directory path.

@type url: string
    '''
    pass


