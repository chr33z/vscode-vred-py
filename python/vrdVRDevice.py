'''
vrdVRDevice
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Represents a VR device like a controller or a tracker. This can be created before the actual device is connected with the system. When a device connects, VRED will map the physical device to the already created object. This allows to define mappings in advance.
'''

from typing import List


class integer():
    pass


class vrdNode():
    pass


class QMatrix4x4():
    pass


class vrdButtonState():
    pass


class string():
    pass


class vrdRayIntersection():
    pass


class vrdVirtualTouchpadButton():
    pass


def addVirtualButton(button: vrdVirtualTouchpadButton, physicalButton: string):
    '''
    Adds a virtual button to the controller that maps a position of a button to a new signal.
    '''
    pass


def disableRay():
    '''
    Disables the currently activated pointing ray.
    '''
    pass


def enableRay(axis: string):
    '''
    Enables a pointing ray out of the controller.
    '''
    pass


def getButtonState(button: string) -> vrdButtonState:
    '''
    Gets the state of the current button.
    '''
    return None


def getName() -> string:
    '''
    Gets the name of the device
    '''
    return None


def getNode() -> vrdNode:
    '''
    Gets a node under the origin of the VR device. This node is not part of the scenegraph. If some geometry should be attached to the device, a constraint (see         vrConstraintService.createParentConstraint(targetNodes, constrainedNode, maintainOffset)) should be used. Example: vr/attachToController.py.
    '''
    return None


def getSerialNumber() -> string:
    '''
    Gets the serial number of the device.
    '''
    return None


def getTrackingMatrix():
    '''
    Documentation missing
    '''
    pass


def getVisualizationMode() -> integer:
    '''
    Gets the current visualization mode.
    '''
    return None


def getVisualizationNode() -> vrdNode:
    '''
    Gets the root node of the controller visualization. If the controller is currently not visible or not detected by the tracking system, this function will return an empty node.
    '''
    return None


def isVisible() -> bool:
    '''
    Gets the visibility of the device.
    '''
    return None


def pick() -> vrdRayIntersection:
    '''
    Tries to pick the object in the scene at the intersection point of the pointing ray with the scene.
    '''
    return None


def removeVirtualButton(button: vrdVirtualTouchpadButton, physicalButton: string):
    '''
    Removes a virtual button that is related to a physical button.
    '''
    pass


def removeVirtualButton(virtualButton: string, physicalButton: string):
    '''
    Removes a virtual button that is related to a physical button.
    '''
    pass


def setButtonPressed(state: bool, button: string):
    '''
    Simulate a button press.
    '''
    pass


def setButtonTouched(state: bool, button: string):
    '''
    Simulate a button press.
    '''
    pass


def setTrackingMatrix(matrix: QMatrix4x4):
    '''
    Simulate a tracking position change.
    '''
    pass


def setVisible(visible: bool):
    '''
    Sets the VR device visible or invisible.
    '''
    pass


def setVisualizationMode(mode: integer):
    '''
    Sets the visualization mode.
    '''
    pass


def signal():
    '''
    Documentation missing
    '''
    pass


def vibrate(milliseconds: integer, axisId: integer):
    '''
    Triggers the vibration functionality of the device if available.
    '''
    pass

