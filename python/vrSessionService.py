'''
vrSessionService
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Interface to work with collaboration sessions.
'''

from typing import List


class QVector2D():
    pass


class vrdMaterial():
    pass


class QMatrix4x4():
    pass


class vrdSessionUser():
    pass


class QColor():
    pass


class vrdNode():
    pass


class QVector3D():
    pass


def abortProgress():
    '''
    Aborts a running project file upload or download.
    '''
    pass


def addNodeSync(node: vrdNode):
    '''
    Transformation and visibility changes will by synchronized for all registered nodes This node sync is only used in python and does not affect transformations that are triggered by the transformation module or variant sets. By default functions like setTransformNodeXXXX are not synced automatically. Adding a node sync will send all changes, independent from the source of the change, to all connected users.
    '''
    pass


def blockSync(commandTypeName: str):
    '''
    Calling blockSync, blocks all synchronizations to other users.
    '''
    pass


def checkSessionLink(passwd: str, sessionLink: str) -> bool:
    '''
    Checks if the password is valid.
    '''
    return None


def createSessionLink(server: str, passwd: str) -> str:
    '''
    Creates a connection string from the hostname and a password.
    '''
    return None


def getDefaultColors():
    '''
    Documentation missing
    '''
    pass


def getRemoteUsers():
    '''
    Documentation missing
    '''
    pass


def getSessionLink() -> str:
    '''
    Returns the connection string of the collaboration session.
    '''
    return None


def getSyncCommandNames() -> List[str]:
    '''
    Get all known command type names. These names can be used in blockSync and unblockSync.
    '''
    return None


def getUser():
    '''
    Documentation missing
    '''
    pass


def getUsers():
    '''
    Documentation missing
    '''
    pass


def isConnected() -> bool:
    '''
    Checks whether vred is connected to a collaboration session.
    '''
    return None


def isJoinCompleted() -> bool:
    '''
    Checks whether the connection has been established.
    '''
    return None


def isMicrophoneMute() -> bool:
    '''
    Get microphone muted state.
    '''
    return None


def isSpatialAudio() -> bool:
    '''
    Get spatioal audio setting.
    '''
    return None


def isSpeakerMute() -> bool:
    '''
    Get speaker muted state.
    '''
    return None


def join(sessionLink: str, userName: str, color: QColor, roomName: str, passwd: str, forceVersion: bool):
    '''
    Joins an existing or creates a new vr collaboration sesson.
    '''
    pass


def leave():
    '''
    Leaves the collaboration session.
    '''
    pass


def removeNodeSync(node: vrdNode):
    '''
    Remove node from synchronization. Like addNodeSync, this does not have an effect on changes triggered by variant sets and other interactively triggered transformations.
    '''
    pass


def sendPython(command: str, commandId: str):
    '''
    Sends a python command to all other users.
    '''
    pass


def setAudioEnabled(value: bool):
    '''
    Enables audio communication.
    '''
    pass


def setAvatarProximityOpaqueDistance(value: float):
    '''
    Changes the distance from which avatars are opaque.
    '''
    pass


def setAvatarProximityTransparentDistance(value: float):
    '''
    Changes the distance from which avatars become fully transparent.
    '''
    pass


def setAvatarSafetyOpaqueDistance(value: float):
    '''
    Changes the distance to fade safety avatars.
    '''
    pass


def setAvatarSafetyTransparentDistance(value: float):
    '''
    Changes distance to hide safety avatars.
    '''
    pass


def setMicrophoneLevel(value: float):
    '''
    Adjusts microphone level.
    '''
    pass


def setMicrophoneMute(value: bool):
    '''
    Mutes the microphone.
    '''
    pass


def setPointerToolActive(on: bool):
    '''
    Activates the pointing tool.
    '''
    pass


def setPointerVisible(value: bool):
    '''
    Makes the pointing tool visible for all other users.
    '''
    pass


def setRoom(room: str):
    '''
    Changes the room name, used for safety avatar visualization.
    '''
    pass


def setSpatialAudio(value: bool):
    '''
    Enables 3D sound for collaboration audio communications.
    '''
    pass


def setSpeakerLevel(value: float):
    '''
    Adjusts speaker volume.
    '''
    pass


def setSpeakerMute(value: bool):
    '''
    Mutes the speaker.
    '''
    pass


def setUserColor(userColor: QColor):
    '''
    Change the user color.
    '''
    pass


def setUserName(userName: str):
    '''
    Changes the user name.
    '''
    pass


def showDesktopAvatar(on: bool):
    '''
    Toggles how the local user is shown in desktop mode to the other users, either as tablet (default) or as avatar.
    '''
    pass


def spectate(on: bool, userId: int):
    '''
    Turns spectator mode on or off.
    '''
    pass


def stopForAll():
    '''
    Stops the collaboration session for all connected users.
    '''
    pass


def syncNode(node: vrdNode):
    '''
    Synchronize position and visibility with all other users.
    '''
    pass


def toPythonString(matrix: QMatrix4x4) -> str:
    '''
    Convert matrix to a python string that can used in sendPython.
    '''
    return None


def toPythonString(vector2d: QVector2D) -> str:
    '''
    Convert vector to a python string that can used in sendPython.
    '''
    return None


def toPythonString(vector3d: QVector3D) -> str:
    '''
    Convert vector to a python string that can used in sendPython.
    '''
    return None


def toPythonString(node: vrdNode) -> str:
    '''
    Convert a node to a python string that can used in sendPython.
    '''
    return None


def toPythonString(material: vrdMaterial) -> str:
    '''
    Convert a material to a python string that can used in sendPython.
    '''
    return None


def toPythonString(nodes: List[vrdNode]) -> str:
    '''
    Convert a list of nodes to a python string that can used in sendPython.
    '''
    return None


def unblockSync(commandTypeName: str):
    '''
    Calling unblockSync resumes synchronizations to other users.
    '''
    pass


def uploadScene():
    '''
    Sends the current project in the memory to all connected users.
    '''
    pass


def uploadScenePath(path: str):
    '''
    Sends the path of the project to be loaded to all users.
    '''
    pass


def joinFailed(message: str, wrongVersion: bool):
    '''
    The join operation has failed.
    '''
    pass


def microphoneMuted(value: bool):
    '''
    Microphone has been muted or unmuted.
    '''
    pass


def pointerToolActiveChanged(on: bool):
    '''
    The pointing tool has been activated.
    '''
    pass


def progressChanged(action: str, progress: int):
    '''
    Project upload or download progress has changed.
    '''
    pass


def progressFinished():
    '''
    Project upload or download operatrion has been completed.
    '''
    pass


def receivedSessionConfig(config: str):
    '''
    A session configuration has been double clicked or dropped to the VRED window.
    '''
    pass


def sessionJoined():
    '''
    A collaboration session has been joined.
    '''
    pass


def sessionLeft():
    '''
    A collaboration session has been left.
    '''
    pass


def speakerMuted(value: bool):
    '''
    Speaker has been muted or unmuted.
    '''
    pass


def spectateChanged(on: bool, userId: int):
    '''
    Spectator mode has been changed.
    '''
    pass


def statusChanged():
    '''
    Connection status has changed.
    '''
    pass


def userArrives(user: vrdSessionUser):
    '''
    A new user has joined the session.
    '''
    pass


def userLeaves(user: vrdSessionUser):
    '''
    A user has left the session.
    '''
    pass

