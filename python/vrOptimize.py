
# Autogenerated method stubs for 'vrOptimize.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def cleanupGroupNodes(root_node, recursive):
    '''
    Cleanup group nodes. Empty group nodes or group nodes with a single child will be removed. There are two functions:

cleanupGroupNodes(root_node)

cleanupGroupNodes(root_node,recursive)

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param recursive: Recursive: On/Off (Optional).

@type recursive: boolean
    '''
    pass



def createMultiMaterials(root_node):
    '''
    Create multi-materials for a given subgraph.

@param root_node: The root node of the subgraph to create multi-materials for.

@type root_node: NodePtr
    '''
    pass



def createOcTree(root_node):
    '''
    Transform all geometries by an octree structure. Not necessary on todays graphic cards.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def flushMaterialGroups(root_node):
    '''
    The materials of a MaterialGroup will be flushed into the underlying geometries and the MaterialGroups will be transformed into group nodes.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def flushRotations(root_node):
    '''
    Moves rotation-related transform information of selected sub-tree to the geometry nodes on lowest level.

@param root_node: the root node of the sub-tree.

@type root_node: NodePtr
    '''
    pass



def flushScales(root_node):
    '''
    Moves scale-related transform information of selected subtree to the geometry nodes on lowest level.

@param root_node: the root node of the sub-tree.

@type root_node: NodePtr
    '''
    pass



def flushSelectedTransformation(node):
    '''
    Moves transformation of selected node to the geometry nodes on lowest level.

@param node: The node to be flushed.

@type node: NodePtr
    '''
    pass



def flushTexGen(root_node):
    '''
    Flush gen funcs. All TexGenChunks will be removed and appropriate texture coordinates will be calculated.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def flushTexTransform(root_node):
    '''
    Flush texture transformations. All texture transformations will be multiplied onto the texture coordinates and deleted afterwards.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def flushTransformations(root_node):
    '''
    Flush transformations. All transformations will be applied to the geometry nodes on lowest level of the selected sub-tree. Afterwards all transform nodes will be identity transforms.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def flushTransformationsKeepFaceNormals(root_node):
    '''
    Flush transformations. All transformations will be applied to the geometry nodes on lowest level of the selected sub-tree. Afterwards all transform nodes will be identity transforms. Doesn't change the face normals for mirror transform parents.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def flushTranslations(root_node):
    '''
    Moves translation-related transform information of selected sub-tree to the geometry nodes on lowest level.

@param root_node: the root node of the sub-tree.

@type root_node: NodePtr
    '''
    pass



def measureCacheEfficiency(root_node, cache_size):
    '''
    Measures the cache efficiency. 1.0 means one vertex calculation per triangle.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param cache_size: The cache size in [12,inf[.

@type cache_size: integer

@return: The cache efficiency in [0.5,3.0].

@rtype: float (32bit)
    '''
    pass



def mergeGeometry(root_node):
    '''
    Merges geometry nodes.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def optimizeGeometry(root_node, strips, fans, stitches):
    '''
    Optimizes geometry to speed up rendering. Stripes and fans are optimized primitives that can be rendered much faster by your graphics hardware.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param strips: Strips: On/Off (Optional).

@type strips: boolean

@param fans: Fans: On/Off (Optional).

@type fans: boolean

@param stitches: Stitches: On/Off (Optional).

@type stitches: boolean
    '''
    pass



def optimizeIndices(root_node):
    '''
    Optimize indices to improve render speed.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def optimizeMaterials(root_node):
    '''
    Optimize the specified scenegraph by using as few materials as possible.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def optimizeTree(root_node, options):
    '''
    Optimizes the scenegraph by applying specified optimization functions. There are two functions available:

optimizeTree(options) optimizes the complete scene or

optimizeTree(root_node,options) optimizes only a specified subgraph.

The Options parameter is to be defined by using bitwise OR of parameters of the following list:

OptimizeNothing

OptimizeMergeGeometryNodes

OptimizeFlushTransformationNodes

OptimizeFlushTransformationNodesKeepFaceNormals

OptimizeFlushTransformationTranslations

OptimizeFlushTransformationRotations

OptimizeFlushTransformationScales

OptimizeFlushSelectedTransformation

OptimizeCleanUpGroupNodes

OptimizeFlushMaterialGroupNodes

OptimizeUnflushMaterialGroupNodes

OptimizeUnifyVertices

OptimizeMaterials

OptimizeCreateStrips

OptimizeCreateFans

OptimizeRemoveLODs

OptimizeRemoveLODsKeepWorst

OptimizeRemovePoints

OptimizeRemoveLines

OptimizeTriangulate

OptimizeDeepTriangulate

OptimizeRemoveDegPolys

OptimizeFlushTexGen

OptimizeFlushTexTransform

OptimizeOctree

OptimizeRemoveVertexNormals

OptimizeRemoveVertexColor

OptimizeRemoveLines

OptimizeRemoveVertexSecondaryColor

OptimizeRemoveTextureCoordinates  (replaces deprecated option OptimizeRemoveTexCoord1)

OptimizeRemoveTextureCoordinates1 (replaces deprecated option OptimizeRemoveTexCoord2)

OptimizeRemoveTextureCoordinates2 (replaces deprecated option OptimizeRemoveTexCoord3)

OptimizeRemoveTextureCoordinates3 (replaces deprecated option OptimizeRemoveTexCoord4)

OptimizeRemoveTextureCoordinates4

OptimizeRemoveTextureCoordinates5

OptimizeRemoveTextureCoordinates6

OptimizeRemoveTextureCoordinates7

OptimizeShareGeometries

OptimizeShareGeometryProperties

OptimizeShareMaterials

OptimizeShareTextures

OptimizeShareBlendChunks

OptimizeRemoveSwitches

OptimizeReductionByteNormals

OptimizeReduction16BitIndices

OptimizeReduction16BitLengths

OptimizeRemoveMaterialGroupNodes

OptimizeRemoveEmptyGroupNodes

OptimizeRemoveEmptyGeometries

OptimizeRemoveEmptyShells

OptimizeRemoveAnimations

OptimizeRemoveFileInfo

OptimizeRemoveBSides

OptimizeRemoveTransformVariants

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param options: Options.

@type options: integer
    '''
    pass



def removeAnimations(root_node):
    '''
    Removes all animations from nodes in the selected sub-tree.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeBSides(root_node):
    '''
    Removes all geometries that are set to B-side from the selected sub-tree.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeDegPolys(root_node):
    '''
    Degenerated Polygons (covering an area of size 0) will be removed.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeEmptyGeometries(root_node):
    '''
    Removes empty geometry nodes.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeEmptyShells(root_node):
    '''
    Removes empty shell nodes.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeIdentityTransforms(root_node):
    '''
    Removes identity Transforms. This command is deprecated and doesn't do anything. 

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeInvalidTexCoords(root_node):
    '''
    Remove invalid texture coordinates.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeLODNodes(root_node):
    '''
    Remove LOD nodes. Removes the lower resolution children of all LOD nodes and keeps only the highest resolution LOD within the scene. Rendering performance may drop but the model will utilize less memory.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeLines(root_node):
    '''
    Remove line geometries from the scene representation.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeMaterialGroups(root_node):
    '''
    Remove material groups.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeNURBS(root_node):
    '''
    Remove the NURBS information of the selected Node hierarchy. All surfaces and shell nodes are converted to meshes.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removePoints(root_node):
    '''
    Remove point geometries from the scene representation.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeSwitchNodes(root_node):
    '''
    Remove Switch nodes from a given subgraph.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeTransformNodesWithNoChildren(root_node):
    '''
    Removes all transform nodes with no children.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeTransformVariants(root_node):
    '''
    Removes all transform variants from nodes in the selected sub-tree.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def removeUnusedMaterials():
    '''
    Removes unused materials.
    '''
    pass



def separateGeoProperties(root_node):
    '''
    Separate shared geometry properties.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def shareGeometries(root_node, checkWorldMatrix):
    '''
    Shares equal geometry nodes.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param checkWorldMatrix: If true, this method only shares the geometry when the world matrix of both nodes is equal (Optional).

@type checkWorldMatrix: bool
    '''
    pass



def shareImages():
    '''
    Share images.
    '''
    pass



def sharePtrs(root_node, types):
    '''
    Share pointers. Eliminates all duplicate entities from the scene and replaces them with references. Saves a lot of memory.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param types: The list of types e.g. TextureChunk,Image.

@type types: list of strings
    '''
    pass



def sortIndices(root_node):
    '''
    Sort indices to improve render speed.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def tipsifyIndices(root_node, cache_size):
    '''
    Optimize indices to improve render speed.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param cache_size: The cache size in [12,inf[ (Optional).

@type cache_size: integer
    '''
    pass



def triangulate(root_node, recreateAllProperties):
    '''
    Triangulate the geometries. The resulting geometry is no longer optimized for the graphics card.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr

@param recreateAllProperties: If true, this method recreates all properties. Otherwise, it generates only new indices, types, and lengths.

@type recreateAllProperties: bool
    '''
    pass



def unflushMaterialGroups(root_node):
    '''
    The materials within a geometry will be removed, instead a MaterialGroup with the material will be placed above.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def unifyVertices(root_node):
    '''
    Optimize the geometry by creating shared indices and removing unused and double coords, colors, and texcoords. Speeds up rendering and saves memory.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass



def verifyGeometry(root_node):
    '''
    Verifies geometry nodes.

@param root_node: The root node of the subgraph to be optimized.

@type root_node: NodePtr
    '''
    pass


