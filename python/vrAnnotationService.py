'''
vrAnnotationService
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Creates a new annotation. Each annotation is created with a unique name. If the passed name is not unique (e.g. an annotation with that name already exists), it is modified so that it is unique.
'''

from typing import List


class vrdNode():
    pass


class ScalingMode():
    pass


class QColor():
    pass


class vrdAnnotationNode():
    pass


def createAnnotation(name: str) -> vrdAnnotationNode:
    '''
    Creates a new annotation. Each annotation is created with a unique name. If the passed name is not unique (e.g. an annotation with that name already exists), it is modified so that it is unique.
    '''
    return None


def deleteAnnotation(annotation: vrdAnnotationNode):
    '''
    Deletes an existing annotation.
    '''
    pass


def duplicateAnnotation(annotation: vrdAnnotationNode) -> vrdAnnotationNode:
    '''
    Duplicates an existing annotation.
    '''
    return None


def findAnnotation(name: str) -> vrdAnnotationNode:
    '''
    Searches for an existing annotation via name.
    '''
    return None


def getAnnotationRoot() -> vrdNode:
    '''
    Returns the root node of the annotation hierarchy. Currently, all annotations are children of that root.
    '''
    return None


def getAnnotations() -> List[vrdAnnotationNode]:
    '''
    Returns a list of all annotations.
    '''
    return None


def getDefaultBackgroundColor() -> QColor:
    '''
    Returns the default label background color of annotations.
    '''
    return None


def getDefaultFontColor() -> QColor:
    '''
    Returns the default font color for the displayed text of annotations.
    '''
    return None


def getDefaultLineColor() -> QColor:
    '''
    Returns the default line color for borders and leaders of annotations.
    '''
    return None


def getDefaultScalingMode() -> ScalingMode:
    '''
    Returns the default scaling mode of annotations.
    '''
    return None


def getDefaultSize() -> float:
    '''
    Returns the default size of annotations.
    '''
    return None


def getDefaultUseSceneNodeVisibility() -> bool:
    '''
    Returns the default value for using the linked scene graph node to determine the visibility of annotations.
    '''
    return None


def getShowAnnotations() -> bool:
    '''
    Returns the global visibility of annotations.
    '''
    return None


def loadAnnotations(path: str) -> List[vrdAnnotationNode]:
    '''
    Loads annotation data from an xml file. The annotations are directly added to the scene.
    '''
    return None


def pickAnnotation(annotation: vrdAnnotationNode):
    '''
    Activates the scene node picking functionality of the UI for the passed annotation.
    '''
    pass


def saveAnnotations(annotations: List[vrdAnnotationNode], path: str):
    '''
    Saves a list of annotations. The annotation data is stored in an xml file.
    '''
    pass


def setDefaultBackgroundColor(color: QColor):
    '''
    Sets the default label background color of annotations. It is used when creating a new annotation.
    '''
    pass


def setDefaultFontColor(color: QColor):
    '''
    Sets the default font color for the displayed text of annotations. It is used when creating a new annotation.
    '''
    pass


def setDefaultLineColor(color: QColor):
    '''
    Sets the default line color for borders and leaders of annotations. It is used when creating a new annotation.
    '''
    pass


def setDefaultScalingMode(mode: ScalingMode):
    '''
    Sets the default scaling mode of annotations. It is used when creating a new annotation.
    '''
    pass


def setDefaultSize(size: float):
    '''
    Sets the default size of annotations. It is used when creating a new annotation.
    '''
    pass


def setDefaultUseSceneNodeVisibility(use: bool):
    '''
    Sets the default value for using the linked scene graph node to determine the visibility of annotations. It is used when creating a new annotation.
    '''
    pass


def setShowAnnotations(value: bool):
    '''
    Sets the global visibility of annotations. Individual visibility can be set in         vrdAnnotationNode.
    '''
    pass


def annotationCreated(annotation: vrdAnnotationNode):
    '''
    Triggered when a new annotation was created.
    '''
    pass


def annotationsAdded():
    '''
    Triggered when one or more annotations were added to the scene.
    '''
    pass


def annotationsDeleted():
    '''
    Triggered when one or more annotations were deleted from the scene.
    '''
    pass


def showAnnotationsChanged(value: bool):
    '''
    Triggered when the global annotation visibility has changed.
    '''
    pass

