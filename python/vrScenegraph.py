
# Autogenerated method stubs for 'vrScenegraph.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def addChilds(node, children):
    '''
    Adds a list of child nodes to a node.




Example:: See also addChildren.py

@param node: The node.

@type node: NodePtr

@param children: The list of children.

@type children: list of vrNodePtrs
    '''
    pass



def applyMaterial(nodes, mats, applyToMaterialGroupParent, skipMaterialGroupChilds):
    '''
    Applies a list of materials to a list of nodes.

@param nodes: The nodes.

@type nodes: list of vrNodePtrs

@param mats: The materials.

@type mats: list of vrMaterialPtrs

@param applyToMaterialGroupParent: Apply the material to the group parent of the provided node: On/Off.

@type applyToMaterialGroupParent: bool

@param skipMaterialGroupChilds: Skip application the material to the material group children of the provided node: On/Off.

@type skipMaterialGroupChilds: bool
    '''
    pass



def clearFindCache():
    '''
    Clears the find cache. The find cache is an internal cache structure to speed up the execution of the findNode(s) command. After changing the scenegraph the findcache is no longer valid and needs to be rebuilt! clearFindCache() Invalidates the cache so all find calls will no longer use the cache resulting in longer search times.
Example:: See also example find2.py
    '''
    pass



def cloneMirrorAxisNode(node, deep, flush, axis):
    '''
    Clone mirrors a subtree at a specific axis.

@param node: The node.

@type node: NodePtr

@param deep: Deep clone: On/Off.

@type deep: bool

@param flush: Flush transformations: On/Off.

@type flush: bool

@param axis: The mirror axis.

@type axis: Vec3f
    '''
    pass



def cloneMirrorNode(node, deep, flush):
    '''
    Clone mirrors a subtree at the y-axis.

@param node: The node.

@type node: NodePtr

@param deep: Deep clone: On/Off.

@type deep: bool

@param flush: Flush transformations: On/Off.

@type flush: bool
    '''
    pass



def cloneNode(node, deep):
    '''
    Clones a subtree.

@param node: The node.

@type node: NodePtr

@param deep: Deep clone: On/Off.

@type deep: bool@return: The clone node.

@rtype: vrNodePtr
    '''
    pass



def convertCore(node, type):
    '''
    Converts the core of a node to another type.

The type of a core can be found in the Node Editor.

To convert a Shell or Surface node to a Mesh, pass "Mesh" as type.

@param node: The node.

@type node: vrNodePtr

@param type: The new core type.

@type type: string
    '''
    pass



def copyNode(node):
    '''
    Copy a node from the scenegraph.

@param node: The node to copy.

@type node: NodePtr

@return: True on success, false otherwise.

@rtype: bool
    '''
    pass



def copyNodes(nodes):
    '''
    Copy a list of nodes from the scenegraph.

@param nodes: The nodes to copy.

@type nodes: list of vrNodePtrs

@return: True on success, false otherwise.

@rtype: bool
    '''
    pass



def copyTransformation(source, target, copyTranslation, copyRotation, copyScale, copyRotatePivot, copyScalePivot, copyShearing):
    '''
    Copies the transformation of one node to another. If only source and target node are provided a full copy will be done, otherwise

only the chosen attributes will be copied if the target is a standard transform. If the target is a matrix transform, the full matrix will always be copied.

@param source: The source node.

@type source: NodePtr

@param target: The target node.

@type target: NodePtr

@param copyTranslation: copy translation values.

@type copyTranslation: bool

@param copyRotation: copy rotation values.

@type copyRotation: bool

@param copyScale: copy scaling values.

@type copyScale: bool

@param copyRotatePivot: copy rotation pivot values.

@type copyRotatePivot: bool

@param copyScalePivot: copy scale pivot values.

@type copyScalePivot: bool

@param copyShearing: copy shearing values.

@type copyShearing: bool
    '''
    pass



def createNode(type, name, parent):
    '''
    Creates a new node of a given type ans name into the scenegraph as a child of given parent.

Actually there are three functions:

createNode(typeString, name)

createNode(typeString, checkUniqueNaming)

createNode(typeString, name)

createNode(typeString, name, checkUniqueNaming)

createNode(typeString, name, parent)

createNode(typeString, name, parent, checkUniqueNaming)

Types can be:
   -   Group
   -   MaterialGroup
   -   StateSortingGroup
   -   Tranform
   -   ComponentTransform
   -   Billboard
   -   Switch
   -   StereoSwitch
   -   DistanceLOD
   -   LighEnv
   -   DirectionalLight
   -   PointLight
   -   SpotLight
   -   Sound
   -   SoundObstructor
   -   any type that is supported by OpenSG

@param type: The type of the node.

@type type: string  
@param name: The name of the node.

@type name: string

@param parent: The parent of the node.

@type parent: vrNodePtr

@return: The created node.

@rtype: vrNodePtr
    '''
    pass



def cutNode(node):
    '''
    Cut a node from the scenegraph.

@param node: The node to cut.

@type node: NodePtr

@return: True on success, false otherwise.

@rtype: bool
    '''
    pass



def cutNodes(nodes):
    '''
    Cut a list of nodes from the scenegraph.

@param nodes: The nodes to cut.

@type nodes: list of vrNodePtrs

@return: True on success, false otherwise.

@rtype: bool
    '''
    pass



def deleteNode(node, force):
    '''
    Deletes a node.

@param node: Node to delete.

@type node: NodePtr

@param force: Force delete: If true, otherwise undeleteable nodes are also deleted. Optional parameter. Default is false.

@type force: bool

@return: True on success, false otherwise.

@rtype: bool
    '''
    pass



def deleteNodes(nodes, force):
    '''
    Deletes a list of nodes.

@param nodes: The nodes to delete.

@type nodes: list of vrNodePtrs

@param force: Force delete: If true, otherwise undeleteable nodes are also deleted. Optional parameter. Default is false.

@type force: bool

@return: True on success, false otherwise.

@rtype: bool
    '''
    pass



def deselectAll():
    '''
    Deselects all objects from scenegraph.
    '''
    pass



def enableScenegraph(status):
    '''
    Enables scenegraph updates.

@param status: Enable/disable update: true enables and false disables scenegraph updates.

@type status: boolean
    '''
    pass



def findNode(node_name, regex):
    '''
    Finds the node via name. Actually there are two functions to find a named node:

findNode(node_name): finds a node depending on its name.

findNode(node_name,regex): finds a node depending on a regular expression.

Be aware that this a costly operation. To speed up use the function initFindCache once your scenegraph structure does no longer change.

Confirm the validity of the resulting vrNodePtr by checking nodePtr.isValid().

@param node_name: The name of the node.

@type node_name: string

@param regex: Use regular expressions: On/Off.

@type regex: boolean

@return: The found node.

@rtype: vrNodePtr
    '''
    pass



def findNodePath(node_path, regex):
    '''
    Finds the node via path name. Actually there are two functions to find a named node:

Actually there are two functions:

findNodePath(node_path): finds a node depending on its node path.

findNodePath(node_path,regex): finds a node depending on a regular expression.

@param node_path: The names of the ancestor nodes and the node itself concatenated by a slash (/), e.g. "Root/Group/Geometry123". 

@type node_path: string

@param regex: Use regular expressions: On/Off.

@type regex: boolean

@return: The found node.

@rtype: vrNodePtr
    '''
    pass



def findNodes(node_name, node_names, regex):
    '''
    Finds the node via name. Actually there are four functions to find named nodes:

findNodes(node_name): finds a list of nodes depending on their name.

findNodes(node_name,regex): finds a list of nodes depending on a regular expression.

findNodes(node_name,regex,include_components): finds a list of nodes depending on a regular expression. Also searches below shells.

findNodes(node_names): finds a list of nodes depending on a list of names.

findNodes(node_names,regex): finds a list of nodes depending on a list of regular expressions.

findNodes(node_names,regex): finds a list of nodes depending on a list of regular expressions. Also searches below shells.

Be aware that this a costly operation. To speed up use the function initFindCache once your scenegraph structure does no longer change.

@param node_name: The name of the node.

@type node_name: string

@param node_names: The list of names of the nodes.

@type node_names: list of strings

@param regex: Use regular expressions: On/Off.

@type regex: boolean

@return: The found nodes.

@rtype: list of vrNodePtrs
    '''
    pass



def findUniquePath(unique_path):
    '''
    Finds the node via path unique path

@param unique_path: Unique path name with index:name for each node in the path

@type unique_path: string

@return: The found node.

@rtype: vrNodePtr
    '''
    pass



def getAllNodes():
    '''
    Returns a list of all scenegraph nodes.

@return: All the nodes in the scenegraph.

@rtype: list of vrNodePtrs
    '''
    pass



def getClipboard():
    '''
    Returns a list of all nodes in the clipboard. E.g. when you select a node and press ctrl+c (or copy from the menu), the copied node is in the clipboard.

@return: All the nodes in the clipboard.

@rtype: list of vrNodePtrs
    '''
    pass



def getHeadlight():
    '''
    Returns the headlight node.

@return: The headlight node.

@rtype: vrNodePtr
    '''
    pass



def getInternalRootNode():
    '''
    Returns the internal root node.

@return: The internal root node.

@rtype: vrNodePtr
    '''
    pass



def getNodeID(name):
    '''
    Returns the node id of the node with the provided name.

@param name: The name of node.

@type name: string

@return: The node id.

@rtype: unsigned integer
    '''
    pass



def getNodeName(node):
    '''
    Returns the name of a node.

@param node: The node.

@type node: NodePtr

@return: The name of node.

@rtype: string
    '''
    pass



def getNodePath(node):
    '''
    Returns the whole path name of a node.

@param node: The node.

@type node: NodePtr

@return: The path name of node.

@rtype: string
    '''
    pass



def getNodeTags(node):
    '''
    Returns the list of tags attached to the given node.

@param node: The node to check.

@type node: NodePtr
    '''
    pass



def getRootNode():
    '''
    Returns the root node.

@return: The root node.

@rtype: vrNodePtr
    '''
    pass



def getSceneSwitches():
    '''
    Finds all the switches in the scene.

@return: The found switches.

@rtype: list of strings
    '''
    pass



def getSelectedNode():
    '''
    Returns the selected node.

@return: The selected node.

@rtype: vrNodePtr
    '''
    pass



def getSelectedNodes():
    '''
    Returns a list of selected nodes.

@return: The selected nodes.

@rtype: list of vrNodePtrs
    '''
    pass



def getSelectedRootNodes():
    '''
    Returns a list of selected root nodes.

@return: The selected root nodes.

@rtype: list of vrNodePtrs
    '''
    pass



def getSuperRootNode():
    '''
    Returns the super root node.

@return: The super root node.

@rtype: vrNodePtr
    '''
    pass



def getTransformRootNode():
    '''
    Returns the transform root node.

@return: The transform root node.

@rtype: vrNodePtr
    '''
    pass



def getUniquePath(node):
    '''
    Returns a unique path for this node.

@param node: The node.

@type node: NodePtr

@return: The unique path of node.

@rtype: string
    '''
    pass



def groupSelection():
    '''
    Groups the selected nodes under a newly created Transform3D node.
    '''
    pass



def hasNodeTag(node, tag):
    '''
    Checks if a node has a certain tag.

@param node: The node to check.

@type node: NodePtr

@param tag: The tag string to check.

@type tag: string
    '''
    pass



def hasNodeTags(node, tag):
    '''
    Checks if a node has a certain tag.

@param node: The node to check.

@type node: NodePtr

@param tag: The tag string to check.

@type tag: string
    '''
    pass



def hideNode(node):
    '''
    Hide the node from the perspective view and disable it on the scenegraph.

@param node: The node to hide.

@type node: NodePtr
    '''
    pass



def hideNodes(nodes):
    '''
    Hide the nodes in the list from the perspective view and disable them on the scenegraph.

@param nodes: The nodes to hide.

@type nodes: list of vrNodePtrs
    '''
    pass



def ignoreAutoHeadlight():
    '''
    Ignores the automatic headlight if another lightsource is set.
    '''
    pass



def initFindCache():
    '''
    Build up an internal cache structure to speed up execution of the python commands findNode and findNodes. E.g. for a scene with 10000 nodes it is about 700 times faster. Be aware that this cache is no longer valid after you have deleted or created nodes.


Example:: See also example find2.py
    '''
    pass



def insertParentNode(node, newParent):
    '''
    Insert a new parent node.

@param node: The node.

@type node: NodePtr

@param newParent: The new parent node.

@type newParent: NodePtr
    '''
    pass



def invertSelection():
    '''
    Inverts the current selection in the scenegraph.
    '''
    pass



def invertSelectionInGroup():
    '''
    Inverts the current selection inside the parent group in the scenegraph.
    '''
    pass



def isCloned(node):
    '''
    Checks if a node is cloned.

@param node: The node to check.

@type node: NodePtr
    '''
    pass



def moveNode(node, from, to):
    '''
    Move a node from "from" to "to".

@param node: The node to move.

@type node: NodePtr

@param from: The node "from".

@type from: NodePtr

@param to: The node "to".

@type to: NodePtr
    '''
    pass



def moveNodes(nodes, froms, tos):
    '''
    Move a List of nodes from a list "from" to a list "to".

@param nodes: The nodes to move.

@type nodes: list of vrNodePtrs

@param froms: From the actual parent nodes "from".

@type froms: list of vrNodePtrs

@param tos: To their new parent nodes "to".

@type tos: list of vrNodePtrs
    '''
    pass



def moveNodesAfter():
    '''
    Internal function.
    '''
    pass



def pasteNode(node):
    '''
    Paste a node into the scenegraph.

@param node: The node to paste.

@type node: NodePtr
    '''
    pass



def pasteNodes(nodes):
    '''
    Paste some nodes into the scenegraph.

@param nodes: The nodes to paste.

@type nodes: list of vrNodePtr
    '''
    pass



def rebuildClones():
    '''
    Rebuilds all clone nodes in case a operation has broken the cloning.
    '''
    pass



def removeSelectedNodes(nodes):
    '''
    Removes the selected node

Removes a list of nodes.

@param nodes: The nodes to delete.

@type nodes: list of vrNodePtrs
    '''
    pass



def selectAll():
    '''
    Selects all objects from the scenegraph.
    '''
    pass



def selectNode(node, name, status):
    '''
    Select/Deselect a node.

There are four valid sets of parameters:

selectNode(node, status): Select/Deselect a node.

selectNode(node): Select a node.

selectNode(name, status): Select/Deselect a node by name.

selectNode(name): Select a node by name.

@param node: The node to select.

@type node: NodePtr

@param name: The name of the node to select.

@type name: string

@param status: Status for de-/selection: true to select and false to deselect.

@type status: boolean
    '''
    pass



def selectNodes(nodes, status):
    '''
    Select/Deselects multiple nodes.

There are two valid sets of parameters:

selectNodes(nodes, status): Select/Deselects all nodes from a list of nodes.

selectNodes(nodes): Selects all nodes from a list of nodes.

@param nodes: The list of nodes.

@type nodes: list of vrNodePtrs

@param status: Status for de-/selection: true to select and false to deselect.

@type status: boolean
    '''
    pass



def selectNodesNoUndo(nodes, status):
    '''
    Select/Deselects multiple nodes.

There are two valid sets of parameters:

selectNodes(nodes, status): Select/Deselects all nodes from a list of nodes without adding an entry to the undo stack.

selectNodes(nodes): Selects all nodes from a list of nodes without adding an entry to the undo stack.

@param nodes: The list of nodes.

@type nodes: list of vrNodePtrs

@param status: Status for de-/selection: true to select and false to deselect.

@type status: boolean
    '''
    pass



def selectParent():
    '''
    Selects the parent node from the currently selected node in the scenegraph.
    '''
    pass



def setBoundingBoxSelection(enabled):
    '''
    Sets bounding box selection mode.

@param enabled: true, false.

@type enabled: bool
    '''
    pass



def setSwitchChoiceByTag(node, tags):
    '''
    Sets the choice of a switch node based on the given tag.

@param node: The switch node.

@type node: NodePtr

@param tags: The tag to check.

@type tags: string
    '''
    pass



def setSwitchChoiceByTags(node, tags, matchAllTags ):
    '''
    Sets the choice of a switch node based on the given tags.

@param node: The switch node.

@type node: NodePtr

@param tags: The list of tag strings to check.

@type tags: string

@param matchAllTags : If true only nodes which contain all give tags are returns. If false any node that contains at least one tag is returned.

@type matchAllTags: bool
    '''
    pass



def showComponents(enabled):
    '''
    Sets show components mode.

@param enabled: true, false.

@type enabled: bool
    '''
    pass



def showNode(node):
    '''
    Show the node in the perspective view and enable it on the scenegraph.

@param node: The node to show.

@type node: NodePtr
    '''
    pass



def showNodes(nodes):
    '''
    Show the nodes in the list from the perspective view and enable them on the scenegraph.

@param nodes: The nodes to show.

@type nodes: list of vrNodePtrs
    '''
    pass



def showScenegraph(status):
    '''
    Shows/hides the scenegraph widget.

@param status: Enable/disable: true shows and false hides.

@type status: boolean
    '''
    pass



def splitGeometryTris():
    '''
    Splits a geometry into triangles.
    '''
    pass



def subChilds(node, children):
    '''
    Remove a list of children from a node.

@param node: The node.

@type node: NodePtr

@param children: The list of children.

@type children: list of vrNodePtrs 
    '''
    pass



def uncreateNode(node, type, name, parent):
    '''
    Uncreates node with node, type, name, and parent.

@param node: The node.

@type node: vrNodePtr

@param type: The type of the node.

@type type: string

@param name: The name of the node.

@type name: string

@param parent: The parent of the node.

@type parent: vrNodePtr
    '''
    pass



def undeleteNode(node):
    '''
    Undeletes a node.

@param node: The node to undelete.

@type node: NodePtr
    '''
    pass



def undeleteNodes(nodes):
    '''
    Undelete a list of nodes.

@param nodes: The nodes to undelete.

@type nodes: list of vrNodePtrs
    '''
    pass



def unshareNode(node):
    '''
    Unshares a subtree.

@param node: The node.

@type node: NodePtr

@return: The new unshared node.

@rtype: vrNodePtr
    '''
    pass



def unsplitGeometryTris():
    '''
    Merges a geometry that was split into triangles back to one geometry.
    '''
    pass



def updateScenegraph(force):
    '''
    Updates scenegraph.

@param force: Enable/disable force: true enables and false disables force.

@type force: boolean
    '''
    pass


