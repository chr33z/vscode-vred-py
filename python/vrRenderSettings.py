
# Autogenerated method stubs for 'vrRenderSettings.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def addPreset(name):
    '''
    Add preset to Render Queue.

@param name: The name of the preset 

@type name: string
    '''
    pass



def applyPreset(name):
    '''
    Apply preset in Render Queue .

@param name: The name of the preset 

@type name: string
    '''
    pass



def clearRenderVariantSetGroups():
    '''
    Removes all variant set groups.
    '''
    pass



def disableRaytracingOverrides():
    '''
    Disables the raytracing override settings in all materials.
    '''
    pass



def generateRayFile(filename, numPhotons, maxDepth):
    '''
    Generates a rayfile in ASCII format. Usage: Apply a diffuse black material to every object that is not supposed to reflect any light. Rays are stored on each diffuse hit at the moment.

@param filename: The output filename for the generated rayfile.

@type filename: const char* 

@param numPhotons: The number of photons to trace.

@type numPhotons: unsigned int 

@param maxDepth: The maximum number of bounces a photon can take.

@type maxDepth: unsigned int
    '''
    pass



def getDenoiseFilter():
    '''
    Returns the denoise filter used.

@rparam: filtertype.

@rtype: unsigned int
    '''
    pass



def getDenoiseFilterThreshold():
    '''
    Returns the denoise filter threshold value

@rparam: The threshold value.

@rtype: double
    '''
    pass



def getEnableDenoiseFilter():
    '''
    Deprecated, use getDenoiseFilter instead: Returns whether the CPU denoise filter for raytracing is enabled or not.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getIlluminant():
    '''
    Returns the illuminant id used.

@rparam: illuminant id.

@rtype: int
    '''
    pass



def getNURBSRaytracing():
    '''
    Returns whether NURBS raytracing is on or off.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getRaytracingAAImageFilterHeight():
    '''
    Returns the height of the pixel filter in use.

@rparam: pixel filter height.

@rtype: float
    '''
    pass



def getRaytracingAAImageFilterType():
    '''
    Returns the pixel filter type in use.

@rparam: pixel filter type id.

@rtype: int
    '''
    pass



def getRaytracingAAImageFilterWidth():
    '''
    Returns the width of the pixel filterin use.

@rparam: pixel filter width.

@rtype: float
    '''
    pass



def getRaytracingAAThresholdQuality():
    '''
    Returns the adaptive antialiasing quality level.

@rparam: threshold quality level.

@rtype: int
    '''
    pass



def getRaytracingClampValue():
    '''
    Returns the clamping value.

@rparam: clamping value.

@rtype: float
    '''
    pass



def getRaytracingClampingEnable():
    '''
    Returns whether clamping is enabled or disabled.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getRaytracingCores():
    '''
    Returns the number of cores to be used during raytracing.

@return: The number of cores to be used during raytracing.

@rtype: int
    '''
    pass



def getRaytracingFinalGatherRadius():
    '''
    Returns the final gather lookup radius.

@rparam: lookup radius.

@rtype: float
    '''
    pass



def getRaytracingImageSamples():
    '''
    Returns the number of anti-aliasing samples.

@return: The number of image samples.

@rtype: int
    '''
    pass



def getRaytracingInteractiveFinalGatherQuality():
    '''
    Returns the interactive final gather quality level.

@rparam: quality level.

@rtype: int
    '''
    pass



def getRaytracingInteractiveIBLQuality():
    '''
    Returns the interacitve ibl quality level in use.

@rparam: quality level.

@rtype: int
    '''
    pass



def getRaytracingInteractivePhotonCount():
    '''
    Returns the interactive photon count.

@rparam: photon count.

@rtype: int
    '''
    pass



def getRaytracingInteractiveQuality():
    '''
    Returns the interactive quality level in use.

@rparam: quality level.

@rtype: int
    '''
    pass



def getRaytracingInteractiveQualityMode():
    '''
    Returns the interactive quality mode in use.

@rparam: quality mode.

@rtype: int
    '''
    pass



def getRaytracingInteractiveTextureSharpness():
    '''
    Returns the sharpness scale factor for texture sampling during interacitve mode.

@rparam: sharpness.

@rtype: float
    '''
    pass



def getRaytracingInteractiveTraceDepth():
    '''
    Returns the interactive trace depth in use.

@rparam: trace depth.

@rtype: int
    '''
    pass



def getRaytracingLightEvaluationThreshold():
    '''
    Returns the threshold used for culling lights.

@rparam: sharpness.

@rtype: float
    '''
    pass



def getRaytracingMode():
    '''
    Returns the raytracing mode.

@rparam: mode.

@rtype: int
    '''
    pass



def getRaytracingPhotonLookupCount():
    '''
    Returns the photon lookup count.

@rparam: photon count.

@rtype: int
    '''
    pass



def getRaytracingPhotonMapFreezeMode():
    '''
    Gets the freeze mode for updating photon map.

@return: The freeze mode: 0 = update photon map as normal, 1 = freeze the updating of photon map.

@rtype: int
    '''
    pass



def getRaytracingPhotonMapRefreshMode():
    '''
    Returns final gathering refresh mode.

@rparam: refresh mode.

@rtype: int
    '''
    pass



def getRaytracingPhotonMode():
    '''
    Returns the photon mode.

@rparam: photon mode.

@rtype: int
    '''
    pass



def getRaytracingPhotonRadius():
    '''
    Returns the photon lookup radius.

@rparam: lookup radius.

@rtype: float
    '''
    pass



def getRaytracingSampleOffset():
    '''
    Returns the sample offset to start the rendering. Usually this will be 0 unless you want to continue at a certain sample id.

@rparam: sample offset.

@rtype: int
    '''
    pass



def getRaytracingSamplesThreshold():
    '''
    Returns the samples threshold.

@return: sample number.

@rtype: int
    '''
    pass



def getRaytracingStillFrameFinalGatherQuality():
    '''
    Returns the stillframe final gather quality level.

@rparam: quality level.

@rtype: int
    '''
    pass



def getRaytracingStillFrameIBLQuality():
    '''
    Returns the stillframe ibl quality level in use.

@rparam: quality level.

@rtype: int
    '''
    pass



def getRaytracingStillFramePhotonCount():
    '''
    Returns the stillframe photon count.

@rparam: photon count.

@rtype: int
    '''
    pass



def getRaytracingStillFrameQuality():
    '''
    Returns the still frame reflection/refraction quality level in use.

@rparam: quality level.

@rtype: int
    '''
    pass



def getRaytracingStillFrameQualityMode():
    '''
    Returns the stillframe quality mode in use.

@rparam: quality mode.

@rtype: int
    '''
    pass



def getRaytracingStillFrameSupersampling():
    '''
    Returns the stillframe supersampling factor.

@rparam: supersampling factor.

@rtype: int
    '''
    pass



def getRaytracingStillFrameTextureSharpness():
    '''
    Returns the sharpness scale factor for texture sampling during stillframe mode.

@rparam: sharpness.

@rtype: float
    '''
    pass



def getRaytracingStillFrameTraceDepth():
    '''
    Returns the stillframe trace depth in use.

@rparam: trace depth.

@rtype: int
    '''
    pass



def getRaytracingUseFinalGatherForGlossy():
    '''
    Returns whether the final gather map should be used for glossy reflections.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getRaytracingUseHighQualityTextureFiltering():
    '''
    Returns whether anisotropic texture filtering is allowed or not.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getRenderAlpha():
    '''
    Returns whether an alpha should be exported.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getRenderAnimation():
    '''
    Returns whether animation export is turned on or off.

@rparam: true/false.

@rtype: bool
    '''
    pass



def getRenderAnimationClip():
    '''
    Returns the name of the clip to render.

@rparam: clipname.

@rtype: string
    '''
    pass



def getRenderAnimationClips():
    '''
    Returns the names of the available clips in a scene.

@rparam: clip names.

@rtype: vector<string>
    '''
    pass



def getRenderAnimationFormat():
    '''
    Returns the output format.

@rparam: format.

@rtype: 0=Images, 1=Movie
    '''
    pass



def getRenderAnimationType():
    '''
    Returns the type of the animation to render.

@rparam: format.

@rtype: int
    '''
    pass



def getRenderBackgroundColor():
    '''
    Returns the background color.

@return: A vector with r, g and b values.

@rtype: Vec3f
    '''
    pass



def getRenderFilename():
    '''
    Returns the current image filename.

@return: The filename of the image to render to.

@rtype: string
    '''
    pass



def getRenderFps():
    '''
    Returns the frames per second for rendering and animation.

@rparam: fps.

@rtype: int
    '''
    pass



def getRenderFrameStep():
    '''
    Returns the frame step for rendering and animation.

@rparam: step.

@rtype: int
    '''
    pass



def getRenderICCProfile():
    '''
    Returns the ICC Profile Id.

@rparam: id.

@rtype: int
    '''
    pass



def getRenderMetaDataFlags():
    '''
    Returns the meta data flags bitmask.

@rparam: flags.

@rtype: int
    '''
    pass



def getRenderOutputFilenames():
    '''
    Returns all filenames that will be created when rendering is started, i.e. when using multiple viewpoints, animation frames or variant sets.

@return: All names of files to be created.

@rtype: vector<string>
    '''
    pass



def getRenderPNGQuality():
    '''
    Returns the current quality for writing PNG files.

@rtype: unsigned int
    '''
    pass



def getRenderPasses():
    '''
    Returns the names of the current active renderpasses.

@rparam: renderpasses.

@rtype: vector<string>
    '''
    pass



def getRenderPixelHeight():
    '''
    Returns height of the image in pixels. Note that these are floating point values due to the print width used.

@return: The height of the image in pixel.

@rtype: float
    '''
    pass



def getRenderPixelPerInch():
    '''
    Returns the number of pixels per inch.

@return: pixels per inch.

@rtype: float
    '''
    pass



def getRenderPixelWidth():
    '''
    Returns width of the image in pixels. Note that these are floating point values due to the print width used.

@return: The width of the image in pixel.

@rtype: float
    '''
    pass



def getRenderPremultiply():
    '''
    Returns whether premultiplied alpha should be used.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getRenderPrintHeight():
    '''
    Returns height of the image in centimeter.

@return: The height of the image.

@rtype: float
    '''
    pass



def getRenderPrintWidth():
    '''
    Returns width of the image in centimeter.

@return: The width of the image.

@rtype: float
    '''
    pass



def getRenderRegionEndX():
    '''
    Returns the right x-coordinate of the render region.

@rparam: xEnd.

@rtype: int
    '''
    pass



def getRenderRegionEndY():
    '''
    Returns the top y-coordinate of the render region.

@rparam: yEnd.

@rtype: int
    '''
    pass



def getRenderRegionStartX():
    '''
    Returns the left x-coordinate of the render region.

@rparam: xStart.

@rtype: int
    '''
    pass



def getRenderRegionStartY():
    '''
    Returns the lower y-coordinate of the render region.

@rparam: xStart.

@rtype: int
    '''
    pass



def getRenderStartFrame():
    '''
    Returns the startframe for rendering an animation.

@rparam: frame.

@rtype: int
    '''
    pass



def getRenderStopFrame():
    '''
    Returns the stop frame for rendering an animation.

@rparam: frame.

@rtype: int
    '''
    pass



def getRenderSupersampling():
    '''
    Gets the image supersampling setting.

@rparam: on/off.

@rtype: int
    '''
    pass



def getRenderTimeInSeconds():
    '''
    Returns the maximum render time in seconds.

@rparam: time in seconds.

@rtype: int
    '''
    pass



def getRenderTonemapHDR():
    '''
    Returns whether the image should be tonemapped when rendering to a HDR image format.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getRenderUseClipRange():
    '''
    Returns whether the clip range should be used.

@rparam: true/false.

@rtype: bool
    '''
    pass



def getRenderVariantSetGroups():
    '''
    Returns the names of all variant set groups used in the render settings.

@rparam: List of group names.

@rtype: vector<string>
    '''
    pass



def getRenderVariantSets():
    '''
    Returns the names of the variant sets used in this group.

@rparam: List of variant set names.

@rtype: vector<string>
    '''
    pass



def getRenderView():
    '''
    Returns the name of the active view.

@rparam: Name of the view.

@rtype: string
    '''
    pass



def getSpectralRaytracing():
    '''
    Returns whether spectral raytracing is on or off.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getUseInfiniteRenderInViewport():
    '''
    Returns whether infinite rendering in renderview is on or off.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getUseRenderPasses():
    '''
    Returns whether the render passes export is active or not.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getUseRenderRegion():
    '''
    Returns whether the render region is active or not.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getUseRenderTimeLimit():
    '''
    If true, the render time limit is used. Otherwise the number of image samples is used.

@rparam: on/off.

@rtype: bool
    '''
    pass



def getUseRenderVariantSets():
    '''
    Returns whether variant sets are used when rendering images.

@rparam: true/false.

@rtype: bool
    '''
    pass



def getUseRenderViewFromVariantSets():
    '''
    Returns whether views can be changed by selecting variant sets.

@rparam: true/false.

@rtype: bool
    '''
    pass



def removeRenderVariantSetGroup(groupName):
    '''
    Removes a variant set group.
@param groupName: Name of variant set group to be removed.

@type groupName: string
    '''
    pass



def setActiveGPUMask(mask):
    '''
    Sets the bitmask for gpus to use for gpu raytracing. This must be set before gpu raytracing is activated.

@param mask: bitmask for the active gpus.

@type mask: unsigned int
    '''
    pass



def setDenoiseFilter(filterType):
    '''
    Sets the denoise filter to use for raytracing.

@param filterType: 0 = Off, 1 = CPU Denoiser, 2 = AI Denoiser stillframe only, 3 = AI Denoiser Always.

@type filterType: unsigned int
    '''
    pass



def setDenoiseFilterThreshold(value):
    '''
    Sets the denoise filter threshold.

@param value: The threshold value.

@type value: double
    '''
    pass



def setEnableDenoiseFilter(on):
    '''
    Deprecated, use setDenoiseFilter instead: Sets the CPU denoise filter for raytracing to on or off.

@param on: On/Off switch.

@type on: bool
    '''
    pass



def setIlluminant(illuminant):
    '''
    Sets illuminant to be used as white for spectral raytracing. The XYZ-Illuminant does not convert the rendered image to RGB but outputs the XYZ values instead. 

@param illuminant: 0 = Equal Energy, 1 = D65, 2 = XYZ.

@type illuminant: int
    '''
    pass



def setNURBSRaytracing(on):
    '''
    Sets NURBS raytracing on or off. If off, the tessellated meshes will be used during raytracing. If on, the NURBS surfaces will be traced directly. 

@param on: On/Off switch.

@type on: bool
    '''
    pass



def setRaytracingAAAdaptiveSamples():
    '''
    This function is deprecated.
    '''
    pass



def setRaytracingAAImageFilter(id, width, height):
    '''
    Sets the pixel filter to use during stillframe antialiasing.

@param id: The filter id in [0,9]: (Box, Triangle, Gaussian, Mitchell, Lanczos, BSpline, Catmull-Rom, Sharp Triangle, Sharp Gaussian, Sharp BSpline).

@type id: int

@param width: The filter width in [0.5,5.0].

@type width: float

@param height: The filter height in [0.5,5.0].

@type height: float
    '''
    pass



def setRaytracingAAInitialSamples():
    '''
    This function is deprecated.
    '''
    pass



def setRaytracingAAThreshold():
    '''
    This function is deprecated.
    '''
    pass



def setRaytracingAAThresholdQuality(threshold):
    '''
    Sets the adaptive antialiasing quality level.

@param threshold: The threshold quality level in [0,5].

@type threshold: int
    '''
    pass



def setRaytracingCausticPhotonRadius(radius):
    '''
    Deprecated! Used to set the caustic photon lookup radius but it is no longer used. Use setRaytracingPhotonRadius instead.

@param radius: The caustic photon lookup radius.

@type radius: float
    '''
    pass



def setRaytracingClampValue(value):
    '''
    Sets the reflection clamping for raytracing.

@param value: The clamping value.

@type value: float
    '''
    pass



def setRaytracingClampingEnable(state):
    '''
    Enables output value clamping.

@param state: Clamping: On/Off.

@type state: bool
    '''
    pass



def setRaytracingCores(numCores):
    '''
    Sets the number of cores to use for raytracing.

@param numCores: The number of cores in [0, 1024].

@type numCores: int
    '''
    pass



def setRaytracingDOFEnable():
    '''
    Deprecated, Depth of Field is always on on a global level.
    '''
    pass



def setRaytracingFinalGatherRadius(radius):
    '''
    Sets the final gather radius.

@param radius: The final gather radius.

@type radius: float
    '''
    pass



def setRaytracingFinalGathering(quality):
    '''
    Sets the interactive and still frame final gathering quality to use. This function should be considered obsolete, use setRaytracingInteractiveFinalGatherQuality and setRaytracingStillFrameFinalGatherQuality instead.

@param quality: The final gather quality: 0 = off, 1 = 1, 2 = 4, 3 = 8, 4 = 16 Final Gather rays per sample.

@type quality: int
    '''
    pass



def setRaytracingImageSamples(samples):
    '''
    Sets the number of anti-aliasing samples.

@param samples: The total number of image samples.

@type samples: int
    '''
    pass



def setRaytracingIndirectPhotonRadius(radius):
    '''
    Deprecated! Sets the indirect photon lookup radius.

@param radius: The indirect photon lookup radius.

@type radius: float
    '''
    pass



def setRaytracingInteractiveFinalGatherQuality(quality):
    '''
    Sets the interactive final gathering quality to use.

@param quality: The final gather quality: 0 = off, 1 = 1, 2 = 4, 3 = 8, 4 = 16 Final Gather rays per sample.

@type quality: int
    '''
    pass



def setRaytracingInteractiveIBLQuality(quality):
    '''
    Sets the interactive ibl sampling quality level for raytracing.

@param quality: The quality level in [0,4].

@type quality: int
    '''
    pass



def setRaytracingInteractivePhotonCount(count):
    '''
    Sets the number of photons emitted during interactive rendering.

@param count: The number of photons.

@type count: int
    '''
    pass



def setRaytracingInteractiveQuality(quality):
    '''
    Sets the interactive quality level for raytracing.

@param quality: The quality level in [0,4].

@type quality: int
    '''
    pass



def setRaytracingInteractiveQualityMode(mode):
    '''
    Sets the interactive quality mode for raytracing.
Valid values are : 
Precomputed = -1
Precomputed + Reflections = 0
Precomputed + Shadows = 1
Precomputed + IBL = 2
Full Global Illumination = 3

@param mode: The quality mode in [-1,3].

@type mode: int
    '''
    pass



def setRaytracingInteractiveTextureSharpness(sharpness):
    '''
    Sets the sharpness factor for texture sampling in interactive mode (advanced feature). WARNING: Changing this settings may lead to rendering artifacts!

@param sharpness: The sharpness factor.

@type sharpness: float
    '''
    pass



def setRaytracingInteractiveTraceDepth(depth):
    '''
    Sets the interactive trace depth for raytracing.

@param depth: The maximum trace depth.

@type depth: int
    '''
    pass



def setRaytracingLightEvaluationThreshold(threshold):
    '''
    Sets the threshold used for culling lights in [0.0,1.0] range. Lower values are more accurate, higher values increase performance.

@param threshold: The threshold value.

@type threshold: float
    '''
    pass



def setRaytracingMode(mode):
    '''
    Sets raytracing mode.

@param mode: 0 = CPU, 1 = GPU.

@type on: int
    '''
    pass



def setRaytracingMotionBlurEnable():
    '''
    Deprecated, Motion Blur is always on on a global level.
    '''
    pass



def setRaytracingNURBSEpsilon(epsilon):
    '''
    Sets the self-intersection tolerance for NURBS raytracing.

@param epsilon: The tolerance value.

@type epsilon: float
    '''
    pass



def setRaytracingNURBSMaxDepthCurve(depth):
    '''
    Sets the maximum subdivision depth of the trimming curves.

@param depth: The maximum depth.

@type depth: int
    '''
    pass



def setRaytracingNURBSMaxDepthSurface(depth):
    '''
    Sets the maximum subdivision depth of the acceleration data structure for the NURBS raytracing.

@param depth: The maximum depth.

@type depth: int
    '''
    pass



def setRaytracingNURBSMinDepthCurve(depth):
    '''
    Sets the minimum subdivision depth of the trimming curves.

@param depth: The minimum depth.

@type depth: int
    '''
    pass



def setRaytracingNURBSMinDepthSurface(depth):
    '''
    Sets the minimum subdivision depth of the acceleration data structure for the NURBS raytracing.

@param depth: The minimum depth.

@type depth: int
    '''
    pass



def setRaytracingNURBSNewtonEpsilon(epsilon):
    '''
    Sets the newton iteration tolerance for NURBS raytracing.

@param epsilon: The tolerance value.

@type epsilon: float
    '''
    pass



def setRaytracingNURBSThresholdCurve(threshold):
    '''
    Sets the curvature threshold for trimming curves.

@param threshold: The threshold.

@type threshold: float
    '''
    pass



def setRaytracingNURBSThresholdSurface(threshold):
    '''
    Sets the surface curvature threshold for NURBS raytracing.

@param threshold: The threshold.

@type threshold: float
    '''
    pass



def setRaytracingNURBSUsePreclassification(enable):
    '''
    Deprecated: Enables trimming curve pre-classification.

@param enable: Pre-classification: On/Off.

@type enable: bool
    '''
    pass



def setRaytracingPhotonLookupCount(count):
    '''
    Sets the minimum number of photons that need to be collected during a photon lookup. It less photons are collected, the lookup radius is increased.

@param count: The number of photons to be collected. Default is 16.

@type count: int
    '''
    pass



def setRaytracingPhotonMapFreezeMode(mode):
    '''
    Sets the freeze mode for updating photon map.

@param mode: The freeze mode: 0 = update photon map as normal, 1 = freeze the updating of photon map.

@type mode: int
    '''
    pass



def setRaytracingPhotonMapRefreshMode(mode):
    '''
    Sets the final gathering refresh mode.

@param mode: The refresh mode: 0 = refresh photon map on each image sample, 1 = refresh the photon map only when necessary.

@type mode: int
    '''
    pass



def setRaytracingPhotonMode(mode):
    '''
    Sets the photon mapping mode to use.

@param mode: The photon mapping mode: 0 = off, 1 = indirect only, 2 = indirect + caustics.

@type mode: int
    '''
    pass



def setRaytracingPhotonRadius(radius):
    '''
    Sets the photon lookup radius.

@param radius: The indirect photon lookup radius.

@type radius: float
    '''
    pass



def setRaytracingRenderRegion(xBegin, yBegin, xEnd, yEnd):
    '''
    Sets the active render region in pixel coordinates.

@param xBegin: The relative x start coordinate in [0.0,1.0].

@type xBegin: float

@param yBegin: The relative y start coordinate in [0.0,1.0].

@type yBegin: float

@param xEnd: The relative x end coordinate in [0.0,1.0].

@type xEnd: float

@param yEnd: The relative y end coordinate in [0.0,1.0].

@type yEnd: float
    '''
    pass



def setRaytracingRenderer():
    '''
    Internal function.
    '''
    pass



def setRaytracingSampleOffset(samplingOffset):
    '''
    Sets the offset for the pixel sampling id (advanced feature). This allows to use some sort of manual image refinement be offsetting the starting sample of the computation and merging the final image with a previous render.

@param samplingOffset: The offset.

@type samplingOffset: int
    '''
    pass



def setRaytracingSamplesThreshold(samples):
    '''
    Sets samples threshold. With this sample number the rendering gets updated.

@param samples: sample number.

@type samples: int
    '''
    pass



def setRaytracingStillFrameFinalGatherQuality(quality):
    '''
    Sets the still frame gathering quality to use.

@param quality: The final gather quality: 0 = off, 1 = 1, 2 = 4, 3 = 8, 4 = 16 Final Gather rays per sample.

@type quality: int
    '''
    pass



def setRaytracingStillFrameIBLQuality(quality):
    '''
    Sets the still frame ibl sampling quality level for raytracing.

@param quality: The quality level in [0,4].

@type quality: int
    '''
    pass



def setRaytracingStillFramePhotonCount(count):
    '''
    Sets the number of photons emitted during still frame antialiasing.

@param count: The number of photons.

@type count: int
    '''
    pass



def setRaytracingStillFrameQuality(quality):
    '''
    Sets the still frame reflection/refraction quality level for raytracing.

@param quality: The quality level in [0,4].

@type quality: int
    '''
    pass



def setRaytracingStillFrameQualityMode(mode):
    '''
    Sets the still frame quality mode for raytracing.
Valid values are: 
Precompute = -1
Precomputed + Reflections = 0
Precomputed + Shadows = 1
Precomputed + IBL = 2
Full Global Illumination = 3

@param mode: The quality mode in [-1,3].

@type mode: int
    '''
    pass



def setRaytracingStillFrameSupersampling(factor):
    '''
    Enables supersampling for stillframe rendering. This is usefull for reducing jagged edges but requires factor * factor times more memory for the framebuffer so it should only be used when really needed. 

@param factor: set still frame supersampling factor. 1 is off.

@type factor: int
    '''
    pass



def setRaytracingStillFrameTextureSharpness(sharpness):
    '''
    Sets the sharpness factor for texture sampling (advanced feature). WARNING: Changing this settings may lead to rendering artifacts!

@param sharpness: The sharpness factor.

@type sharpness: float
    '''
    pass



def setRaytracingStillFrameTraceDepth(depth):
    '''
    Sets the still frame trace depth for raytracing.

@param depth: The maximum trace depth.

@type depth: int
    '''
    pass



def setRaytracingUseFinalGatherForGlossy(enable):
    '''
    Turns use of final gather map for glossy reflections on or off

@param enable: final gather glossy lookup: On/Off.

@type enable: bool
    '''
    pass



def setRaytracingUseHighQualityTextureFiltering(enable):
    '''
    Enables high quality anisotropic texture filtering. This can slow down rendering performance quite a bit..

@param enable: high quality anisotropic texture filtering: On/Off.

@type enable: bool
    '''
    pass



def setRenderAlpha(state):
    '''
    Enables export of images with an alpha channel.

@param state: On/Off.

@type state: bool
    '''
    pass



def setRenderAnimation(enable):
    '''
    Enables rendering of an animation sequence.

@param enable: on/off.

@type enable: bool
    '''
    pass



def setRenderAnimationClip(clipname):
    '''
    Sets the name of the clip to render.

@param clipname: name of the clip.

@type clipname: string
    '''
    pass



def setRenderAnimationFormat(format):
    '''
    Sets the output format. 0=Images, 1 = Movie.

@param format: on/off.

@type format: int
    '''
    pass



def setRenderAnimationType(type):
    '''
    Sets the type of the animation to render. 0=Clip, 1=Timeline.

@param type: 0=Clip, 1=Timeline.

@type type: int
    '''
    pass



def setRenderBackgroundColor(r, g, b):
    '''
    Sets the background color.

@param r: The red background color.

@type r: float

@param g: The green background color.

@type g: float

@param b: The blue background color.

@type b: float
    '''
    pass



def setRenderCurrentView():
    '''
    Sets the view to use the current position.
    '''
    pass



def setRenderFilename(filename):
    '''
    Sets the filename to render to.

@param filename: filename .

@type filename: string
    '''
    pass



def setRenderFps(fps):
    '''
    Sets the frames per second for rendering and animation.

@param fps: frames per second.

@type fps: int
    '''
    pass



def setRenderFrameStep(frame):
    '''
    Sets the frame step for rendering and animation.

@param frame: step.

@type frame: int
    '''
    pass



def setRenderICCProfile(state):
    '''
    Sets the ICC Profile to use when writing to a file. 0 = current scene settings, 1 = sRGB, 2 = AdobeRGB, 3 = Specified Monitor ICC Profile, 4 = Specified Image ICC Profile.

@param state: icc profile id.

@type state: int
    '''
    pass



def setRenderMetaDataFlags(flags):
    '''
    Sets the type of meta data to be embedded in a file. Image formats supporting meta data are png, jpg, tif and exr.
The types are set by a bitmask with the following bit values:
CAMERA_DATA = 1
SCENEGRAPH_VISIBILITY_STATE = 1 << 1
SCENEGRAPH_SWITCH_CHOICE_STATE = 1 << 2
FILEOUTPUT_IMAGE_SETTINGS = 1 << 3
FILEOUTPUT_ANIMATION_SETTINGS = 1 << 4
FILEOUTPUT_RENDERPASSES_SETTINGS = 1 << 5
RAYTRACING_SETTINGS = 1 << 6
SWITCH_MATERIAL_CHOICE_STATE = 1 << 7
FILEOUTPUT_IMAGE_SETTINGS | FILEOUTPUT_ANIMATION_SETTINGS | FILEOUTPUT_RENDERPASSES_SETTINGS | RAYTRACING_SETTINGS

@param flags: Bitmask for the metadata to embedded.

@type flags: int
    '''
    pass



def setRenderPNGQuality(quality):
    '''
    Sets the compression level for PNG images. Valid values range from 0 to 9. Default is 1.

@param quality: pixel coordinate.

@type quality: int
    '''
    pass



def setRenderPasses(state):
    '''
    Sets the active renderpasses by passing a list of pass names. This modifies the current scene settings and is used when calling startRenderToFile command.
Valid passes are: 
beauty, diffuse_ibl, diffuse_light, glossy_ibl, glossy_light, specular_reflection,
translucency, incandescence, diffuse_indirect,  glossy_indirect,  diffuse_color, glossy_color,
specular_color, translucency_color, transparency_color, background_color,  diffuse_ibl_illumination,
glossy_ibl_illumination, translucency_ibl_illumination, diffuse_light_illumination, glossy_light_illumination,
translucency_light_illumination, diffuse_indirect_illumination, glossy_indirect_illumination,
specular_indirect_illumination, translucency_indirect_illumination, fog, lens_flare, 
occlusion, normal, depth, materialID, mask, position, view, cryptoObjectMatte, cryptoMaterialMatte, 
frontplates, backplates.

@param state: passes.

@type state: vector<string>
    '''
    pass



def setRenderPixelResolution(pixelWidth, pixelHeight, pixelsPerInch):
    '''
    Sets the print resolution.

@param pixelWidth: The width of the image in pixel.

@type pixelWidth: float

@param pixelHeight: The height of the image in pixel.

@type pixelHeight: float

@param pixelsPerInch: The number of pixels per inch.

@type pixelsPerInch: float
    '''
    pass



def setRenderPremultiply(state):
    '''
    Enables premultiplied alpha.

@param state: On/Off.

@type state: bool
    '''
    pass



def setRenderPrintResolution(printWidth, printHeight, pixelsPerInch):
    '''
    Sets the print resolution.

@param printWidth: The width of the image in centimeter.

@type printWidth: float

@param printHeight: The height of the image in centimeter.

@type printHeight: float

@param pixelsPerInch: The number of pixels per inch.

@type pixelsPerInch: float
    '''
    pass



def setRenderRegionEndX(state):
    '''
    Sets right x-coordinate of the render region.

@param state: pixel coordinate.

@type state: int
    '''
    pass



def setRenderRegionEndY(state):
    '''
    Sets top y-coordinate of the render region.

@param state: pixel coordinate.

@type state: int
    '''
    pass



def setRenderRegionStartX(state):
    '''
    Sets left x-coordinate of the render region.

@param state: pixel coordinate.

@type state: int
    '''
    pass



def setRenderRegionStartY(state):
    '''
    Sets the upper y-coordinate of the render region.

@param state: pixel coordinate.

@type state: int
    '''
    pass



def setRenderStartFrame(frame):
    '''
    Sets the start frame for rendering and animation.

@param frame: startframe.

@type frame: int
    '''
    pass



def setRenderStopFrame(frame):
    '''
    Sets the stop frame for rendering and animation.

@param frame: stopframe.

@type frame: int
    '''
    pass



def setRenderSupersampling(state):
    '''
    Enables antialiasing.

@param state: 0=Off, 1=On.

@type state: int
    '''
    pass



def setRenderTimeInSeconds(timeInSeconds):
    '''
    Sets the maximum render time in seconds.

@param timeInSeconds: time in seconds.

@type timeInSeconds: int
    '''
    pass



def setRenderTonemapHDR(state):
    '''
    Enables tonemapping when rendering to a HDR image format.

@param state: On/Off.

@type state: bool
    '''
    pass



def setRenderUseClipRange(enable):
    '''
    Uses the range of the chosen clip instead the start and stop frame range.

@param enable: on/off.

@type enable: bool
    '''
    pass



def setRenderVariantSets(groupName):
    '''
    Sets the variant sets that should be used for the group.
@param groupName: Name of variant set group.

@type groupName: string@param variantSetNames: List of variant set names.

@type variantSetNames: vector<string>
    '''
    pass



def setRenderView(viewName):
    '''
    Sets the view with the given name.
@param viewName: Name of the view to be used.

@type viewName: string
    '''
    pass



def setSpectralRaytracing(on):
    '''
    Sets spectral raytracing on or off.

@param on: On/Off switch.

@type on: bool
    '''
    pass



def setUseInfiniteRenderInViewport(state):
    '''
    Enables infinite rendering in the renderview.

@param state: On/Off.

@type state: bool
    '''
    pass



def setUseRaySplitting(on):
    '''
    Enables raysplitting for glass and carpaint materials.

@param on: true of false.

@type on: bool
    '''
    pass



def setUseRenderPasses(state):
    '''
    Enables export of render passes when rendering to a file.

@param state: On/Off.

@type state: bool
    '''
    pass



def setUseRenderRegion(state):
    '''
    Enables region rendering.

@param state: On/Off.

@type state: bool
    '''
    pass



def setUseRenderTimeLimit(state):
    '''
    Enables rendering up to the maximum render time.

@param state: On/Off.

@type state: bool
    '''
    pass



def setUseRenderVariantSets(enable):
    '''
    Enables rendering of variant sets.

@param enable: on/off.

@type enable: bool
    '''
    pass



def setUseRenderViewFromVariantSets(enable):
    '''
    Enables using of views in variant sets, i.e. applying a variant set may also change the view

@param enable: on/off.

@type enable: bool
    '''
    pass



def setUseTwoSampleImportanceSampling(on):
    '''
    Enables use of two samples for multiple importance sampling.

@param on: true of false.

@type on: bool
    '''
    pass



def startRenderToFile(alwaysOverride):
    '''
    Starts rendering to file using the current render settings. (This command is only available in VRED Professional.)

@param alwaysOverride: If true, files will be overwritten without warning.

@type alwaysOverride: bool
    '''
    pass


