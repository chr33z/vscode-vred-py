
# Autogenerated method stubs for 'vrOSGWidget.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def adaptZeroParallaxDistance(index):
    '''
    Automatically adjusts the zero parallax distance.

@param index: The index of the render widget.

@type index: integer
    '''
    pass



def cancelAntialiasing():
    '''
    Cancels the still anti-aliasing.
    '''
    pass



def clearRecordedStatistics(index):
    '''
    Deletes all recorded statistics of the given render window.

@param index: The index of the render window (-1 for the focused window).

@type index: integer
    '''
    pass



def compressTextures():
    '''
    Compresses all the textures.
    '''
    pass



def createBackplate():
    '''
    Deprecated.
    '''
    pass



def createRenderWindow():
    '''
    Creates a new render window.
    '''
    pass



def createScreenshot(filename):
    '''
    Creates a screenshot of the render window and writes out a image file.

Note: It's best to call updateRender(True) before this to make sure the created
screenshot is really up to date.

@param filename: path of the image file.

@type filename: string
    '''
    pass



def deleteBackplate():
    '''
    Deprecated.
    '''
    pass



def destroyRenderWindow(index):
    '''
    Destroys a render window.

@param index: The index of the render window.

@type index: integer
    '''
    pass



def enableAntialiasing(switch):
    '''
    Sets anti-aliasing.

@param switch: Anti-aliasing: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def enableDrawAction(index, state):
    '''
    Enables draw action.

@param index: The index of render window.

@type index: integer

@param state: Draw action: On/Off.

@type state: boolean
    '''
    pass



def enableHeadlight(switch):
    '''
    Sets the headlight state.

@param switch: Headlight: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def enablePowerwall(window, state):
    '''
    Enables local powerwall mode.

@param window: The window index.

@type window: integer

@param state: Powerwall mode: Enable/Disable.

@type state: boolean

@return: True on success, false otherwise.

@rtype: boolean
    '''
    pass



def enableRaytracing(state):
    '''
    Enables or disables raytracing.

@param state: Enable Raytracing: On/Off.

@type state: bool
    '''
    pass



def enableRaytracingDownscale(switch):
    '''
    Sets raytracing downscale.

@param switch: Raytracing downscale: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def enableRender(switch):
    '''
    Sets rendering state.

@param switch: Rendering: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: boolean
    '''
    pass



def enableRenderRegion(s):
    '''
    Sets region rendering.

@param s: Enabling render region, true, false.

@type s: integer
    '''
    pass



def enableStereo(window, state, passive, mode, es, zp):
    '''
    Enables stereo.

Split stereo modi (passive = True):

VR_STEREO_SPLIT_TOP_BOTTOM = 0,

VR_STEREO_SPLIT_LEFT_RIGHT = 1,

VR_STEREO_LEFT_EYE = 2,

VR_STEREO_RIGHT_EYE = 3,

VR_STEREO_SPLIT_LEFT_RIGHT_HALF = 4.

Stereo modi (passive = False):

VR_STEREO_DOUBLEBUFFER = 0,

VR_STEREO_REDCYAN = 1,

VR_STEREO_BLUEYELLOW = 2,

VR_STEREO_GREENMAGENTA = 3,

VR_STEREO_HORIZONTALINTERLACED = 4,

VR_STEREO_VERTICALINTERLACED = 5.

@param window: The window index.

@type window: integer

@param state: Stereo: On/Off.

@type state: boolean

@param passive: Passive stereo: On/Off.

@type passive: boolean

@param mode: The stereo mode.

@type mode: integer

@param es: The eye separation factor.

@type es: float

@param zp: The zero parallax distance.

@type zp: float

@return: True on success, false otherwise.

@rtype: boolean
    '''
    pass



def getAntialiasingEnabled():
    '''
    Checks, if anti-aliasing is enabled.

@return: True, if anti-aliasing is enabled.

@rtype: bool
    '''
    pass



def getAspect():
    '''
    Gets the aspect ratio.

@return: The aspect ratio.

@rtype: float
    '''
    pass



def getAt(index):
    '''
    Returns "at" point.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@return: The "at" point.

@rtype: Pnt3f
    '''
    pass



def getAuxiliaryNodesVisibleDuringAntialiasing():
    '''
    Returns the visibility state of the auxiliary nodes during antialiasing.

@return: The visibility of auxiliary nodes during antialiasing.

@rtype: bool
    '''
    pass



def getAverageFPS():
    '''
    Returns the average number of frames per second.

@return: The average frames per second.

@rtype: float (64bit)
    '''
    pass



def getBackplateMaterial():
    '''
    Deprecated.
    '''
    pass



def getCamNode(index):
    '''
    Gets the camera node.

@param index: The index of render window.

@type index: integer

@return: The camera node.

@rtype: vrNodePtr
    '''
    pass



def getCameraPivotAlwaysVisible():
    '''
    Returns the visibility state of the the camera pivot while not navigating.

@return: The camera pivot visibility while not navigating.

@rtype: bool
    '''
    pass



def getCameraPivotVisible():
    '''
    Returns the visibility state of the the camera pivot .

@return: The camera pivot visibility during navigation.

@rtype: bool
    '''
    pass



def getDollySpeed():
    '''
    Get the scalefactor of the navigator dolly speed.
    '''
    pass



def getFPS():
    '''
    Returns the current number of frames per second.

@return: The frames per second.

@rtype: float (64bit)
    '''
    pass



def getFar():
    '''
    Gets the far clipping plane.

@return: distance to the far plane

@rtype: float
    '''
    pass



def getFov():
    '''
    Gets the field of view.

@return: The field of view value.

@rtype: float
    '''
    pass



def getFrom(index):
    '''
    Returns "from" point.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@return: The "from" point.

@rtype: Pnt3f
    '''
    pass



def getGenlockingFrameCount():
    '''
    Returns current genlocking frame count.

@return: The frame count.

@rtype: unsigned int
    '''
    pass



def getInteractionMode():
    '''
    Get the interaction mode.
    '''
    pass



def getInternalBackplateMaterial():
    '''
    Deprecated.
    '''
    pass



def getLastPickingMaterial():
    '''
    Returns the last picked material.

@return: last picked material.

@rtype: vrMaterialPtr
    '''
    pass



def getLastPickingNode():
    '''
    Returns the last picked node.

@return: last picked node.

@rtype: vrNodePtr
    '''
    pass



def getLastPickingPosition():
    '''
    Returns the last picked position.

@return: last picked position.

@rtype: Pnt3f
    '''
    pass



def getMotionFactor():
    '''
    Returns the current motion factor.

@return: Returns the current motion factor.

@rtype: float
    '''
    pass



def getMousePosition(index):
    '''
    Returns the current pixel coordinates of the mouse over the given render window.

@param index: The index of the render window (-1 for the main render window).

@type index: integer

@return: pixel coordinates, range: 0..width, 0..height of the render window. [-1,-1] if the mouse is not over the render window.

@rtype: list of 2 integers
    '''
    pass



def getNavigationPivot(index):
    '''
    Returns navigation pivot.

See also L{setPivot}.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@return: The navigation pivot.

@rtype: Pnt3f
    '''
    pass



def getNavigationSpeedMode():
    '''
    Get the navigation speed mode.
    '''
    pass



def getNear():
    '''
    Gets the near clipping plane.

@return: The distance to the near plane.

@rtype: float
    '''
    pass



def getNodeMaterial(node):
    '''
    Returns the temporary override material a node uses in OpenGL.

@param node: The node.

@type node: NodePtr

@return: The material.

@rtype: MaterialPtr
    '''
    pass



def getOculusRiftTrackingOrigin():
    '''
    Returns the Oculus Rift tracking reference origin. Default is (0, 0, 0). Can be changed with setOculusRiftTrackingOrigin.

@return: the Oculus Rift tracking reference origin.

@rtype: Pnt3f
    '''
    pass



def getOculusRiftTrackingOriginType():
    '''
    Windows only: Retrieves the tracking origin type for the oculus rift. 

@return: 0 = Seated, 1 = Standing.

@rtype: int
    '''
    pass



def getPanningSpeed():
    '''
    Get the scalefactor of the navigator panning speed.
    '''
    pass



def getRaytracingEnabled():
    '''
    Checks, if raytracing is enabled.

@return: True, if raytracing is enabled.

@rtype: bool
    '''
    pass



def getRenderRoot(index):
    '''
    Gets the render root.

@param index: The index of render window.

@type index: integer

@return: The render root.

@rtype: vrNodePtr
    '''
    pass



def getRenderRoots(index):
    '''
    Gets the render roots.

@param index: The index of render window.

@type index: integer

@return: The list of roots.

@rtype: list of vrNodePtrs
    '''
    pass



def getRenderWindowCount():
    '''
    Returns number of render windows.

@return: The number of render windows.

@rtype: unsigned int
    '''
    pass



def getRenderWindowHeight(i):
    '''
    Returns the render window height.

@param i: The render window index.

@type i: int

@return: The render window height.

@rtype: int
    '''
    pass



def getRenderWindowWidth(i):
    '''
    Returns the render window width.

@param i: The render window index.

@type i: int

@return: The render window width.

@rtype: int
    '''
    pass



def getRoll(index):
    '''
    Get navigator roll.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@return: Roll in degrees.

@rtype: Real32
    '''
    pass



def getSAAWindow():
    '''
    Returns the still anti-aliasing window.

@return: The still anti-aliasing window id.

@rtype: int
    '''
    pass



def getShadowPlane(rootNode, shadowPlaneNameRegexp):
    '''
    Get the Shadow Plane given a regexp. Will check so that the node is active and has a shadow material:

@param rootNode: The root.

@type rootNode: NodePtr

@param shadowPlaneNameRegexp: Name of the node to measure against.

@type shadowPlaneNameRegexp: const char*
    '''
    pass



def getShowASides():
    '''
    Returns the state of the A Side rendering flag.

@return: Whether rendering of A Sides is enabled or not.

@rtype: bool
    '''
    pass



def getShowBSides():
    '''
    Returns the state of the B Side rendering flag.

@return: Whether rendering of B Sides is enabled or not.

@rtype: bool
    '''
    pass



def getSuperSampling():
    '''
    Checks, if super sampling is enabled.

@return: True, if super sampling is enabled.

@rtype: bool
    '''
    pass



def getSuperSamplingQuality():
    '''
    Returns the current realtime antialiasing quality.

@return: Super sampling quality.

@rtype: unsigned int
    '''
    pass



def getUp(index):
    '''
    Returns "up" vector.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@return: The "up" vector.

@rtype: Vec3f
    '''
    pass



def getUseBindless():
    '''
    Returns whether bindless graphics should be used or not.

@return: bindless graphics enabled or disabled.

@rtype: bool
    '''
    pass



def getUseCommandList():
    '''
    Returns whether command list extension should be used or not.

@return: command list extension enabled or disabled.

@rtype: bool
    '''
    pass



def getUseMulticastSLI():
    '''
    Returns whether multicast SLI should be used or not.

@return: multicast SLI enabled or disabled.

@rtype: bool
    '''
    pass



def getUsePivotBasedPanning():
    '''
    Get the panning mode of the navigator.
    '''
    pass



def getUseSinglePassStereo():
    '''
    Returns whether single pass stereo is activated for stereo rendering or not

@return: single pass stereo enabled or disabled.

@rtype: bool
    '''
    pass



def getUserMatrix(id):
    '''
    Gets the user projection transform matrix (column-wise).

@param id: The render window index.

@type id: int

@return: The user projection transform matrix.

@rtype: vector of floats
    '''
    pass



def getUserNode():
    '''
    Deprecated. Please use get/setUserMatrix instead.
    '''
    pass



def getViewAt(index):
    '''
    Returns "ViewAt" point.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@return: The "ViewAt" point.

@rtype: Pnt3f
    '''
    pass



def getViewRay(index, xCoord, yCoord):
    '''
    Returns a ray that starts at the active camera and goes through the pixel at the given coordinates (x, y) in the render window.

@param index: The index of the render window (-1 for the main render window).

@type index: integer

@param xCoord: x-coordinate in pixels, (0,0) is in the upper left corner of the render window.

@type xCoord: int

@param yCoord: y-coordinate in pixels, (0,0) is in the upper left corner of the render window.

@type yCoord: int

@return: ray origin and direction in world coordinates.

@rtype: tuple of Pnt3f and Vec3f
    '''
    pass



def hideBanner():
    '''
    Hides a banner.
    '''
    pass



def moveRenderWindow(index, xPos, yPos):
    '''
    Moves a render window.

@param index: The index of the render window.

@type index: integer

@param xPos: The x position.

@type xPos: integer

@param yPos: The y position.

@type yPos: integer
    '''
    pass



def moveStatistic(x, y):
    '''
    Sets the position of the render statistic.

@param x: x position.

@type x: integer

@param y: y position.

@type y: integer
    '''
    pass



def refreshAllGLObjects():
    '''
    Refreshs all existing GL objects.
    '''
    pass



def reinitializeAllGLObjects():
    '''
    Reinitialize all OpenGL objects to speed up rendering.
    '''
    pass



def resetGenlockingFrameCount():
    '''
    Resets genlocking frame count.
    '''
    pass



def resetHMDPose():
    '''
    While using a HMD display mode, resets the tracking to the current pose of the headset.
    '''
    pass



def resetIsolateView(index):
    '''
    Resets the isolate view on the render window.

@param index: The index of render window.

@type index: integer
    '''
    pass



def resetNodeMaterial(node):
    '''
    Resets the temporary node material override.

@param node: The node.

@type node: NodePtr
    '''
    pass



def resetNodeMaterials():
    '''
    Resets all temporary node material overrides.
    '''
    pass



def resetOculusRiftOrientation():
    '''
    Resets the tracking origin according to the current headset location and sets the yaw orientation to the current headset yaw value.

In 'Standing' mode, the tracking origin is set to the position on the floor below the HMD.
    '''
    pass



def resetRenderRoots():
    '''
    Resets render root.
    '''
    pass



def resizeRenderWindow(index, width, height):
    '''
    Resizes a render window.

@param index: The index of the render window.

@type index: integer

@param width: The width.

@type width: integer

@param height: The height.

@type height: integer
    '''
    pass



def setAORendering(state):
    '''
    Enables or disables ambient occlusion rendering.

@param state: Ambient occlusion rendering: On/Off.

@type state: int
    '''
    pass



def setAOShadowsVisible(state):
    '''
    Enables or disables ambient occlusion shadows for OpenGL.

@param state: Ambient occlusion shadows: On/Off.

@type state: int
    '''
    pass



def setActiveRenderPass(passID, index):
    '''
    Sets the renderpass for the specified window.

@param passID: The renderpass id: BEAUTY_PASS, DIFFUSE_IBL_LAYER, DIFFUSE_LIGHT_COLOR_LAYER, GLOSSY_IBL_LAYER, GLOSSY_LIGHT_COLOR_LAYER, SPECULAR_REFLECTION_LAYER, TRANSLUCENCY_LAYER, INCANDESCENCE_LAYER, DIFFUSE_INDIRECT_LIGHT_LAYER, GLOSSY_INDIRECT_LIGHT_LAYER, DIFFUSE_MATERIAL_COLOR_LAYER, GLOSSY_MATERIAL_COLOR_LAYER, SPECULAR_MATERIAL_COLOR_LAYER, TRANSLUCENCY_MATERIAL_COLOR_LAYER, TRANSPARENCY_MATERIAL_COLOR_LAYER, BACKGROUND_MATERIAL_COLOR_LAYER, DIFFUSE_IBL_ILLUMINATION_LAYER, GLOSSY_IBL_ILLUMINATION_LAYER, TRANSLUCENCY_IBL_ILLUMINATION_LAYER, DIFFUSE_LIGHT_ILLUMINATION_LAYER, GLOSSY_LIGHT_ILLUMINATION_LAYER, TRANSLUCENCY_LIGHT_ILLUMINATION_LAYER, DIFFUSE_INDIRECT_ILLUMINATION_LAYER, GLOSSY_INDIRECT_ILLUMINATION_LAYER, SPECULAR_INDIRECT_ILLUMINATION_LAYER, TRANSLUCENCY_INDIRECT_ILLUMINATION_LAYER, FOG_LAYER, LENS_FLARE_LAYER, FRONTPLATE_LAYER, BACKPLATE_LAYER, ENV_OCCLUSION_LAYER, NORMAL_LAYER, DEPTH_LAYER, MATERIAL_ID_LAYER, MASK_LAYER, POSITION_LAYER, VIEW_VECTOR_LAYER

@type index: integer

@param index: The index of render window.

@type index: integer
    '''
    pass



def setAllGradientBackgrounds(colors, ints):
    '''
    Sets gradient background for all render windows.

@param colors: The color list.

@type colors: list of Color3fs

@param ints: The interval list.

@type ints: list of floats
    '''
    pass



def setAllNavigationsEnabled(state):
    '''
    Activates Navigation for all MGLW.

@param state: Navigation: On/Off.

@type state: bool
    '''
    pass



def setAnalyticRendering(state):
    '''
    Enables or disables analytic rendering.

@param state: Analytic rendering: On/Off.

@type state: int
    '''
    pass



def setAspect(aspect):
    '''
    Sets the aspect ratio.

@param aspect: The aspect ratio.

@type aspect: float
    '''
    pass



def setAt(index, point, x, y, z):
    '''
    Set camera "at" point. Actually there are two functions:

setAt(index,x,y,z) sets the "at" point with the widget index and three float parameters.

setAt(index,point) sets the "at" point with the widget index and a point parameter.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param point: The "at" point.

@type point: Pnt3f

@param x: The x coordinate of the "at" point.

@type x: float

@param y: The y coordinate of the "at" point.

@type y: float

@param z: The z coordinate of the "at" point.

@type z: float
    '''
    pass



def setAutoFrustum(switch):
    '''
    Sets the auto frustum.

@param switch: Auto frustum: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setAuxiliaryNodesVisibleDuringAntialiasing(state):
    '''
    Enable/disable display of auxiliary nodes during antialiasing.

@param state: Show auxiliary nodes: On/Off.

@type state: bool
    '''
    pass



def setBackfaceCulling(switch):
    '''
    Renders the whole scene with backface culling.

@param switch: Backface culling: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setBackplate():
    '''
    Deprecated.

Deprecated.
    '''
    pass



def setCameraBeacon():
    '''
    Deprecated. Move the camera node instead.
    '''
    pass



def setCameraConstraint(camera_constraint, min_dist):
    '''
    Sets camera constraint and optionally the minimum distance.

@param camera_constraint: The constraint node.

@type camera_constraint: NodePtr

@param min_dist: The minimum distance (Optional).

@type min_dist: float (32bit)
    '''
    pass



def setCameraPanning(x, y):
    '''
    Panning of the camera.

@param x: The horizontal panning.

@type x: float

@param y: The vertical panning.

@type y: float
    '''
    pass



def setCameraPivotAlwaysVisible(state):
    '''
    Enable/disable display of the camera pivot while not navigating.

@param state: Show pivot: On/Off.

@type state: bool
    '''
    pass



def setCameraPivotVisible(state):
    '''
    Enable/disable display of the camera pivot during navigation.

@param state: Show pivot: On/Off.

@type state: bool
    '''
    pass



def setCameraRotation(x, y):
    '''
    Rotates the camera.

@param x: The rotation angle around the up vector.

@type x: float

@param y: The rotation angle around the right vector.

@type y: float
    '''
    pass



def setCameraScale(x, y, z):
    '''
    Scales the camera, e.g for vertical flipping (1, -1, 1).

@param x: The horizontal scale.

@type x: float

@param y: The vertical scale.

@type y: float

@param z: The depth scale.

@type z: float
    '''
    pass



def setCameraZUp(state):
    '''
    Sets camera z up.

@param state: Camera z up: Enable/Disable.

@type state: boolean
    '''
    pass



def setCameraZoom(distance):
    '''
    Zooms the camera.

@param distance: The distance to move from at point.

@type distance: float
    '''
    pass



def setClusterCameraConnection(state):
    '''
    Sets the connection of the cameras in a cluster.

@param state: Camera connection: Enable/Disable.

@type state: bool
    '''
    pass



def setCorrectDoubleSidedLighting():
    '''
    Deprecated.
    '''
    pass



def setDefaultCameraBeacons():
    '''
    Deprecated. Move the camera node instead.
    '''
    pass



def setDiscontinuityRendering(state):
    '''
    Enables or disables surface analysis rendering.

@param state: Surface analysis rendering: On/Off.

@type state: int
    '''
    pass



def setDisplayMode(mode):
    '''
    Sets the display mode.

@param mode: Display mode: VR_DISPLAY_STANDARD, VR_DISPLAY_OCULUS_RIFT, VR_DISPLAY_SONY_10BIT, VR_DISPLAY_SIM2_HDR, VR_DISPLAY_OPEN_ VR,VR_DISPLAY_VRHERO_XTAL, VR_DISPLAY_VARJO, VR_DISPLAY_HDR10.

@type mode: unsigned int
    '''
    pass



def setDistance(index, distance):
    '''
    Set camera distance.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param distance: The distance.

@type distance: float
    '''
    pass



def setDollySpeed(scalefactor):
    '''
    Set the scalefactor for the navigator dolly speed.

@param scalefactor: dolly speed scaling factor

@type scalefactor: float
    '''
    pass



def setDoubleSidedLighting():
    '''
    Deprecated.
    '''
    pass



def setEvaluateClipping(state):
    '''
    Enables or disables clipping plane evaluation in OpenGL. Default is on.

@param state: OpenGL Clipping: On/Off.

@type state: bool
    '''
    pass



def setEyeSeparation(es):
    '''
    Sets eye separation factor.

@param es: The eye separation factor.

@type es: float
    '''
    pass



def setFaceNormalRendering(state):
    '''
    Enables or disables face normal rendering.

@param state: Face normal rendering: On/Off.

@type state: int
    '''
    pass



def setFar(far):
    '''
    Sets the far clipping plane.

@param far: The distance to the far plane.

@type far: float
    '''
    pass



def setFixedRenderWindowSize(width, height):
    '''
    Set a fixed size for the main render window.

@param width: The width.

@type width: integer

@param height: The height.

@type height: integer
    '''
    pass



def setFlyMode(switch):
    '''
    Switches between virtual trackball and fly navigation.

@param switch: Fly mode: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setForceTransparentObjectSelection(mode):
    '''
    Enables/diables the selection of objects with a 100% transparent material in the render window.

@param mode: state: On/Off.

@type state: bool
    '''
    pass



def setFov(fov):
    '''
    Sets the field of view.

@param fov: The field of view value.

@type fov: float
    '''
    pass



def setFreezeOcclusionCulling(freezeCulling):
    '''
    Freezes the current state of the occlusion culling for debugging purposes.

@param freezeCulling: On/Off.

@type freezeCulling: bool
    '''
    pass



def setFrom(index, point, x, y, z):
    '''
    Set camera "from" point. Actually there are two functions:

setFrom(index,x,y,z) sets the "from" point with the widget index and three float parameters.

setFrom(index,point) sets the "from" point with the widget index and a point parameter.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param point: The "from" point.

@type point: Pnt3f

@param x: The x coordinate of the "from" point.

@type x: float

@param y: The y coordinate of the "from" point.

@type y: float

@param z: The z coordinate of the "from" point.

@type z: float
    '''
    pass



def setFromAtUp(index, from, at, up, fx, fy, fz, ax, ay, az, ux, uy, uz):
    '''
    Set camera "from", "at" and "up". Actually there are two functions:

setFromAtUp(index,fx,fy,fz,ax,ay,az,ux,uy,uz) sets the camera parameters with the widget index and nine float parameters.

setFromAtUp(index,from,at,up) sets the camera parameters with the widget index and two point and one vector parameter.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param from: The "from" point.

@type from: Pnt3f

@param at: The "at" point.

@type at: Pnt3f

@param up: The "up" vector.

@type up: Vec3f

@param fx: The x coordinate of the "from" point.

@type fx: float

@param fy: The y coordinate of the "from" point.

@type fy: float

@param fz: The z coordinate of the "from" point.

@type fz: float

@param ax: The x coordinate of the "at" point.

@type ax: float

@param ay: The y coordinate of the "at" point.

@type ay: float

@param az: The z coordinate of the "at" point.

@type az: float

@param ux: The x coordinate of the "up" vector.

@type ux: float

@param uy: The y coordinate of the "up" vector.

@type uy: float

@param uz: The z coordinate of the "up" vector.

@type uz: float
    '''
    pass



def setFrustum(index, left, right, bottom, top):
    '''
    Set camera frustum

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param left: The left value.

@type left: float

@param right: The right value.

@type right: float

@param bottom: The bottom value.

@type bottom: float

@param top: The top value.

@type top: float
    '''
    pass



def setFrustumCulling(switch):
    '''
    Sets the frustum culling.

@param switch: Frustum culling: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setGenlocking(state):
    '''
    Enables or disables genlocking.

@param state: Genlocking: On/Off.

@type state: bool
    '''
    pass



def setGradientBackground(index, colors, ints):
    '''
    Sets gradient background for a given render window.

@param index: The index of render window.

@type index: integer

@param colors: The color list.

@type colors: list of Color3fs

@param ints: The interval list.

@type ints: list of floats
    '''
    pass



def setGrainSize():
    '''
    Deprecated.
    '''
    pass



def setHighQualityAntialiasing(state):
    '''
    Enables or disables high quality anti-aliasing.

@param state: High quality anti-aliasing: On/Off.

@type state: bool
    '''
    pass



def setIndirectRendering(state):
    '''
    Enables or disables indirect illumination rendering.

@param state: Indirect illumination rendering: On/Off.

@type state: int
    '''
    pass



def setInteractionMode(mode):
    '''
    Set the interaction mode.

@param mode: 0 means VRED mode, 1 means Alias mode and 2 means Maya mode.

@type mode: integer
    '''
    pass



def setIsolateView(index, roots):
    '''
    Sets the isolate view on the provided objects.

@param index: The index of render window.

@type index: integer

@param roots: The list of nodes.

@type roots: list of vrNodePtrs
    '''
    pass



def setKeepRaytracingStructure(switch):
    '''
    Enables or disables keeping of the raytracing structure.

@param switch: Keep raytracing structure: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setLocalLights(switch):
    '''
    Sets local light source mode.

@param switch: Local light source mode: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setMono(index, state):
    '''
    Disable stereo.

@param index: The index of the gl window.

@type index: int

@param state: Mono: On/Off.

@type state: bool
    '''
    pass



def setMotionFactor(factor):
    '''
    Sets motion factor.

@param factor: The motion factor.

@type factor: float
    '''
    pass



def setNavMode(mode):
    '''
    Switches between different navigation modi.

@param mode: The navigation mode: 0 = NavigatorTrackball, 1 = NavigatorFly, 2 = NavigatorWalk, 3 = NavigatorAxis, 4 = NavigatorOrientation, 5 = Disable Navigation.

@type mode: integer
    '''
    pass



def setNavOrbitMode(enabled):
    '''
    Sets navigation orbit mode to on/off.

@param enabled: true or false.

@type enabled: bool
    '''
    pass



def setNavigationSpeedMode(mode):
    '''
    Set the navigator speed mode for two axis and trackball navigation modes. 

@param mode: 0 = unconstrained, 1 = limited, 2 = linear.

@type mode: int
    '''
    pass



def setNear(near):
    '''
    Sets the near clipping plane.

@param near: The distance to the near plane.

@type near: float
    '''
    pass



def setNodeMaterial(node, mat):
    '''
    Sets a temporary override for the material a node uses for rendering in OpenGL. Use resetNodeMaterial to reset the override to its original state.

@param node: The node.

@type node: NodePtr

@param mat: The material.

@type mat: MaterialPtr
    '''
    pass



def setOcclusionCulling(switch):
    '''
    Sets the occlusion culling state.

@param switch: Occlusion culling: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setOcclusionCullingMode(mode):
    '''
    Sets the occlusion culling mode.(experimental)

OcclusionCullingAccurate renders all objects visible in the current frame.

OcclusionCullingFast renders all objects visible in the previous frame.

@param mode: Occlusion culling mode: OcclusionCullingAccurate or 0, OcclusionCullingFast or 1

@type mode: integer
    '''
    pass



def setOculusRiftHmdCaps():
    '''
    Deprectated
    '''
    pass



def setOculusRiftTracking(s):
    '''
    Windows only: Enables/Disables tracking of the oculus rift. 

@param s: On/Off.

@type s: bool
    '''
    pass



def setOculusRiftTrackingOrigin(position):
    '''
    Sets the tracking reference origin for oculus rift tracking. Use it to correct any offsets in the scene. 
This function always assumes Y-Up, even if Z-up is set in the scene.

If the tracking origin should be at pos = (x_scene, y_scene, z_scene) in the VRED scene, call setOculusRiftTrackingOrigin(Pnt3f(-x_scene, -z_scene, y_scene)).

@param position: Position offset for the Oculus tracking.

@type position: Pnt3f
    '''
    pass



def setOculusRiftTrackingOriginType(originType):
    '''
    Windows only: Sets the tracking origin type for the oculus rift. 

Please note: This also resets the tracking origin according to the current headset location and yaw orientation. Wear the headset and stand or sit in a comfortable position.

@param originType: 0 = Seated, 1 = Standing.

@type originType: int
    '''
    pass



def setOpenGLDebugging(s):
    '''
    Enables/Disables OpenGL Debugging. This currently only works on Nvidia Quadro Hardware.

@param s: On/Off.

@type s: bool
    '''
    pass



def setPanningSpeed(scalefactor):
    '''
    Set the scalefactor for the navigator panning speed when pivot based panning or linear navigation is turned on.

@param scalefactor: panning speed scaling factor

@type scalefactor: float
    '''
    pass



def setPivot(index, point, x, y, z):
    '''
    Set navigator rotation pivot. Actually there are two functions:

setPivot(index,x,y,z) sets the rotation pivot with the widget index and three float parameters.

setPivot(index,point) sets the rotation pivot with the widget index and a point parameter.

See also L{getNavigationPivot}.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param point: The rotation pivot.

@type point: Pnt3f

@param x: The x coordinate of the rotation pivot.

@type x: float

@param y: The y coordinate of the rotation pivot.

@type y: float

@param z: The z coordinate of the rotation pivot.

@type z: float
    '''
    pass



def setPostprocessAntialiasingMode(on):
    '''
    Enables/Disables postprocessing antialiasing.

@param on: 0 = Off, 1 = On.

@type on: unsigned int
    '''
    pass



def setPowerwallWindow():
    '''
    Sets the size of the virtual powerwall window in world coordinates.
    '''
    pass



def setRaytracingDownscaleFactor(factor):
    '''
    Sets the raytracing downscale factor.

@param factor: Factor: VR_DOWNSCALE_FACTOR_LOW, VR_DOWNSCALE_FACTOR_MEDIUM, VR_DOWNSCALE_FACTOR_HIGH.

@type factor: unsigned integer
    '''
    pass



def setRealisticRendering(state):
    '''
    Enables or disables realistic rendering. If nothing else is chosen, this is the default rendering mode.

@param state: True activates realistic rendering, false keeps current rendering mode.

@type state: int
    '''
    pass



def setRenderFullscreen(state):
    '''
    Maximizes/minimizes the render widget.

@param state: Render widget: maximize/minimize.

@type state: boolean
    '''
    pass



def setRenderQuality(quality):
    '''
    Sets the render quality.

@param quality: The render quality: VR_QUALITY_ANALYTIC_LOW, VR_QUALITY_ANALYTIC_HIGH, VR_QUALITY_REALISTIC_LOW, VR_QUALITY_REALISTIC_HIGH, VR_QUALITY_RAYTRACING, VR_QUALITY_NPR.

@type quality: integer
    '''
    pass



def setRenderRegion(on, startX, startY, endX, endY):
    '''
    Sets render region parameters.

@param on: Enabling render region, true, false.

@type on: integer 

@param startX: Render region start x position.

@type startX: integer 

@param startY: Render region start y position.

@type startY: integer 

@param endX: Render region end x position.

@type endX: integer 

@param endY: Render region end y position.

@type endY: integer
    '''
    pass



def setRenderRoot(index, root):
    '''
    Sets render root.

@param index: The index of render window.

@type index: integer

@param root: The render root.

@type root: NodePtr
    '''
    pass



def setRenderRoots(index, roots):
    '''
    Sets render roots.

@param index: The index of render window.

@type index: integer

@param roots: The list of roots.

@type root: list of vrNodePtrs
    '''
    pass



def setRenderWindowDocked(index, state, flags):
    '''
    Docks a render window.

@param index: The index of render window.

@type index: integer

@param state: Docked: On/Off.

@type state: boolean

@param flags: Window flags (NORMAL | FULLSCREEN | NOBORDER | ONTOP). Optional. Default is NORMAL.

@type flags: integer
    '''
    pass



def setRoll(index, roll):
    '''
    Set navigator roll.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param roll: The roll.

@type roll: float
    '''
    pass



def setSAAWindow(id):
    '''
    Sets the still anti-aliasing window, -1 means use window with focus.

@param id: The window id.

@type id: int
    '''
    pass



def setScreenspaceAO(state):
    '''
    Enables or disables screen space ambient occlusion in OpenGL. Default is off.

@param state: 1: use screen space AO. 0: Use precomputed AO, -1: toggle state.

@type state: int
    '''
    pass



def setSelectionMode(mode):
    '''
    Sets the selection mode.

@param mode: Selection mode: VR_SELECT_COMPONENT, VR_SELECT_OBJECT, VR_SELECT_GROUP, VR_SELECT_BY_MATERIAL, VR_SELECT_ADJACENT.

@type mode: unsigned int
    '''
    pass



def setShadeTileSize():
    '''
    Deprecated.
    '''
    pass



def setShadow(switch):
    '''
    Sets shadow state.

@param switch: Shadows: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setShowABSides(showASides, showBSides):
    '''
    Enable/disable the rendering of A and B Sides.

@param showASides: Render A Sides.

@type showASides: bool

@param showBSides: Render BSides.

@type showBSides: bool
    '''
    pass



def setSnapshotFrame(state, width, height):
    '''
    Show snapshot frame.

@param state: Snapshot frame: On/Off.

@type state: boolean

@param width: The width.

@type width: int

@param height: The height.

@type height: int
    '''
    pass



def setSortTrans(switch):
    '''
    Sets transparent sorting.

@param switch: Transparent sorting: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setSpaceMouseHeight(height):
    '''
    Sets a fixed height in spacemouse mode.

@param height: The height.

@type height: float
    '''
    pass



def setSpaceMousePivotMode(i):
    '''
    Sets the spacemouse pivot mode.

@param i: pivot mode: 0 == camera, 1 == object, 2 == focus distance, 3 == standard vred at.

@type i: integer
    '''
    pass



def setSpaceMouseTwoAxis(s):
    '''
    Sets the two axis mode for the spacemouse.

@param s: two axis mode: On/Off.

@type s: bool
    '''
    pass



def setSpaceMouseViewMode(i):
    '''
    Sets the spacemouse view mode.

@param i: view mode: 0 == camera, 1 == object.

@type i: integer
    '''
    pass



def setSpecTexLighting():
    '''
    Deprecated.
    '''
    pass



def setStillDOF(state, radius, focaldistance):
    '''
    Enables depth of field.

@param state: Depth of field: On/Off.

@type state: bool

@param radius: The radius.

@type radius: float

@param focaldistance: The focal distance (parameter is optional).

@type focaldistance: float
    '''
    pass



def setSuperSampling(state):
    '''
    Enables or disables super sampling.

@param state: Super sampling: On/Off.

@type state: bool
    '''
    pass



def setSuperSamplingOnCameraMovement(state):
    '''
    Enables/Disables super sampling on camera movements.

@param state: On/Off.

@type state: bool
    '''
    pass



def setSuperSamplingQuality(quality):
    '''
    Sets the super sampling quality.

@param quality: Super sampling quality: VR_SS_QUALITY_LOW, VR_SS_QUALITY_MEDIUM, VR_SS_QUALITY_HIGH or VR_SS_QUALITY_ULTRA_HIGH.

@type quality: unsigned int
    '''
    pass



def setTransformNodeSelectionPressed(node):
    '''
    Select a transform node by mouse press event.

@param node: The node to select as transform node.

@type node: NodePtr
    '''
    pass



def setTransformNodeSelectionReleased(node):
    '''
    Deselect of a transform node by mouse release event.

@param node: The node to deselect.

@type node: NodePtr
    '''
    pass



def setTwoSidedLighting():
    '''
    Deprecated.
    '''
    pass



def setUp(index, vector, x, y, z):
    '''
    Set camera "up" vector. Actually there are two functions:

setUp(index,x,y,z) sets the "up" vector with the widget index and three float parameters.

setUp(index,vector) sets the "up" vector with the widget index and a vector parameter.

@param index: The index of the render widget (-1 for the main widget).

@type index: integer

@param vector: The "up" vector.

@type vector: Vec3f

@param x: The x coordinate of the "up" vector.

@type x: float

@param y: The y coordinate of the "up" vector.

@type y: float

@param z: The z coordinate of the "up" vector.

@type z: float
    '''
    pass



def setUseBindless(bindlessEnable):
    '''
    Windows only, Experimental: Enables/Disables the use of bindless graphics extension if available. This can reduce the cost of rendering many geometries in OpenGL but it might get unstable if GPU memory is not sufficient.

@param bindlessEnable: On/Off.

@type bindlessEnable: bool
    '''
    pass



def setUseCommandList(commandlistEnable):
    '''
    Windows only, Experimental: Enables/Disables use of command list extension. This can reduce the cost of rendering many geometries in OpenGL but it might get unstable if GPU memory is not sufficient.

@param commandlistEnable: On/Off.

@type commandlistEnable: bool
    '''
    pass



def setUseLastDrawTree(s):
    '''
    Re-use old draw tree.

@param s: On/Off.

@type s: bool
    '''
    pass



def setUseMulticastSLI(multicastEnable):
    '''
    Windows only: Enables/Disables use of multicast SLI for stereo rendering if present. 

@param multicastEnable: On/Off.

@type multicastEnable: bool
    '''
    pass



def setUsePivotBasedPanning(on):
    '''
    Set the navigator panning mode to be based on the pivot.

@param on: true uses the distance to the pivot to base the panning speed on, false uses the distances to the picked position for panning

@type on: bool
    '''
    pass



def setUseSinglePassStereo(on):
    '''
    Windows only: Enables/Disables use of single pass stereo if supported. This command should be called before stereo rendering is activated.

@param on: On/Off.

@type on: bool
    '''
    pass



def setUseSpaceMouseHeight(value):
    '''
    Sets whether a fixed height is used or not.

@param value: Fixed height: On/Off.

@type value: bool
    '''
    pass



def setUseVariableRateShading(state):
    '''
    Enable or disable variable rate shading.

@param state: Enable/Disable.

@type state: boolean
    '''
    pass



def setUserMatrix(id, matrix):
    '''
    Sets the user projection transform matrix (column-wise).

@param id: The render window index.

@type id: int

@param matrix: The user projection transform matrix.

@type: vector of floats
    '''
    pass



def setVSyncInterval(interval):
    '''
    Sets the V-Sync swap interval. 0 disables V-Sync, 1 Enables V-Sync. -1 Enables adaptive V-Sync if the GPU supports it.

@param interval: Sets the swap interval.

@type interval: int
    '''
    pass



def setVariableRateShadingMode(mode):
    '''
    Set shading rate mode.

@param mode: 0 Screen & Materials (whole image has a specific uniform shading rate, overwrites per material are allowed), 1 Materials (whole image has native uniform shading, only overwrites per material are allowed), 2 Foveated (rings with different shading rate around center, overwrites per material are allowed).

@type mode: int
    '''
    pass



def setVariableRateShadingQuality(quality):
    '''
    Set a predefined shading quality for uniform and foveated rendering. Latter one requires value of 6 to work properly. The super-sampling modes require enabled real-time antialiasing with corresponding multi-samples.

@param quality: 0 native 1x1 pixel shading, 1 coarse 2x2 shading (1 sample per 4 pixels), 2 coarse 4x4 (1 sample per 16 pixels), 3 super-sampling 2x (2 samples per pixel), 4 super-sampling 4x (4 samples per pixel), 5 super-sampling 8x (8 samples per pixel), 6 foveated (quality is defined in VR preferences).

@type quality: int
    '''
    pass



def setViewportCamera(index, cameraNode):
    '''
    Sets the active camera for the given render window to the camera of the given camera node.

@param index: The index of the render window (-1 for the focused widget).

@type index: integer

@param cameraNode: The camera node

@type cameraNode: vrNodePtr
    '''
    pass



def setVolumeDrawing(switch):
    '''
    Sets volume drawing mode.

@param switch: Volume drawing mode: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setWireframe(switch):
    '''
    Sets wireframe rendering mode.

@param switch: Wireframe rendering mode: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: int
    '''
    pass



def setWireframeSelection(switch):
    '''
    Sets wireframe selection mode.

@param switch: true, false.

@type switch: int
    '''
    pass



def setZWriteTrans(switch):
    '''
    Sets z write transparency.

@param switch: Z write transparency: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def setZeroParallaxDistance(zp):
    '''
    Sets zero parallax distance.

@param zp: The zero parallax distance.

@type zp: float
    '''
    pass



def showADSKLogo(state):
    '''
    Enable/disable Autodesk logo.

@param state: Show logo: On/Off.

@type state: bool
    '''
    pass



def showBanner(text, t, bcolor, width, height):
    '''
    Shows a banner on all render widgets. There are four valid sets of parameters:

showBanner(text)

showBanner(text,t)

showBanner(text,t,bcolor)

showBanner(text,t,bcolor,width,height)

@param text: The text to display.

@type text: string

@param t: The transparency.

@type t: float

@param bcolor: The background color (0xAARRGGBB).

@type bcolor: unsigned int

@param width: The banner width.

@type width: int

@param height: The banner height.

@type height: int
    '''
    pass



def showCoordinateSystem(switch):
    '''
    Sets display of the render coordinate systems.

@param switch: Render coordinate systems: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def showInitialView():
    '''
    Show initial view.
    '''
    pass



def showOculusRiftPerformanceHUD(mode):
    '''
    Sets oculus rift performance HUD .

@param mode: the mode to set. 0 = off, 1 = summary, 2 = latency timer, 3 = app rendering timer, 4 = composer rendering timer, 5 = version info

@type mode: int
    '''
    pass



def showPIVRLogo(state):
    '''
    Enable/disable Autodesk logo.

@param state: Show logo: On/Off.

@type state: bool
    '''
    pass



def showProgressCursor(s):
    '''
    Show progress cursor.

@param s: On/Off.

@type s: bool
    '''
    pass



def showStatistic(switch):
    '''
    Sets display of the render statistic.

@param switch: Render statistic: SWITCH_TOGGLE, SWITCH_ON, SWITCH_OFF, true, false.

@type switch: integer
    '''
    pass



def showVRECLogo(state):
    '''
    Enable/disable Autodesk logo.

@param state: Show logo: On/Off.

@type state: bool
    '''
    pass



def showViewCube(s):
    '''
    Show view cube.

@param s: On/Off.

@type s: bool
    '''
    pass



def showWholeScene():
    '''
    Shows the whole scene.
    '''
    pass



def startStatisticsRecording(index):
    '''
    Starts (resumes) recording statistical data of the given render window.

@param index: The index of the render window (-1 for the focused window).

@type index: integer
    '''
    pass



def stopStatisticsRecording(index):
    '''
    Stops (pauses) recording statistical data of the given render window.

@param index: The index of the render window (-1 for the focused window).

@type index: integer
    '''
    pass



def toggleFullscreen(index, multiDisplayFullscreen):
    '''
    switched between fullscreen and normal mode.

@param index: Render widget index.

@type index: integer

@param multiDisplayFullscreen: switch fullscreen over multi displays.

@type multiDisplayFullscreen: boolean
    '''
    pass



def toggleRaytracing(state):
    '''
    Toggle RayTracing on/off 

@param state: Toggle Raytracing: On/Off.

@type state: bool
    '''
    pass



def updateAllMGLW():
    '''
    Updates all MGLW.
    '''
    pass



def updateAllMGLWAll():
    '''
    Updates all MGLW.
    '''
    pass



def writeRecordedStatistics(index, path):
    '''
    Write all recorded statistics of the given render window to a csv file.

@param index: The index of the render window (-1 for the focused window).

@type index: integer

@param path: path to the folder where the file should be stored, e.g. C:/vred.

@type path: string
    '''
    pass


