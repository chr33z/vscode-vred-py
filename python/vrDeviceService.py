'''
vrDeviceService
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
This service allows the management of VR devices and interactions that are triggered by those devices. It gives access to interaction as well as device objects and also allows their creation.
'''

from typing import List


class vrdDeviceAction():
    pass


class vrdDeviceInteraction():
    pass


class vrdVRDevice():
    pass


class vrdNode():
    pass


class QVector3D():
    pass


def activateInteraction(interaction: str):
    '''
    Activates an interaction. This allows an interaction to resume receiving input signals, if the interaction is in the active interaction group.
    '''
    pass


def createInteraction(name: str) -> vrdDeviceInteraction:
    '''
    Creates a new device interaction and makes it available for mapping inputs to its actions.
    '''
    return None


def createVRDevice(name: str) -> vrdVRDevice:
    '''
    Creates a virtual device. This can be used to integrate custom hand tracking wtih python.
    '''
    return None


def deactivateInteraction(interaction: str):
    '''
    Deactivates an interaction. The interaction will not receive input signals anymore.
    '''
    pass


def deleteVRDevice(device: vrdVRDevice):
    '''
    Removes a virtual device.
    '''
    pass


def getActiveInteractionGroup() -> str:
    '''
    Gets the currently active interaction group.
    '''
    return None


def getConnectedVRDevices() -> List[vrdVRDevice]:
    '''
    Gets the connected VR devices like controllers or trackers.
    '''
    return None


def getInteraction(name: str) -> vrdDeviceInteraction:
    '''
    Gets an interactions that is already known to the service.
    '''
    return None


def getInteractions() -> List[vrdDeviceInteraction]:
    '''
    Gets all interactions that are known to the service.
    '''
    return None


def getTrackingOrigin() -> QVector3D:
    '''
    Returns the tracking reference origin. Default is (0, 0, 0). Can be changed with setTrackingOrigin.
    '''
    return None


def getVRDevice(name: str) -> vrdVRDevice:
    '''
    Gets an VR device, which can be a controllers or a trackers by its name.
    '''
    return None


def getVRDeviceBySerialNumber(serialNumber: str) -> vrdVRDevice:
    '''
    Gets an VR device, which can be a controllers or a trackers by its serial number.
    '''
    return None


def removeInteraction(interaction: vrdDeviceInteraction):
    '''
    Removes an interaction from the input mapping.
    '''
    pass


def setActiveInteractionGroup(interactionGroup: str):
    '''
    Activates a group of interactions which will from now on receive all the input signals. This will also deactivate all other interaction groups as only one interaction group can be active.
    '''
    pass


def setTrackingOrigin(position: QVector3D):
    '''
    Sets the tracking reference origin for tracking. Use it to correct any offsets in the scene This function always assumes Y-Up, even if Z-up is set in the scene. If the tracking origin should be at pos = (x_scene, y_scene, z_scene) in the VRED scene, call setTrackingOrigin(QVector3D(-x_scene, -z_scene, y_scene))
    '''
    pass


def deviceActionTriggered(action: vrdDeviceAction, device: vrdVRDevice):
    '''
    The signal that is send, when the corresponding device action is triggered.
    '''
    pass


def deviceCollisionStarted(otherNode: vrdNode, device: vrdVRDevice):
    '''
    Signal is emitted when the collision sensor of a device touches a collision sensitive node.
    '''
    pass


def deviceCollisionStopped(otherNode: vrdNode, device: vrdVRDevice):
    '''
    Signal is emitted when the collision sensor of a device stops touching a collision sensitive node.
    '''
    pass


def deviceMoved(device: vrdVRDevice):
    '''
    Signal that is triggered, when a VR device moved.
    '''
    pass

