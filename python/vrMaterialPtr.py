
# Autogenerated method stubs for 'vrMaterialPtr.py' module
# VRED Version: 13.0
# 
# VRED-Py - Visual Studio Code Tools for Autodesk VRED
# Copyright: Christopher Gebhardt 2020



def createMaterial(type):
    '''
    Creates a MaterialPtr of a specific type.

@param type: The name of the material type.

@type type: string - names are like 'U'+like in the MaterialEditor without space e.g. 'UPlasticMaterial'

@return: The material.

@rtype: vrMaterialPtr
    '''
    pass



def findMaterial(name):
    '''
    Finds a material by name.

@param name: The material name.

@type name: string

@return: The material.

@rtype: vrMaterialPtr
    '''
    pass



def findMaterials(name, regexp):
    '''
    Finds materials by name.

@param name: The material name.

@type name: string

@param regexp: Use regular expression: On/Off (Optional). Default is false.

@type regexp: bool

@return: The materials.

@rtype: list of vrMaterialPtrs
    '''
    pass



def getAllMaterials():
    '''
    Returns all materials.

@return: The materials.

@rtype: list of vrMaterialPtrs
    '''
    pass



def getMaterialTags(material):
    '''
    Returns the list of tags attached to the given material.

@param material: The material to check.

@type material: MaterialPtr
    '''
    pass



def getMaterialsWithTag(tag):
    '''
    Returns a list of materials which have the metadatatag assigned starting from the root material.

@param tag: The tag string to check.

@type tag: string

@return: The selected materials.

@rtype: list of vrMaterialPtrs
    '''
    pass



def getMaterialsWithTags(tags, matchAllTags ):
    '''
    Returns a list of materials which have the metadatatag assigned.

@param tags: The list of tag strings to check.

@type tags: string

@param matchAllTags : If true only materials which contain all give tags are returns. If false any material that contains at least one tag is returned.

@type matchAllTags: bool

@return: The selected materials.

@rtype: list of vrMaterialPtrs
    '''
    pass



def hasMaterialTag(material, tag):
    '''
    Checks if a material has a certain tag.

@param material: The material to check.

@type material: MaterialPtr

@param tag: The tag string to check.

@type tag: string
    '''
    pass



def hasMaterialTags(material, tag):
    '''
    Checks if a material has a certain tag.

@param material: The material to check.

@type material: MaterialPtr

@param tag: The tag string to check.

@type tag: string
    '''
    pass



def setEnvironmentImage(mat, image_path):
    '''
    Changes the image of a material.

@param mat: The material.

@type mat: MaterialPtr

@param image_path: The image path.

@type image_path: string
    '''
    pass



def setMaterialImage(mat, field_name, image_path):
    '''
    Changes the image of a material.

@param mat: The material pointer or the material name.

@type mat: MaterialPtr or string

@param field_name: The field name.

@type field_name: string

@param image_path: The image path.

@type image_path: string
    '''
    pass



def setSwitchMaterialChoice(name, choice):
    '''
    Changes the choice of a switch material.

@param name: The material name.

@type name: string

@param choice: The choice.

@type choice: unsigned integer
    '''
    pass



def setTextureTransform(mat, translate, rotate):
    '''
    Changes the input coordinate transformation for texture projections in ubermaterials.

@param mat: The material. This must be a material derived from Ubermaterial.

@type mat: MaterialPtr

@param translate: translation values.

@type translate: Pnt3f

@param rotate: euler rotation values.

@type rotate: Vec3f@param scale: scale values.

@type scale: Vec3f
    '''
    pass



def toMaterial(id):
    '''
    Returns a material pointer corresponding to the material id provided.

@param id: The material id.

@type id: unsigned int (32bit)

@return: The material pointer.

@rtype: vrMaterialPtr
    '''
    pass


