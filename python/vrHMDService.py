'''
vrHMDService
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Gives access to a Virtual Reality HMD (Head-mounted display) like the HTC Vive or Oculus.
'''

from typing import List


class vrdEyeGaze():
    pass


class vrdFoveatedQuality():
    pass


class vrdStarVRRenderSettings():
    pass


class FoveatedQualityPreset():
    pass


def getEyeGaze() -> vrdEyeGaze:
    '''
    Returns tracked eye gaze data while eye tracking is active. Without eye tracking returns the forward looking ray of the HMD user. The gaze ray is in world coordinates.
    '''
    return None


def getEyeTrackingEnabled() -> bool:
    '''
    Returns whether eye tracking should be enabled in VR. Please note this does not tell whether the HMD actually supports eye tracking or whether eye tracking is currently running. For the latter, use         vrHMDService.isEyeTrackingActive().
    '''
    return None


def getFovealRegionSize() -> float:
    '''
    Gets the size of the foveal region in foveated rendering mode.
    '''
    return None


def getFoveatedRenderingEnabled() -> bool:
    '''
    Returns whether foveated rendering should be enabled in VR. Please note this does not tell whether the graphics card actually supports foveated rendering.
    '''
    return None


def getFoveatedRenderingQuality(preset: FoveatedQualityPreset) -> vrdFoveatedQuality:
    '''
    Gets the quality settings for a given preset.
    '''
    return None


def getFoveatedRenderingQualityPreset() -> FoveatedQualityPreset:
    '''
    Gets the quality preset that is used for foveated rendering. Get the individual settings for the preset with getFoveatedRenderingQuality(vrRenderTypes::FoveatedQualityPreset).
    '''
    return None


def getStarVRRenderSettings() -> vrdStarVRRenderSettings:
    '''
    Get current render settings that are specific for the StarVR HMD.
    '''
    return None


def isEyeTrackingActive() -> bool:
    '''
    Returns whether eye tracking is currently active. It can only be active if enabled, while in VR and if the HMD has an eye tracker supported by VRED.
    '''
    return None


def isHmdActive() -> bool:
    '''
    Check if an HMD (VR) display mode is active.
    '''
    return None


def setEyeTrackingEnabled(enabled: bool):
    '''
    Enables or disables eye tracking in VR if supported by the connected HMD. If the option is set before VR mode is enabled, it is applied when entering VR. Enable eye tracking for foveated rendering.
    '''
    pass


def setFovealRegionSize(size: float):
    '''
    Sets the size of the foveal region in foveated rendering mode. See         vrHMDService.setFoveatedRenderingEnabled(enabled).
    '''
    pass


def setFoveatedRenderingCustomQuality(quality: vrdFoveatedQuality):
    '''
    Allows to set a custom configuration for the shading qualities used in foveated rendering mode. Enable the custom quality by setting         vrHMDService.setFoveatedRenderingQualityPreset(preset) to Custom.
    '''
    pass


def setFoveatedRenderingEnabled(enabled: bool):
    '''
    Enables or disables foveated rendering in VR. This requires the OpenGL Shading Rate Image extension which is supported by NVIDIA Turing graphics cards. If the option is set before VR mode is enabled, it is applied when entering VR.
    '''
    pass


def setFoveatedRenderingQualityPreset(preset: FoveatedQualityPreset):
    '''
    Set the quality preset used for foveated rendering.
    '''
    pass


def setStarVRRenderSettings(settings: vrdStarVRRenderSettings):
    '''
    Apply specific render settings for the StarVR HMD. Changes to these settings take effect on next activation of StarVR HMD mode.
    '''
    pass


def eyeGazeChanged():
    '''
    This signal is triggered every frame while eye tracking is active.
    '''
    pass


def foveatedRenderingStateChanged(enabled: bool):
    '''
    This signal is triggered when the state of foveated rendering changed.
    '''
    pass


def hmdStatusChanged(active: bool):
    '''
    This signal is triggered when HMD (VR) display mode is switched on or off.
    '''
    pass

