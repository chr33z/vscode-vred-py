'''
vrdSceneplateNode
------------------------------------------
API version: v2 | Generation Date: 2020-05-01 | VRED-Py: Visual Studio Code Tools for Autodesk VRED | Autogenerated Method-Stubs

------------------------------------------
Base class for all scene plate types.
'''

from typing import List


class NodeType():
    pass


class QVector2D():
    pass


class SizeType():
    pass


class vrdImage():
    pass


class RepeatMode():
    pass


class QVector3D():
    pass


class Position():
    pass


class ContentType():
    pass


def getBackgroundColor() -> QVector3D:
    '''
    Returns the text background color.
    '''
    return None


def getBackgroundTransparency() -> float:
    '''
    Returns the transparency of the text background.
    '''
    return None


def getBrightness() -> float:
    '''
    Returns brightness from color correction.
    '''
    return None


def getClickThrough() -> float:
    '''
    Returns the transparency limit for content to be unnoticeable to mouse clicks.
    '''
    return None


def getContentType() -> ContentType:
    '''
    Returns the type of content to be displayed on the plate.
    '''
    return None


def getContrast() -> float:
    '''
    Returns contrast from color correction.
    '''
    return None


def getFont() -> str:
    '''
    Returns font name.
    '''
    return None


def getFontColor() -> QVector3D:
    '''
    Returns the font color.
    '''
    return None


def getFontHeight() -> int:
    '''
    Returns the vertical resolution in pixels per text line.
    '''
    return None


def getFontStyle() -> str:
    '''
    Returns text font style.
    '''
    return None


def getFrameOffset() -> int:
    '''
    Returns offset to the image number when using an image sequence.
    '''
    return None


def getHeight() -> int:
    '''
    Returns the height of the canvas in pixels for HTML content.
    '''
    return None


def getHueShift() -> float:
    '''
    Returns hue shift from color correction.
    '''
    return None


def getImage() -> vrdImage:
    '''
    Returns the image object.
    '''
    return None


def getImageNumber() -> int:
    '''
    Returns image number in current image sequence.
    '''
    return None


def getInlineImageSequence() -> bool:
    '''
    Returns if image sequence is inlined into the vpb file.
    '''
    return None


def getNodeType() -> NodeType:
    '''
    Returns the node type.
    '''
    return None


def getOffset() -> QVector2D:
    '''
    Returns the offset of the plate to its anchor point.
    '''
    return None


def getOffsetMode() -> SizeType:
    '''
    Returns how offset should be interpreted. Absolute means the offset is in pixels. Relative means the offset is given as a fraction of the viewport extents.
    '''
    return None


def getPosition() -> Position:
    '''
    Returns the anchor point of the plate within the viewport.
    '''
    return None


def getRepeatMode() -> RepeatMode:
    '''
    Returns the repeat mode of the plate image within the viewport.
    '''
    return None


def getRotation() -> float:
    '''
    Returns the amount the plate is rotated clockwise in degrees around its center.
    '''
    return None


def getSaturation() -> float:
    '''
    Returns saturation from color correction.
    '''
    return None


def getSize() -> float:
    '''
    Returns the height of the plate.
    '''
    return None


def getSizeMode() -> SizeType:
    '''
    Returns how size is interpreted. Absolute means the size is in pixels. Relative means the size is a fraction of the viewport height.
    '''
    return None


def getText() -> str:
    '''
    Returns the text.
    '''
    return None


def getTransparency() -> float:
    '''
    Returns the overall transparency of the plate.
    '''
    return None


def getUrl() -> str:
    '''
    Returns the url or the content of a web site.
    '''
    return None


def getUseImageSequence() -> bool:
    '''
    Returns if image sequences is used.
    '''
    return None


def getWhiteBalance() -> int:
    '''
    Returns white balance from color correction.
    '''
    return None


def getWidth() -> int:
    '''
    Returns the width of the canvas in pixels for HTML content.
    '''
    return None


def setBackgroundColor(color: QVector3D):
    '''
    Sets the text background color.
    '''
    pass


def setBackgroundTransparency(transparency: float):
    '''
    Sets the transparency of the text background.
    '''
    pass


def setBrightness(brightness: float):
    '''
    Shifts the content’s blacks, grays, and whites. Higher values increase the perceived luminance of the content.
    '''
    pass


def setClickThrough(clickThrough: float):
    '''
    Sets the transparency limit for content to be unnoticeable to mouse clicks.
    '''
    pass


def setContentType(contentType: ContentType):
    '''
    Sets the type of content to be displayed on the plate.
    '''
    pass


def setContrast(contrast: float):
    '''
    Shifts the content’s light and dark color values. Higher values create brighter highlights and darker shadows.
    '''
    pass


def setFont(fontName: str):
    '''
    Sets the text font.
    '''
    pass


def setFontColor(color: QVector3D):
    '''
    Sets the text color.
    '''
    pass


def setFontHeight(fontHeight: int):
    '''
    Sets the vertical resolution in pixels per text line.
    '''
    pass


def setFontStyle(style: str):
    '''
    Sets text font style.
    '''
    pass


def setFrameOffset(frameOffset: int):
    '''
    Sets an offset to the image number when using an image sequence.
    '''
    pass


def setHeight(height: int):
    '''
    Sets the height of the canvas in pixels for HTML content.
    '''
    pass


def setHueShift(value: float):
    '''
    Shifts all content colors uniformly through the hue color range.
    '''
    pass


def setImage(img: vrdImage):
    '''
    Sets image object.
    '''
    pass


def setImageNumber(imageNumber: int):
    '''
    Sets the image number in current image sequence.
    '''
    pass


def setInlineImageSequence(inlineImageSequence: bool):
    '''
    Inlines the image sequence into the vpb file.
    '''
    pass


def setNodeType(nodeType: NodeType):
    '''
    Sets the sceneplate type. Frontplates appear on top of the scene and backplates behind.
    '''
    pass


def setOffset(offset: QVector2D):
    '''
    Sets the offset of the plate to its anchor point.
    '''
    pass


def setOffsetMode(offsetMode: SizeType):
    '''
    Sets how offset should be interpreted. Absolute means the offset is in pixels. Relative means the offset is given as a fraction of the viewport extents.
    '''
    pass


def setPosition(position: Position):
    '''
    Sets the anchor point of the plate within the viewport.
    '''
    pass


def setRepeatMode(repeatMode: RepeatMode):
    '''
    Sets the repeat mode of the plate image within the viewport.
    '''
    pass


def setRotation(rotation: float):
    '''
    Sets the amount the plate is rotated clockwise in degrees around its center.
    '''
    pass


def setSaturation(saturation: float):
    '''
    Shifts the content’s color intensity. Higher values produce vivid colors. Lower values produce dull grayer colors.
    '''
    pass


def setSize(size: float):
    '''
    Sets the height of the plate. Width is set accordingly to maintain the aspect ratio of its content.
    '''
    pass


def setSizeMode(sizeMode: SizeType):
    '''
    Sets how size is interpreted. Absolute means the size is in pixels. Relative means the size is a fraction of the viewport height.
    '''
    pass


def setText(text: str):
    '''
    Sets the text.
    '''
    pass


def setTransparency(transparency: float):
    '''
    Sets the overall transparency of the plate.
    '''
    pass


def setUrl(url: str):
    '''
    The url can contain a valid URL to a website (‘        http://www.autodesk.com’) or the html content of a website as a string.
    '''
    pass


def setUseImageSequence(useImageSequence: bool):
    '''
    Use an image sequence.
    '''
    pass


def setWhiteBalance(whiteBalance: int):
    '''
    Shifts the content’s white balance to match the color temperature of the scene in Kelvin. Lower values produce cooler (bluish) colors. Higher values produce warmer (yellowish) colors.
    '''
    pass


def setWidth(width: int):
    '''
    Sets the width of the canvas in pixels for HTML content.
    '''
    pass

